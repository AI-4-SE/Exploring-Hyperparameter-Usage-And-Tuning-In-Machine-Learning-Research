{
    "Fine-Tunning Tutorials/FineTunning Data Preprocessing Code/Create_pretrainEHR_dataFTv1.py": {
        "tensorflow": {
            "Feature_212": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_217": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_117": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_141": {
                "msg": {
                    "value": "Wrote %d total instances",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_written",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_written + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_223": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_242": {
                "msg": {
                    "value": "*** Writing to output files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_244": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_files",
                            "variable"
                        ],
                        [
                            "output_files",
                            "variable"
                        ]
                    ]
                }
            },
            "TFRecordWriter_58": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_files",
                            "variable"
                        ],
                        [
                            "output_files",
                            "variable"
                        ]
                    ]
                }
            },
            "info_125": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_126": {
                "msg": {
                    "value": "tokens: ",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq in enumerate(seqs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_212": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_217": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_117": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_135": {
                "msg": {
                    "value": "'%s: %s' % (feature_name, ' '.join([str(x) for x in values]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pretraining Code/Data Pre-processing Code/create_BERTpretrain_EHRfeatures.py": {
        "tensorflow": {
            "Feature_201": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_206": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=list(values))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_117": {
                "variable": {
                    "value": "tf_example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_142": {
                "msg": {
                    "value": "Wrote %d total instances",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_written",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_written + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_230": {
                "msg": {
                    "value": "*** Writing to output files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "  %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_files",
                            "variable"
                        ],
                        [
                            "output_files",
                            "variable"
                        ]
                    ]
                }
            },
            "TFRecordWriter_57": {
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_files",
                            "variable"
                        ],
                        [
                            "output_files",
                            "variable"
                        ]
                    ]
                }
            },
            "info_125": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_126": {
                "msg": {
                    "value": "tokens: ",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq in enumerate(seqs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_201": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_206": {
                "value": {
                    "value": "list(values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_117": {
                "feature": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "info_135": {
                "msg": {
                    "value": "'%s: %s' % (feature_name, ' '.join([str(x) for x in values]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Pretraining Code/modeling.py": {
        "tensorflow": {
            "list_variables_330": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_358": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_409": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_414": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.gather(embedding_table, flat_input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_541": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_549": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_666": {
                "variable": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_674": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_682": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_701": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_702": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_720": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_727": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_732": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_735": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_738": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_926": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_942": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_377": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_407": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_416": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_417": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_419": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_476": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_483": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_484": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_485": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_490": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "seq_length",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_631": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_634": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ],
                        [
                            "output_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_707": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_742": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_747": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_956": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ],
                        [
                            "output_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_166": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_492": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_505": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_516": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_542": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ],
                        [
                            "to_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_93": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_228": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_275": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_491": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_827": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_867": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3072",
                            "Method Argument"
                        ],
                        [
                            "3072",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_875": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_982": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_712": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_830": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_853": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_858": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_866": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_874": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_832": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_857": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_276": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_vars",
                            "variable"
                        ],
                        [
                            "expected_rank",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Pretraining Code/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_27": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_32": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_train_steps",
                            "Method Argument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_71": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_74": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, clip_norm=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_83": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_warmup_steps",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "is_warmup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_157": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_132": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_134": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_135": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_137": {
                "x": {
                    "value": "next_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Pretraining Code/run_EHRpretraining.py": {
        "tensorflow": {
            "DEFINE_string_85": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_91": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_97": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_103": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "variable": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_335": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_408": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([max_seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'masked_lm_positions': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_ids': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_weights': tf.FixedLenFeature([max_predictions_per_seq], tf.float32), 'next_sentence_labels': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ],
                        [
                            "name_to_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RunConfig_445": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_466": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn",
                            "Call"
                        ],
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.num_train_steps, num_warmup_steps=FLAGS.num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_151": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_272": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_276": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "output_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_277": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_278": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ],
                        [
                            "label_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_284": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ],
                        [
                            "label_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "bert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_306": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, bert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_310": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_313": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "output_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_314": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_315": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_317": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_verbosity_422": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_429": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_435": {
                "msg": {
                    "value": "*** Input Files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_441": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TrainSpec_495": {
                "variable": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_fn_builder(input_files=input_files, max_seq_length=FLAGS.max_seq_length, max_predictions_per_seq=FLAGS.max_predictions_per_seq, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "max_steps": {
                    "value": "FLAGS.num_train_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EvalSpec_496": {
                "variable": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "eval_input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_fn_builder(input_files=input_files, max_seq_length=FLAGS.max_seq_length, max_predictions_per_seq=FLAGS.max_predictions_per_seq, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "throttle_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_and_evaluate_498": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.TPUEstimator(use_tpu=FLAGS.use_tpu, model_fn=model_fn, config=run_config, train_batch_size=FLAGS.train_batch_size, eval_batch_size=FLAGS.eval_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=eval_input_fn, throttle_secs=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_118": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_168": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_181": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_261": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(bert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_386": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "input_files",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_415": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_437": {
                "msg": {
                    "value": "'  %s' % input_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_474": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_475": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_484": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_485": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_120": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_173": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_233": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(metric_fn, [masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids, masked_lm_weights, next_sentence_example_loss, next_sentence_log_probs, next_sentence_labels])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_260": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_292": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_294": {
                "input_tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_318": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_331": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_352": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_354": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_356": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_358": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_360": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_362": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_364": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_and_batch_396": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_shape[0]",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "num_cpu_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Glob_433": {
                "filename": {
                    "value": "input_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUConfig_450": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GFile_504": {
                "name": {
                    "value": "output_eval_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_505": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_166": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "masked_lm_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "masked_lm_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_example_loss",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_200": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_206": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_example_loss",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_sentence_output(bert_config, model.get_pooled_output(), next_sentence_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "next_sentence_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, next_sentence_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_212": {
                "variable": {
                    "value": "next_sentence_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_sentence_output(bert_config, model.get_pooled_output(), next_sentence_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "next_sentence_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ],
                        [
                            "next_sentence_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_215": {
                "variable": {
                    "value": "next_sentence_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ],
                        [
                            "next_sentence_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "next_sentence_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_sentence_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_217": {
                "variable": {
                    "value": "next_sentence_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_sentence_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_sentence_output(bert_config, model.get_pooled_output(), next_sentence_labels)",
                            "Call"
                        ],
                        [
                            "next_sentence_example_loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_370": {
                "value": {
                    "value": "input_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "input_files",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "parallel_interleave_380": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_cpu_threads, len(input_files))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_507": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_161": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Pretraining Code/run_EHRpretraining_QA2Seq.py": {
        "tensorflow": {
            "DEFINE_string_86": {
                "name": {
                    "value": "tpu_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "The Cloud TPU to use for training. This should be either the name used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 url.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_92": {
                "name": {
                    "value": "tpu_zone",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] GCE zone where the Cloud TPU is located in. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_98": {
                "name": {
                    "value": "gcp_project",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] Project name for the Cloud TPU-enabled project. If not specified, we will attempt to automatically detect the GCE project from metadata.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_104": {
                "name": {
                    "value": "master",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "[Optional] TensorFlow master URL.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "flat_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(0, batch_size, dtype=tf.int32) * seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "positions + flat_offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "variable": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sequence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_343": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat_sequence_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(sequence_tensor, [batch_size * seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "flat_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(positions + flat_offsets, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_416": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "record",
                            "Method Argument"
                        ]
                    ]
                },
                "features": {
                    "value": "name_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'input_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'input_mask': tf.FixedLenFeature([max_seq_length], tf.int64), 'segment_ids': tf.FixedLenFeature([max_seq_length], tf.int64), 'masked_lm_positions': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_ids': tf.FixedLenFeature([max_predictions_per_seq], tf.int64), 'masked_lm_weights': tf.FixedLenFeature([max_predictions_per_seq], tf.float32), 'next_sentence_labels': tf.FixedLenFeature([1], tf.int64)}",
                            "Dict"
                        ],
                        [
                            "name_to_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RunConfig_453": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.contrib.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)",
                            "Call"
                        ]
                    ]
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "FLAGS.save_checkpoints_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_474": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn",
                            "Call"
                        ],
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, learning_rate=FLAGS.learning_rate, num_train_steps=FLAGS.num_train_steps, num_warmup_steps=FLAGS.num_warmup_steps, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(cluster=tpu_cluster_resolver, master=FLAGS.master, model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=FLAGS.iterations_per_loop, num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "train_batch_size": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eval_batch_size": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_156": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_279": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bert_config.vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_283": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(input_tensor2, 1)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "output_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_284": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_285": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ],
                        [
                            "label_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_290": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_ids, [-1])",
                            "Call"
                        ],
                        [
                            "label_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "bert_config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_299": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_weights * per_example_loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, bert_config.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_316": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_320": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_tensor2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor2",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_321": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(input_tensor2, 1)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', shape=[2, bert_config.hidden_size], initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "output_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bias_add_322": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', shape=[bert_config.vocab_size], initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('output_bias', shape=[2], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_323": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.matmul(input_tensor, output_weights, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(logits, output_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_325": {
                "variable": {
                    "value": "one_hot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])",
                            "UnaryOp"
                        ],
                        [
                            "-tf.reduce_sum(one_hot_labels * log_probs, axis=-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_verbosity_430": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_437": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_443": {
                "msg": {
                    "value": "*** Input Files ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_449": {
                "variable": {
                    "value": "tpu_cluster_resolver",
                    "type": "variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TrainSpec_507": {
                "variable": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_fn_builder(input_files=input_files, max_seq_length=FLAGS.max_seq_length, max_predictions_per_seq=FLAGS.max_predictions_per_seq, is_training=True)",
                            "Call"
                        ]
                    ]
                },
                "max_steps": {
                    "value": "FLAGS.num_train_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EvalSpec_508": {
                "variable": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "eval_input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_fn_builder(input_files=input_files, max_seq_length=FLAGS.max_seq_length, max_predictions_per_seq=FLAGS.max_predictions_per_seq, is_training=False)",
                            "Call"
                        ]
                    ]
                },
                "throttle_secs": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_and_evaluate_510": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.TPUEstimator(use_tpu=FLAGS.use_tpu, model_fn=model_fn, config=run_config, train_batch_size=FLAGS.train_batch_size, eval_batch_size=FLAGS.eval_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=eval_input_fn, throttle_secs=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_119": {
                "msg": {
                    "value": "*** Features ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_173": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_186": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimization.create_optimizer(total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)",
                            "Call"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "cls/predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_269": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_indexes(input_tensor, positions)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(input_tensor, units=bert_config.hidden_size, activation=modeling.get_activation(bert_config.hidden_act), kernel_initializer=modeling.create_initializer(bert_config.initializer_range))",
                            "Call"
                        ],
                        [
                            "modeling.layer_norm(input_tensor)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(input_tensor2, 1)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "bert_config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "modeling.get_activation(bert_config.hidden_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "modeling.create_initializer(bert_config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "cls/seq_relationship",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_394": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "input_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "input_files",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_423": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example[name]",
                            "Subscript"
                        ],
                        [
                            "tf.to_int32(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_445": {
                "msg": {
                    "value": "'  %s' % input_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_482": {
                "msg": {
                    "value": "***** Running training *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_483": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_493": {
                "msg": {
                    "value": "***** Running evaluation *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_494": {
                "msg": {
                    "value": "  Batch size = %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_121": {
                "msg": {
                    "value": "'  name = %s, shape = %s' % (name, features[name].shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_178": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_250": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_lm_loss + next_sentence_loss",
                            "BinOp"
                        ]
                    ]
                },
                "eval_metrics": {
                    "value": "eval_metrics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(metric_fn, [masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids, masked_lm_weights, next_sentence_example_loss, next_sentence_log_probs, next_sentence_labels])",
                            "Tuple"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_298": {
                "input_tensor": {
                    "value": "log_probs * one_hot_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "input_tensor": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(label_weights, [-1])",
                            "Call"
                        ],
                        [
                            "label_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_326": {
                "input_tensor": {
                    "value": "one_hot_labels * log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "range_339": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_360": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_362": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_364": {
                "shape": {
                    "value": "[max_seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_366": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_368": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_370": {
                "shape": {
                    "value": "[max_predictions_per_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_372": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_and_batch_404": {
                "map_func": {
                    "value": "lambda record: _decode_record(record, name_to_features)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_shape[0]",
                            "Subscript"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "num_cpu_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Glob_441": {
                "filename": {
                    "value": "input_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.input_file.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUConfig_458": {
                "iterations_per_loop": {
                    "value": "FLAGS.iterations_per_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GFile_516": {
                "name": {
                    "value": "output_eval_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_517": {
                "msg": {
                    "value": "***** Eval results *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_171": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "masked_lm_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, masked_lm_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_203": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_log_probs, [-1, masked_lm_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "masked_lm_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_206": {
                "variable": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked_lm_predictions, [masked_lm_predictions], 'masked_lm_predictions')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[masked_lm_predictions]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "masked_lm_predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_207": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.Print(masked_lm_ids, [masked_lm_ids], 'masked_lm_ids')",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "[masked_lm_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "masked_lm_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Print_208": {
                "variable": {
                    "value": "exp_log_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "tf.exp(-masked_lm_example_loss)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[tf.exp(-masked_lm_example_loss)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "tf.exp(-masked_lm_example_loss)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_example_loss",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_211": {
                "variable": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.Print(masked_lm_ids, [masked_lm_ids], 'masked_lm_ids')",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_weights",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_213": {
                "variable": {
                    "value": "masked_lm_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.Print(masked_lm_ids, [masked_lm_ids], 'masked_lm_ids')",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "masked_lm_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.Print(masked_lm_predictions, [masked_lm_predictions], 'masked_lm_predictions')",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_219": {
                "variable": {
                    "value": "masked_lm_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "masked_lm_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_ids']",
                            "Subscript"
                        ],
                        [
                            "tf.Print(masked_lm_ids, [masked_lm_ids], 'masked_lm_ids')",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_ids, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.exp(-masked_lm_example_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "masked_lm_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "masked_lm_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_masked_lm_output(bert_config, model.get_sequence_output(), model.get_embedding_table(), masked_lm_positions, masked_lm_ids, masked_lm_weights)",
                            "Call"
                        ],
                        [
                            "tf.reshape(masked_lm_example_loss, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_example_loss",
                            "Method Argument"
                        ]
                    ]
                },
                "weights": {
                    "value": "masked_lm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['masked_lm_weights']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(masked_lm_weights, [-1])",
                            "Call"
                        ],
                        [
                            "masked_lm_weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_sentence_output(bert_config, model.get_sequence_output(), next_sentence_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "next_sentence_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, next_sentence_log_probs.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_228": {
                "variable": {
                    "value": "next_sentence_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_sentence_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_sentence_output(bert_config, model.get_sequence_output(), next_sentence_labels)",
                            "Call"
                        ],
                        [
                            "tf.reshape(next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])",
                            "Call"
                        ],
                        [
                            "next_sentence_log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_230": {
                "variable": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ],
                        [
                            "next_sentence_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "accuracy_231": {
                "variable": {
                    "value": "next_sentence_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "next_sentence_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['next_sentence_labels']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(next_sentence_labels, [-1])",
                            "Call"
                        ],
                        [
                            "next_sentence_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "next_sentence_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(next_sentence_log_probs, axis=-1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_233": {
                "variable": {
                    "value": "next_sentence_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "next_sentence_example_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_next_sentence_output(bert_config, model.get_sequence_output(), next_sentence_labels)",
                            "Call"
                        ],
                        [
                            "next_sentence_example_loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_378": {
                "value": {
                    "value": "input_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "input_files",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "parallel_interleave_388": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode == tf.estimator.ModeKeys.TRAIN",
                            "Compare"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(num_cpu_threads, len(input_files))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_519": {
                "msg": {
                    "value": "  %s = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(result.keys())",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "str(result[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_166": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_208": {
                "x": {
                    "value": "-masked_lm_example_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_219": {
                "x": {
                    "value": "-masked_lm_example_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}