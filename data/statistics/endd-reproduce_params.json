{
    "code/scripts/explore_spiral_data.py": {
        "sklearn": {},
        "tensorflow": {
            "one_hot_143": {
                "variable": {
                    "value": "y_train_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_train.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_144": {
                "variable": {
                    "value": "y_test_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_test.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/measures.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "code/examples/ensemble_example_usage.py": {
        "tensorflow": {
            "load_data_34": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/examples/ensemble_example_usage_2.py": {
        "tensorflow": {
            "list_physical_devices_22": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_23": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/examples/evaluation_example_usage.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/cnn.py": {
        "tensorflow": {
            "Sequential_28": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_29": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.DATASET_INPUT_SHAPES[dataset_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2D_30": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_31": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_33": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_34": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_36": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "units": {
                    "value": "settings.DATASET_N_CLASSES[dataset_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_46": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/cnn_priorNet.py": {
        "tensorflow": {}
    },
    "code/models/dense_priornet.py": {
        "tensorflow": {
            "Sequential_24": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_25": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.DATASET_INPUT_SHAPES[dataset_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dense_26": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "units": {
                    "value": "settings.DATASET_N_CLASSES[dataset_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "exponential",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/ensemble.py": {
        "tensorflow": {
            "clear_session_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/models/small_net.py": {
        "tensorflow": {
            "Sequential_25": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Input_26": {
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.DATASET_INPUT_SHAPES[dataset_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dense_27": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_31": {
                "units": {
                    "value": "settings.DATASET_N_CLASSES[dataset_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_40": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/models/vgg.py": {
        "tensorflow": {
            "Sequential_12": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_18": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_21": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_23": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_28": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_36": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_43": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_47": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_48": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_51": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_53": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_57": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_59": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_64": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_68": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_74": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_80": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_85": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_89": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_94": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_96": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_97": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_100": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_102": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_107": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Flatten_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_112": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_113": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_117": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_118": {
                "units": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_119": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_131": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ],
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_132": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_135": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_137": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_138": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_142": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_143": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_147": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_148": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_151": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_153": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_154": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_158": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_159": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_163": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_167": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_169": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_170": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_173": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_175": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_176": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_180": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_181": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_185": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_186": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_189": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_191": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_192": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_195": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_197": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_198": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_202": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_203": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_207": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_212": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_214": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_215": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_218": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_220": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_221": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_225": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_226": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Resizing_229": {
                "height": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "width": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_233": {
                "units": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_234": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_235": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_237": {
                "units": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_239": {
                "rate": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_241": {
                "units": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classes",
                            "Method Argument"
                        ],
                        [
                            "classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_242": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_281": {
                "from_logits": {
                    "value": "from_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "not softmax",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/scripts/ensemble_size_ablation_study.py": {
        "tensorflow": {
            "list_physical_devices_7": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_8": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/evaluate_models.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/evaluate_models_2.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/evaluate_models_ood.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/plot_ensemble_simplex.py": {
        "tensorflow": {
            "load_data_18": {
                "variable": {
                    "value": "((_, _), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "variable": {
                    "value": "test_image_ID",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_image_ID",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_images[ID_index[0], :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(test_image_ID, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "variable": {
                    "value": "test_image_OOD",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_image_OOD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_images[OOD_index[0], :, :, :]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(test_image_OOD, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_32": {
                "variable": {
                    "value": "test_image_ID_uncertain",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_image_ID_uncertain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(test_images[ID_index[0], :, :, :] + test_images[ID_index[1], :, :, :] + test_images[ID_index[5], :, :, :]) / 3",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(test_image_ID_uncertain, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_41": {
                "x": {
                    "value": "ensm_model.predict(test_image_ID)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_42": {
                "x": {
                    "value": "ensm_model.predict(test_image_OOD)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_43": {
                "x": {
                    "value": "ensm_model.predict(test_image_ID_uncertain)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/plot_ensemble_size_ablation_study.py": {
        "tensorflow": {}
    },
    "code/scripts/plot_simplex.py": {
        "tensorflow": {
            "list_physical_devices_6": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_7": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/plot_temperature_ablation_study.py": {
        "tensorflow": {
            "list_physical_devices_9": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_10": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/priornet_toy_data.py": {
        "tensorflow": {
            "argmax_41": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(x_test)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessing.preprocess_toy_dataset(X, Y, 0.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/produce_in_and_out_preds.py": {
        "tensorflow": {
            "list_physical_devices_11": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_12": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/temperature_ablation_study.py": {
        "tensorflow": {
            "list_physical_devices_7": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_8": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_cnn.py": {
        "tensorflow": {
            "list_physical_devices_25": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_32": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_33": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_memory_growth_26": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_end.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_seed_38": {
                "seed": {
                    "value": "3444",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_endd.py": {
        "tensorflow": {
            "list_physical_devices_10": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_ensemble_cnn.py": {
        "tensorflow": {
            "one_hot_51": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_52": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "per_image_standardization_53": {
                "variable": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.cast(train_images, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "per_image_standardization_54": {
                "variable": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "tf.cast(test_images, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_53": {
                "x": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.per_image_standardization(tf.cast(train_images, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_54": {
                "x": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.per_image_standardization(tf.cast(test_images, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_ensemble_vgg.py": {
        "tensorflow": {
            "list_physical_devices_46": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_53": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_54": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_62": {
                "variable": {
                    "value": "data_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorBoard_79": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs/fit/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')",
                            "BinOp"
                        ]
                    ]
                },
                "histogram_freq": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_47": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_ensemble_vgg_3_class.py": {
        "tensorflow": {
            "list_physical_devices_46": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_53": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_54": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "settings.DATASET_N_CLASSES[DATASET_NAME]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_62": {
                "variable": {
                    "value": "data_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorBoard_79": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs/fit/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')",
                            "BinOp"
                        ]
                    ]
                },
                "histogram_freq": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_47": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_pn.py": {
        "tensorflow": {
            "list_physical_devices_11": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_data_26": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_27": {
                "variable": {
                    "value": "((OOD_images, _), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_41": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model.predict(test_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_43": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.squeeze(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.squeeze(test_alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_12": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(model.predict(test_images))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_44": {
                "input": {
                    "value": "test_alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessing.preprocess_cifar_for_priornet(train_images, train_labels, test_images, test_labels, normalization=NORMALIZATION, OOD_images=OOD_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_47": {
                "input_tensor": {
                    "value": "tf.cast(predictions == real, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "predictions == real",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_pn_vgg.py": {
        "tensorflow": {
            "list_physical_devices_13": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_data_24": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_25": {
                "variable": {
                    "value": "((OOD_images, _), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_39": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model.predict(test_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_41": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.squeeze(alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.squeeze(test_alphas)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_14": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(model.predict(test_images))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_42": {
                "input": {
                    "value": "test_alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessing.preprocess_cifar_for_priornet(train_images, train_labels, test_images, test_labels, normalization=NORMALIZATION, OOD_images=OOD_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "tf.cast(predictions == real, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_44": {
                "x": {
                    "value": "predictions == real",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/scripts/train_vgg.py": {
        "tensorflow": {
            "list_physical_devices_26": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_data_30": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_51": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_52": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_labels.reshape((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_55": {
                "variable": {
                    "value": "data_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorBoard_68": {
                "variable": {
                    "value": "tensorboard_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logs/fit/' + datetime.datetime.now().strftime('%Y%m%d-%H%M%S')",
                            "BinOp"
                        ]
                    ]
                },
                "histogram_freq": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_27": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/OneCycleLRPolicy.py": {
        "tensorflow": {}
    },
    "code/utils/callbacks.py": {
        "tensorflow": {}
    },
    "code/utils/classifiers.py": {
        "tensorflow": {
            "softmax_50": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensemble_logits",
                            "variable"
                        ],
                        [
                            "ensemble_logits",
                            "variable"
                        ],
                        [
                            "self.predict_logits(x)",
                            "Call"
                        ],
                        [
                            "self.predict_logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_17": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensemble_logits",
                            "variable"
                        ],
                        [
                            "ensemble_logits",
                            "variable"
                        ],
                        [
                            "self.predict_logits(x)",
                            "Call"
                        ],
                        [
                            "self.predict_logits(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_35": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ensemble_logits",
                            "variable"
                        ],
                        [
                            "ensemble_logits",
                            "variable"
                        ],
                        [
                            "self.predict_logits(x)",
                            "Call"
                        ],
                        [
                            "self.predict_logits(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils/datasets.py": {
        "tensorflow": {
            "load_data_22": {
                "variable": {
                    "value": "((train_images, train_labels), (test_images, test_labels))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_46": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/evaluation.py": {
        "tensorflow": {}
    },
    "code/utils/losses.py": {
        "tensorflow": {
            "cast_25": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "ensemble_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ensemble_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(ensemble_logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(ensemble_logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "ensemble_logits",
                            "Method Argument"
                        ],
                        [
                            "ensemble_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "variable": {
                    "value": "ensemble_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "ensemble_logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_30": {
                "variable": {
                    "value": "PN_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "ensemble_probs_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ensemble_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(ensemble_logits / self.temp, axis=2)",
                            "Call"
                        ],
                        [
                            "softmax(ensemble_logits / self.temp, axis=2)",
                            "Call"
                        ],
                        [
                            "self.tp_scaling * (ensemble_probs - probs_mean) + probs_mean",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-ensemble_probs_mean * log(PN_probs) ** self.temp ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.5",
                            "Method Argument"
                        ],
                        [
                            "2.5",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "ensemble_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ensemble_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(ensemble_logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(ensemble_logits, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "ensemble_logits",
                            "Method Argument"
                        ],
                        [
                            "ensemble_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_59": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp(logits / self.temp)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "ensemble_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "ensemble_logits / self.temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_69": {
                "variable": {
                    "value": "log_ensemble_probs_geo_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log(ensemble_probs + self.smooth_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_100": {
                "variable": {
                    "value": "alpha_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_69": {
                "x": {
                    "value": "ensemble_probs + self.smooth_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "lgamma(alphas + self.smooth_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lgamma_72": {
                "x": {
                    "value": "alphas + self.smooth_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "(alphas - 1.0) * log_ensemble_probs_geo_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_mean(-ensemble_probs_mean * log(PN_probs) ** self.temp ** 2)",
                            "Call"
                        ],
                        [
                            "target_dependent_term + target_independent_term",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "(alpha_pred - alpha_true) * (digamma(alpha_pred + epsilon) - digamma(tf.math.reduce_sum(alpha_pred)))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "ensemble_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(ensemble_logits / self.temp, axis=2)",
                            "Call"
                        ],
                        [
                            "softmax(ensemble_logits / self.temp, axis=2)",
                            "Call"
                        ],
                        [
                            "self.tp_scaling * (ensemble_probs - probs_mean) + probs_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "alpha_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_36": {
                "x": {
                    "value": "PN_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softmax(logits / self.temp, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_103": {
                "x": {
                    "value": "alpha_pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_105": {
                "x": {
                    "value": "alpha_true + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_102": {
                "x": {
                    "value": "tf.math.reduce_sum(alpha_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "alpha_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp(logits_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "digamma_107": {
                "x": {
                    "value": "tf.math.reduce_sum(alpha_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_107": {
                "input_tensor": {
                    "value": "alpha_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp(logits_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils/preprocessing.py": {
        "tensorflow": {
            "ImageDataGenerator_28": {
                "variable": {
                    "value": "augmentator",
                    "type": "variable",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ImageDataGenerator_45": {
                "variable": {
                    "value": "augmentator",
                    "type": "variable",
                    "possible_values": []
                },
                "rotation_range": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "horizontal_flip": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "width_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "height_shift_range": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_199": {
                "variable": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(train_logits), tf.ones([OOD_images.shape[0], train_logits.shape[2]])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_195": {
                "indices": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "ID_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_196": {
                "indices": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(test_labels)",
                            "Call"
                        ],
                        [
                            "test_labels[ID_test_index]",
                            "Subscript"
                        ],
                        [
                            "test_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "ID_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_200": {
                "input": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(train_labels, ID_classes) * 100 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.squeeze(train_logits), tf.ones([OOD_images.shape[0], train_logits.shape[2]])], axis=0)",
                            "Call"
                        ],
                        [
                            "np.array(train_logits)",
                            "Call"
                        ],
                        [
                            "train_logits[indices, :]",
                            "Subscript"
                        ],
                        [
                            "np.squeeze(train_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_201": {
                "shape": {
                    "value": "[OOD_images.shape[0], train_logits.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/saveload.py": {
        "tensorflow": {
            "load_model_49": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(settings.SAVED_MODELS_PATH, 'model_' + name)",
                            "Call"
                        ],
                        [
                            "os.path.join(settings.SAVED_MODELS_PATH, 'model_' + name)",
                            "Call"
                        ]
                    ]
                },
                "compile": {
                    "value": "compile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils/training.py": {
        "tensorflow": {}
    }
}