{
    "examples/classification_modelnet40.py": {
        "sklearn": {
            "accuracy_score_346": {
                "y_true": {
                    "value": "np.concatenate(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(preds)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_370": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_376": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(net.parameters(), lr=config.lr, momentum=0.9, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "config.max_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_426": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.get_conv_block(channels[1] + channels[2] + channels[3] + channels[4], embedding_channel // 4, kernel_size=3, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.get_mlp_block(embedding_channel * 2, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_314": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40H5(phase=phase, transform=CoordinateTransformation(trans=config.translation) if is_train else CoordinateTranslation(config.test_translation), data_root='modelnet40_ply_hdf5_2048')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phase == 'train'",
                            "Compare"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "minkowski_collate_fn if is_minknet else stack_collate_fn",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_357": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(logit, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_357": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_359": {
                "variable": {
                    "value": "log_prb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(logit, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_363": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(logit, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "ME.MinkowskiLinear(in_channel, out_channel, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channel, out_channel, kernel_size=kernel_size, stride=stride, dimension=self.D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_342": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(input)",
                            "Call"
                        ],
                        [
                            "net(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_407": {
                "obj": {
                    "value": "{'state_dict': net.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'curr_iter': i}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_426": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiBroadcast.py": {
        "torch": {
            "cat_248": {
                "variable": {
                    "value": "broadcast_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input.F, broadcast_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiChannelwiseConvolution.py": {
        "torch": {
            "Parameter_137": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(*self.kernel_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "data": {
                    "value": "Tensor(1, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiCommon.py": {
        "torch": {
            "prod_83": {
                "input": {
                    "value": "kernel_size > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiConvolution.py": {
        "torch": {
            "Parameter_278": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Tensor(*kernel_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "data": {
                    "value": "Tensor(1, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_333": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiCoordinateManager.py": {
        "torch": {}
    },
    "MinkowskiEngine/MinkowskiFunctional.py": {
        "torch": {
            "binary_cross_entropy_180": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_184": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "poisson_nll_loss_188": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cross_entropy_192": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "hinge_embedding_loss_196": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "kl_div_200": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "l1_loss_204": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mse_loss_208": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "multilabel_margin_loss_212": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "multilabel_soft_margin_loss_216": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "multi_margin_loss_220": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "nll_loss_224": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_228": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "soft_margin_loss_232": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "threshold_48": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_52": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "hardtanh_56": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_val": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "hardswish_60": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu6_64": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "elu_68": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "selu_72": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "celu_76": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "leaky_relu_80": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "prelu_84": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rrelu_88": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lower": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "glu_92": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gelu_96": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsigmoid_100": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "hardshrink_104": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lambd": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanhshrink_108": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softsign_112": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_116": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmin_120": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softshrink_128": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lambd": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "gumbel_softmax_132": {
                "logits": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tau": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "log_softmax_136": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_140": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "hardsigmoid_148": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "silu_152": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "batch_norm_157": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normalize_161": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "linear_166": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "dropout_171": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "alpha_dropout_175": {
                "input": {
                    "value": "input.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiInterpolation.py": {
        "torch": {}
    },
    "MinkowskiEngine/MinkowskiKernelGenerator.py": {
        "torch": {
            "prod_55": {
                "variable": {
                    "value": "kernel_volume",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.IntTensor(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "torch.IntTensor(kernel_size) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiNetwork.py": {
        "torch": {}
    },
    "MinkowskiEngine/MinkowskiNonlinearity.py": {
        "torch": {
            "Parameter_180": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(in_channel, out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_181": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_182": {
                "variable": {
                    "value": "self.coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_180": {
                "*size": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_181": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_182": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_186": {
                "input": {
                    "value": "input.F.mm(self.kernel) + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiNormalization.py": {
        "torch": {
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_114": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "process_group": {
                    "value": "process_group",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_374": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_375": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_318": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_319": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_374": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiOps.py": {
        "torch": {
            "from_numpy_263": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([s.reshape(-1) for s in np.meshgrid(np.linspace(0, B - 1, B), *(np.linspace(0, s - 1, s) for s in size[2:]), indexing='ij')], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_308": {
                "variable": {
                    "value": "reduced_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xs[2:]",
                            "Subscript"
                        ],
                        [
                            "xs[2:]",
                            "Subscript"
                        ],
                        [
                            "xs[2:]",
                            "Subscript"
                        ],
                        [
                            "xs[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_308": {
                "variable": {
                    "value": "reduced_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ch_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "format.find('C')",
                            "Call"
                        ]
                    ]
                }
            },
            "where_309": {
                "variable": {
                    "value": "bcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "reduced_x != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "stack_310": {
                "variable": {
                    "value": "stacked_bcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bcoords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.where(reduced_x != 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(stacked_bcoords), x.size(ch_dim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiPooling.py": {
        "torch": {}
    },
    "MinkowskiEngine/MinkowskiPruning.py": {
        "torch": {}
    },
    "MinkowskiEngine/MinkowskiSparseTensor.py": {
        "torch": {
            "cat_443": {
                "variable": {
                    "value": "new_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_indices, coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "variable": {
                    "value": "dense_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size([shape[0], self._F.size(1), *[s for s in shape[2:]]])",
                            "Call"
                        ],
                        [
                            "torch.Size([batch_indices.max() + 1, nchannels, *size.cpu().numpy()])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_667": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.F[inv_map], X.F)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_300": {
                "variable": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coordinates.to(device)",
                            "Call"
                        ],
                        [
                            "torch.floor(coordinates).int()",
                            "Call"
                        ],
                        [
                            "coordinates[self.unique_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_310": {
                "variable": {
                    "value": "self.inverse_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "len(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_321": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(features)",
                            "Call"
                        ],
                        [
                            "len(features)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_326": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(features)",
                            "Call"
                        ],
                        [
                            "len(features)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_332": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(features)",
                            "Call"
                        ],
                        [
                            "len(features)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size([shape[0], self._F.size(1), *[s for s in shape[2:]]])",
                            "Call"
                        ],
                        [
                            "torch.Size([batch_indices.max() + 1, nchannels, *size.cpu().numpy()])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_502": {
                "*size": {
                    "value": "self._D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_515": {
                "input": {
                    "value": "min_coordinate >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiTensor.py": {
        "torch": {
            "zeros_531": {
                "variable": {
                    "value": "out_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_out, self._F.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiTensorField.py": {
        "torch": {
            "floor_70": {
                "input": {
                    "value": "coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.floor(coordinates).int().unsqueeze(1) + region_offset.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "coordinates.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_322": {
                "variable": {
                    "value": "self._inverse_mapping[coordinate_map_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self._F)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_336": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_341": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._F.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._F.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_348": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_361": {
                "variable": {
                    "value": "in_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ],
                        [
                            "len(self._F)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inverse_mapping.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inverse_mapping.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/MinkowskiUnion.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "out_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(coordinate_manager.size(out_coords_key), in_feats[0].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_feats[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "in_feats[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "grad_in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(coordinate_manager.size(in_coords_key), num_ch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/__init__.py": {
        "torch": {}
    },
    "MinkowskiEngine/diagnostics.py": {
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/modules/resnet_block.py": {
        "torch": {}
    },
    "MinkowskiEngine/modules/senet_block.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/sparse_matrix_functions.py": {
        "torch": {
            "stack_62": {
                "variable": {
                    "value": "COO",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rows, cols)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_104": {
                "variable": {
                    "value": "(rows, sort_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rows.int()",
                            "Call"
                        ],
                        [
                            "rows.int()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_106": {
                "variable": {
                    "value": "COO",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rows, cols)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_108": {
                "variable": {
                    "value": "(_, inverse_ind, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rows.int()",
                            "Call"
                        ],
                        [
                            "rows.int()",
                            "Call"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/utils/collation.py": {
        "torch": {
            "zeros_71": {
                "variable": {
                    "value": "bcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, D + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "MethodArgument"
                        ],
                        [
                            "torch.int32",
                            "MethodArgument"
                        ],
                        [
                            "torch.int32",
                            "MethodArgument"
                        ],
                        [
                            "torch.int32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coords[0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "coords[0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "bcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, D + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "MethodArgument"
                        ],
                        [
                            "torch.int32",
                            "MethodArgument"
                        ],
                        [
                            "torch.int32",
                            "MethodArgument"
                        ],
                        [
                            "torch.int32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coords[0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "coords[0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "feats_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(feats_batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(coord)",
                            "Call"
                        ],
                        [
                            "coord.floor()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_185": {
                "variable": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(labels_batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(cs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.floor(cs))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cs)",
                            "Call"
                        ],
                        [
                            "cs.int()",
                            "Call"
                        ],
                        [
                            "cs.floor()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels[batch_id]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MinkowskiEngine/utils/coords.py": {
        "torch": {}
    },
    "MinkowskiEngine/utils/gradcheck.py": {
        "torch": {}
    },
    "MinkowskiEngine/utils/init.py": {
        "torch": {
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MinkowskiEngine/utils/quantization.py": {
        "torch": {
            "floor_133": {
                "input": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_250": {
                "variable": {
                    "value": "quantization_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_310": {
                "ndarray": {
                    "value": "discrete_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_auto_floor(coordinates)",
                            "Call"
                        ],
                        [
                            "discrete_coordinates.astype(np.int32)",
                            "Call"
                        ],
                        [
                            "discrete_coordinates.int()",
                            "Call"
                        ],
                        [
                            "_auto_floor(coordinates)",
                            "Call"
                        ],
                        [
                            "_auto_floor(coordinates / quantization_size)",
                            "Call"
                        ],
                        [
                            "_auto_floor(coordinates / quantization_size)",
                            "Call"
                        ],
                        [
                            "discrete_coordinates.to(device) if isinstance(discrete_coordinates, torch.Tensor) else torch.from_numpy(discrete_coordinates).to(device)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "MinkowskiEngine/utils/summary.py": {
        "torch": {}
    },
    "examples/common.py": {
        "torch": {
            "manual_seed_97": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_99": {
                "seed": {
                    "value": "random_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_79": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ],
                        [
                            "torch.randperm(perm)",
                            "Call"
                        ],
                        [
                            "torch.arange(perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_81": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ],
                        [
                            "torch.randperm(perm)",
                            "Call"
                        ],
                        [
                            "torch.arange(perm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/completion.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(phase, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_517": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_523": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(net.parameters(), lr=config.lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_525": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_591": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_639": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.enc_block_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(1, enc_ch[0], kernel_size=3, stride=1, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.enc_block_s1s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(enc_ch[0], enc_ch[1], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.enc_block_s2s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(enc_ch[1], enc_ch[2], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.enc_block_s4s8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(enc_ch[2], enc_ch[3], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.enc_block_s8s16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(enc_ch[3], enc_ch[4], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "self.enc_block_s16s32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(enc_ch[4], enc_ch[5], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.enc_block_s32s64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(enc_ch[5], enc_ch[6], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.dec_block_s64s32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(enc_ch[6], dec_ch[5], kernel_size=4, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "variable": {
                    "value": "self.dec_block_s32s16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(enc_ch[5], dec_ch[4], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "variable": {
                    "value": "self.dec_block_s16s8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(dec_ch[4], dec_ch[3], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_297": {
                "variable": {
                    "value": "self.dec_block_s8s4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(dec_ch[3], dec_ch[2], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_316": {
                "variable": {
                    "value": "self.dec_block_s4s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(dec_ch[2], dec_ch[1], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_335": {
                "variable": {
                    "value": "self.dec_block_s2s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(dec_ch[1], dec_ch[0], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_539": {
                "variable": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data_dict['coords']), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_595": {
                "variable": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(data_dict['coords']), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_667": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_573": {
                "obj": {
                    "value": "{'state_dict': net.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'curr_iter': i}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/convolution.py": {
        "torch": {
            "rand_34": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dimension + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_74": {
                "*size": {
                    "value": "len(strided_coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_101": {
                "*size": {
                    "value": "len(strided_coords4)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example.py": {
        "torch": {
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channels=in_feat, out_channels=64, kernel_size=3, stride=2, dilation=1, bias=False, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_91": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/indoor.py": {
        "torch": {
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not config.use_cpu) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array([SCANNET_COLOR_MAP[VALID_CLASS_IDS[l]] for l in pred])",
                            "Call"
                        ],
                        [
                            "np.array(pcd.colors)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/minkunet.py": {
        "torch": {
            "CrossEntropyLoss_251": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_256": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_259": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_281": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_282": {
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/multigpu.py": {
        "torch": {
            "zeros_66": {
                "variable": {
                    "value": "random_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_86": {
                "variable": {
                    "value": "num_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_109": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_134": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel.parallel_apply(criterions, tuple(zip(out_features, all_labels)), devices=devices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_120": {
                "type": {
                    "value": "devices[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/multigpu_ddp.py": {
        "torch": {
            "zeros_54": {
                "variable": {
                    "value": "random_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_62": {
                "variable": {
                    "value": "num_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_91": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MinkUNet34C(3, 20, D=3)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_device_89": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "random_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(feats))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "time() - st",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/multigpu_lightning.py": {
        "torch": {
            "Sequential_81": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channels, 32, 3, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "random_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_149": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "dataset": {
                    "value": "DummyDataset('train', voxel_size=self.voxel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "minkowski_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "dataset": {
                    "value": "DummyDataset('val', voxel_size=self.voxel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "minkowski_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SGD_185": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/pointnet.py": {
        "torch": {
            "DataLoader_253": {
                "variable": {
                    "value": "pointnet_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40H5(phase='train', data_root='modelnet40_ply_hdf5_2048')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "stack_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_258": {
                "variable": {
                    "value": "minknet_data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40H5(phase='train', data_root='modelnet40_ply_hdf5_2048')",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "minkowski_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_75": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_76": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_79": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embedding_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_82": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_83": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "embedding_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(3, 64, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(64, 64, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(64, 64, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(64, 128, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(128, embedding_channel, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiLinear(embedding_channel, 512, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data[i]",
                            "Subscript"
                        ],
                        [
                            "xyz[:self.num_points]",
                            "Subscript"
                        ],
                        [
                            "self.transform(xyz)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(xyz)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.label[i]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "[d['coordinates'] for d in list_data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_61": {
                "tensors": {
                    "value": "[d['features'] for d in list_data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[d['label'] for d in list_data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/reconstruction.py": {
        "torch": {
            "DataLoader_276": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(phase, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_547": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_553": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(net.parameters(), lr=config.lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_555": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_625": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_679": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(in_nchannel, ch[0], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[1], ch[2], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[2], ch[3], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_378": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[3], ch[4], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_394": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[4], ch[5], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[5], ch[6], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_430": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_568": {
                "variable": {
                    "value": "init_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.batch_size, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_569": {
                "variable": {
                    "value": "init_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "variable": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.batch_size, in_nchannel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_630": {
                "variable": {
                    "value": "init_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.batch_size, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_631": {
                "variable": {
                    "value": "init_coords[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_633": {
                "variable": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(config.batch_size, in_nchannel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_707": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_66": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(self.data_source)",
                            "Call"
                        ],
                        [
                            "torch.randperm(perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "ndarray": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_606": {
                "obj": {
                    "value": "{'state_dict': net.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'curr_iter': i}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_679": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_572": {
                "start": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_634": {
                "start": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/resnet.py": {
        "torch": {
            "CrossEntropyLoss_245": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_250": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SGD_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(coords)",
                            "Call"
                        ],
                        [
                            "np.array(pcd.points)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_262": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(coordinates), 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channels, self.inplanes, kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiDropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.field_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiSinusoidal(in_channels, field_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.field_network2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiSinusoidal(field_ch + in_channels, field_ch2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_267": {
                "variable": {
                    "value": "dummy_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "N_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_281": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, dimension=self.D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_282": {
                "f": {
                    "value": "test.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/sparse_tensor_basic.py": {
        "torch": {}
    },
    "examples/stack_unet.py": {
        "torch": {
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiStackSum(ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=1, dimension=D), nn.Sequential(ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=2, dimension=D), ME.MinkowskiStackSum(nn.Identity(), nn.Sequential(ME.MinkowskiConvolution(channels[1], channels[2], kernel_size=3, stride=2, dimension=D), ME.MinkowskiConvolutionTranspose(channels[2], channels[1], kernel_size=3, stride=1, dimension=D), ME.MinkowskiPoolingTranspose(kernel_size=2, stride=2, dimension=D))), ME.MinkowskiPoolingTranspose(kernel_size=2, stride=2, dimension=D)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_nchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[1], channels[2], kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/training.py": {
        "torch": {
            "from_numpy_157": {
                "variable": {
                    "value": "feats_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(feats, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_158": {
                "variable": {
                    "value": "labels_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_170": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_176": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomLineDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "ME.utils.batch_sparse_collate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/unet.py": {
        "torch": {
            "device_115": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channels=in_nchannel, out_channels=8, kernel_size=3, stride=1, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channels=8, out_channels=16, kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(in_channels=16, out_channels=32, kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.block3_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolutionTranspose(in_channels=32, out_channels=16, kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.block2_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolutionTranspose(in_channels=32, out_channels=16, kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/vae.py": {
        "torch": {
            "DataLoader_181": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Dataset(phase, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_576": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_582": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(net.parameters(), lr=config.lr, momentum=config.momentum, weight_decay=config.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_584": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_656": {
                "variable": {
                    "value": "crit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_705": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(1, ch[0], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(ch[0], ch[1], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_244": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(ch[1], ch[2], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(ch[2], ch[3], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(ch[3], ch[4], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(ch[4], ch[5], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.block7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(ch[5], ch[6], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[0], ch[0], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_354": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[1], ch[2], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_370": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[2], ch[3], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[3], ch[4], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[4], ch[5], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiGenerativeConvolutionTranspose(ch[5], ch[6], kernel_size=2, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_439": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_588": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_732": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_623": {
                "input": {
                    "value": "torch.mean(1 + log_vars.F - means.F.pow(2) - log_vars.F.exp(), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_638": {
                "obj": {
                    "value": "{'state_dict': net.state_dict(), 'optimizer': optimizer.state_dict(), 'scheduler': scheduler.state_dict(), 'curr_iter': i}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "config.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_662": {
                "*size": {
                    "value": "len(data_dict['coords'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_678": {
                "input": {
                    "value": "torch.sum(1 + log_vars.F - means.F.pow(2) - log_vars.F.exp(), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_745": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_607": {
                "*size": {
                    "value": "len(data_dict['coords'])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_624": {
                "input": {
                    "value": "1 + log_vars.F - means.F.pow(2) - log_vars.F.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_679": {
                "input": {
                    "value": "1 + log_vars.F - means.F.pow(2) - log_vars.F.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_570": {
                "input": {
                    "value": "0.5 * log_vars.F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_570": {
                "input": {
                    "value": "log_vars.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/convolution_cpu.py": {
        "torch": {
            "from_numpy_26": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/convolution_cpu_test.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_26": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_46": {
                "variable": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_56": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_like_71": {
                "variable": {
                    "value": "out_feat_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_C.ConvolutionForwardCPU(in_features, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor(), in_key, out_key, manager)",
                            "Call"
                        ],
                        [
                            "_C.ConvolutionForwardCPU(in_features, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor(), in_key, out_key, manager)",
                            "Call"
                        ],
                        [
                            "_C.ConvolutionForwardCPU(ucolors, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor(), in_key, out_key, manager)",
                            "Call"
                        ],
                        [
                            "_C.ConvolutionForwardCPU(in_feats, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor(), in_key, out_key, manager)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_94": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "27",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "tcolors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "bcolors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tcolors for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "rand_143": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.prod(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_161": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "manager.size(in_key)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/cpp/convolution_gpu_test.py": {
        "torch": {
            "rand_16": {
                "variable": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_26": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_46": {
                "variable": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_56": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_like_71": {
                "variable": {
                    "value": "out_feat_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_C.ConvolutionForwardGPU(in_features, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor().to(0), in_key, out_key, manager)",
                            "Call"
                        ],
                        [
                            "_C.ConvolutionForwardGPU(in_features, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor().to(0), in_key, out_key, manager)",
                            "Call"
                        ],
                        [
                            "_C.ConvolutionForwardGPU(in_feats, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor(), in_key, out_key, manager)",
                            "Call"
                        ],
                        [
                            "_C.ConvolutionForwardGPU(in_feats, kernel, kernel_size, kernel_stride, kernel_dilation, _C.RegionType.HYPER_CUBE, torch.IntTensor(), in_key, out_key, manager)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_96": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.prod(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_144": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "np.prod(kernel_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "OC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[16, 32, 64, 128, 256]",
                            "List"
                        ]
                    ]
                }
            },
            "rand_112": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "manager.size(in_key)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_162": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "manager.size(in_key)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 32, 64, 128]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/cpp/coordinate_map_cpu_test.py": {
        "torch": {
            "all_25": {
                "input": {
                    "value": "coordinates == coordinates[mapping][inverse_mapping]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/coordinate_map_gpu_test.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_31": {
                "input": {
                    "value": "coordinates[mapping.long()][inverse_mapping.long()] == coordinates",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/coordinate_map_key_test.py": {
        "torch": {}
    },
    "tests/cpp/coordinate_map_manager_cpu_test.py": {
        "torch": {
            "all_12": {
                "input": {
                    "value": "coordinates[unique_map.long()][inverse_map.long()] == coordinates",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_32": {
                "input": {
                    "value": "coordinates[unique_map.long()][inverse_map.long()] == coordinates",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/coordinate_map_manager_gpu_test.py": {
        "torch": {
            "all_12": {
                "input": {
                    "value": "coordinates[unique_map.long()][inverse_map.long()] == coordinates",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_47": {
                "input": {
                    "value": "coordinates[unique_map.long()][inverse_map.long()] == coordinates",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/coordinate_test.py": {
        "torch": {}
    },
    "tests/cpp/kernel_region_cpu_test.py": {
        "torch": {
            "prod_111": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([1, 1])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_29": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([1, 1])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_51": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([1, 1])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_69": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([1, 1])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/cpp/kernel_region_gpu_test.py": {
        "torch": {
            "from_numpy_96": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_73": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_87": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_91": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_20": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "prod_43": {
                "input": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 2, 2])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ],
                        [
                            "torch.IntTensor([3, 3, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/cpp/setup.py": {
        "torch": {}
    },
    "tests/cpp/type_test.py": {
        "torch": {}
    },
    "tests/cpp/utils.py": {
        "torch": {
            "zeros_90": {
                "variable": {
                    "value": "bcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, D + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.int32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coords[0].device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(cs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.floor(cs))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(cs)",
                            "Call"
                        ],
                        [
                            "cs.int()",
                            "Call"
                        ],
                        [
                            "cs.floor()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/python/broadcast.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "prod_74": {
                "input": {
                    "value": "gpu_add.F.cpu() - cpu_add.F < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "prod_75": {
                "input": {
                    "value": "gpu_mul.F.cpu() - cpu_mul.F < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "prod_76": {
                "input": {
                    "value": "gpu_cat.F.cpu() - cpu_cat.F < 1e-05",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/chwise_conv.py": {
        "torch": {
            "rand_37": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dimension + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_79": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/common.py": {
        "torch": {
            "arange_76": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N * nchannel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_77": {
                "*size": {
                    "value": "batch_size if is_classification else N",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/conv_on_coords.py": {
        "torch": {
            "rand_38": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dimension + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "out_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/convolution.py": {
        "torch": {
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_142": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_257": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_307": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_479": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "allclose_192": {
                "input": {
                    "value": "output_gpu.F.var(0).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "output.F.var(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_194": {
                "input": {
                    "value": "output_gpu.F.mean(0).cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "output.F.mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_613": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_619": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(bcoords)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 24, 32, 48, 64, 96, 128]",
                            "List"
                        ],
                        [
                            "[8, 16, 24, 32, 48, 64, 96, 128]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_673": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_679": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(bcoords)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "IC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[3, 8, 16, 24, 32, 48, 64, 96, 128]",
                            "List"
                        ],
                        [
                            "[8, 16, 24, 32, 48, 64, 96, 128]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tests/python/coordinate_manager.py": {
        "torch": {
            "all_46": {
                "input": {
                    "value": "coordinates[unique_map.long()][inverse_map.long()] == coordinates",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_52": {
                "input": {
                    "value": "coordinates == retrieved_coordinates[inverse_map.long()]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/dense.py": {
        "torch": {
            "zeros_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_110": {
                "variable": {
                    "value": "dense_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_116": {
                "variable": {
                    "value": "dense_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_122": {
                "variable": {
                    "value": "dense_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/direct_pool.py": {
        "torch": {
            "randint_38": {
                "variable": {
                    "value": "in_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "out_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_75": {
                "variable": {
                    "value": "in_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_76": {
                "variable": {
                    "value": "out_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(10,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/global.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_87": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "feats",
                            "Name"
                        ]
                    ]
                }
            },
            "rand_103": {
                "variable": {
                    "value": "sinput._F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sinput)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "feats",
                            "Name"
                        ]
                    ]
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/interpolation.py": {
        "torch": {
            "Tensor_46": {
                "variable": {
                    "value": "tfield",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_136": {
                "variable": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-10",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(32, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_138": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randint(-10, 10, size=(32, 4), dtype=torch.float32, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "tfield",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_168": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "interp(x, samples)",
                            "Call"
                        ],
                        [
                            "interp(x, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "backward_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_155": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "interp(x, samples)",
                            "Call"
                        ],
                        [
                            "interp(x, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "backward_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/kernel_map.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/network_speed.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pcd.points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pcd.colors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_74": {
                "variable": {
                    "value": "quantized_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_131": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not config.use_cpu) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "bfeats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feats for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/norm.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/pool.py": {
        "torch": {
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_328": {
                "type": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_485": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_557": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/pruning.py": {
        "torch": {
            "device_141": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_75": {
                "*size": {
                    "value": "feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_117": {
                "*size": {
                    "value": "feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_205": {
                "*size": {
                    "value": "len(out1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_210": {
                "*size": {
                    "value": "len(out2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_203": {
                "input": {
                    "value": "torch.abs(out1.F) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "prod_209": {
                "input": {
                    "value": "torch.abs(out2.F) > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_146": {
                "*size": {
                    "value": "feats.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_203": {
                "input": {
                    "value": "out1.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_209": {
                "input": {
                    "value": "out2.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/quantization.py": {
        "torch": {
            "from_numpy_76": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.rand(N, 3) * 100",
                            "BinOp"
                        ],
                        [
                            "np.random.rand(N, 3) * 100",
                            "BinOp"
                        ],
                        [
                            "(np.random.rand(N, 3) * 100).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(coords)",
                            "Call"
                        ],
                        [
                            "(np.random.rand(N, 3) * 100).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "np.array([[0, 0], [0, 0], [0, 0], [0, 1]], dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "torch.randn((1000, 3), dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_116": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1000, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1000, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/sparse_tensor.py": {
        "torch": {
            "t_192": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_220": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_235": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_271": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[colors for b in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_277": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[colors for b in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_298": {
                "*size": {
                    "value": "feats.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_300": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_313": {
                "input": {
                    "value": "A.F.grad == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_314": {
                "input": {
                    "value": "B.F.grad == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_323": {
                "*size": {
                    "value": "feats.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/spmm.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_36": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_51": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_55": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_70": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_72": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_98": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_100": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_124": {
                "variable": {
                    "value": "rows",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "cols",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_128": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_139": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/stack.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(bcoords)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_107": {
                "variable": {
                    "value": "dcoords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.floor(coords / voxel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_109": {
                "variable": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(bcoords)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=1, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[1], channels[2], kernel_size=3, stride=2, dimension=3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/strided_conv.py": {
        "torch": {
            "from_numpy_65": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pcd.points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pcd.colors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_68": {
                "variable": {
                    "value": "quantized_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords / voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_86": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_120": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(coordinates)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "k[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_141": {
                "variable": {
                    "value": "sinput._F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sinput)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "k[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/summary.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ME.MinkowskiStackSum(ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=1, dimension=D), nn.Sequential(ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=2, dimension=D), ME.MinkowskiStackSum(nn.Identity(), nn.Sequential(ME.MinkowskiConvolution(channels[1], channels[2], kernel_size=3, stride=2, dimension=D), ME.MinkowskiConvolutionTranspose(channels[2], channels[1], kernel_size=3, stride=1, dimension=D), ME.MinkowskiPoolingTranspose(kernel_size=2, stride=2, dimension=D))), ME.MinkowskiPoolingTranspose(kernel_size=2, stride=2, dimension=D)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_nchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[0], channels[1], kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(pcd.colors)",
                            "Call"
                        ]
                    ]
                }
            },
            "Identity_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "ME.MinkowskiConvolution(channels[1], channels[2], kernel_size=3, stride=2, dimension=D)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/tensor_field.py": {
        "torch": {
            "from_numpy_101": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MinkowskiLinear(3, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MinkowskiLinear(3, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MinkowskiLinear(3, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MinkowskiLinear(3, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MinkowskiToSparseTensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MinkowskiToSparseTensor()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_248": {
                "variable": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/union.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "prod_60": {
                "input": {
                    "value": "input1.F.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_61": {
                "input": {
                    "value": "input2.F.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/python/utility_functions.py": {
        "torch": {
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}