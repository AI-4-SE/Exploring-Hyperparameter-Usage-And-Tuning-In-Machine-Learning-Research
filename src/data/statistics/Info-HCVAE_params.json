{
    "qa-eval/distributed_run.py": {
        "torch": {
            "device_count_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa-eval/main.py": {
        "torch": {
            "tensor_82": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "all_seg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_85": {
                "variable": {
                    "value": "args.dev_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "all_seg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_95": {
                "variable": {
                    "value": "args.test_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(idx) for idx in input_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(idx) for idx in input_mask]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(idx) for idx in segment_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "start_position",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(start_position)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "end_position",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(end_position)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "all_seg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_75": {
                "variable": {
                    "value": "args.pretrain_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa-eval/trainer.py": {
        "torch": {
            "LambdaLR_39": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lambda",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DistributedSampler_97": {
                "variable": {
                    "value": "self.pretrain_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.pretrain_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.dev_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.test_dataset",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "self.pretrain_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.pretrain_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.dev_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.test_dataset",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.pretrain_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "self.dev_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.pretrain_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.dev_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.test_dataset",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "self.test_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.pretrain_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.dev_dataset",
                            "Attribute"
                        ],
                        [
                            "self.args.test_dataset",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_89": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[self.args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_200": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_201": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sign(input_ids), 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(input_ids), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_253": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_86": {
                "device": {
                    "value": "self.args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(input_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_132": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sign(input_ids), 1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.sign(input_ids), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__149": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_200": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids[:, :max_len].clone().cuda(self.args.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "input_ids[:, :max_len].clone().cuda(self.args.gpu, non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_131": {
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids[:, :max_len].clone().cuda(self.args.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "input_ids[:, :max_len].clone().cuda(self.args.gpu, non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "qa-eval/utils.py": {
        "torch": {
            "exp_88": {
                "input": {
                    "value": "-kernel_input",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "vae/eval.py": {
        "torch": {}
    },
    "vae/generate_qa.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CustomDatset(tokenizer, args.data_file, args.max_length)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_41": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "torch.tensor(ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "c_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(c_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "max_c_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sign(c_ids), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_55": {
                "input": {
                    "value": "c_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "c_ids[:, :max_c_len].to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vae/main.py": {
        "torch": {
            "current_device_22": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vae/models.py": {
        "torch": {
            "sign_11": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_12": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sign(ids).float()",
                            "Call"
                        ],
                        [
                            "(1.0 - mask.float()) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(c_mask.unsqueeze(2).float(), c_mask.unsqueeze(1).float())",
                            "Call"
                        ],
                        [
                            "torch.triu(mask) == 0",
                            "Compare"
                        ],
                        [
                            "torch.matmul(c_mask.unsqueeze(2), c_mask.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(q_mask.unsqueeze(2), c_mask.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_18": {
                "variable": {
                    "value": "attn_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "memories.transpose(-1, -2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_20": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, memories.transpose(-1, -2).contiguous())",
                            "Call"
                        ],
                        [
                            "attn_logits + mask",
                            "BinOp"
                        ],
                        [
                            "cal_attn(self.question_linear(q_outputs), c_outputs, mask)",
                            "Call"
                        ],
                        [
                            "attn_logits.view(bq, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "cal_attn(self.question_linear(q_outputs), c_outputs, mask)",
                            "Call"
                        ],
                        [
                            "attn_logits.squeeze(1)",
                            "Call"
                        ],
                        [
                            "cal_attn(self.question_linear(q_outputs), c_outputs, mask)",
                            "Call"
                        ],
                        [
                            "attn_logits.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_21": {
                "variable": {
                    "value": "attn_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(attn_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "memories",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memories",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_36": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_logits + copy_logits",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "logits.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.top_k_top_p_filtering(logits, 2, top_p=0.8)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_61": {
                "variable": {
                    "value": "fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvar1.exp() + torch.pow(mu1 - mu2, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "logvar2.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_109": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_138": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_145": {
                "variable": {
                    "value": "input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.question_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.context_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.zq_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nzqdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nzqdim",
                            "Method Argument"
                        ],
                        [
                            "nzqdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.zq_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nzqdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.za_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nzqdim + 2 * 2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nza * nzadim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_h, q_attned_by_c, c_h, c_attned_by_q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "(zq_mu, zq_logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.zq_linear(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.nzqdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zq, c_a_attned_by_zq, c_a_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_238": {
                "variable": {
                    "value": "za_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "za_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.za_linear(h).view(-1, self.nza, self.nzadim)",
                            "Call"
                        ],
                        [
                            "self.za_linear(h).view(-1, self.nza, self.nzadim)",
                            "Call"
                        ],
                        [
                            "self.za_linear(h).view(-1, self.nza, self.nzadim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_264": {
                "variable": {
                    "value": "self.zq_attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nzqdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nzqdim",
                            "Method Argument"
                        ],
                        [
                            "nzqdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.zq_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nzqdim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.za_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nzqdim + 2 * 2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nza * nzadim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_277": {
                "variable": {
                    "value": "(zq_mu, zq_logvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.zq_linear(c_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.nzqdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zq, c_attned_by_zq, c_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_289": {
                "variable": {
                    "value": "za_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "za_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.za_linear(h).view(-1, self.nza, self.nzadim)",
                            "Call"
                        ],
                        [
                            "self.za_linear(h).view(-1, self.nza, self.nzadim)",
                            "Call"
                        ],
                        [
                            "self.za_linear(h).view(-1, self.nza, self.nzadim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zq, c_attned_by_zq, c_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "variable": {
                    "value": "self.start_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.end_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_332": {
                "variable": {
                    "value": "self.ls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[H, U, H * U, torch.abs(H - U)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_358": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_mask.unsqueeze(2).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c_mask.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_366": {
                "variable": {
                    "value": "start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_positions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score.max(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(start_positions, 1, end_positions.view(-1, 1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "start_positions.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.answer_decoder.generate(a_init_state, c_ids)",
                            "Call"
                        ],
                        [
                            "start_positions",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "end_positions.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_366": {
                "variable": {
                    "value": "start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_370": {
                "variable": {
                    "value": "idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_c_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_ids.size()",
                            "Call"
                        ],
                        [
                            "c_ids.size()",
                            "Call"
                        ],
                        [
                            "c_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "torch.LongTensor(max_c_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_394": {
                "variable": {
                    "value": "self.context_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_395": {
                "variable": {
                    "value": "self.fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_396": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_403": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "c_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c_outputs, c_attned_by_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_441": {
                "variable": {
                    "value": "self.question_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_443": {
                "variable": {
                    "value": "self.concat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * nhidden, 2 * nhidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.logit_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "768",
                            "int"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ntokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tokenizer.vocab)",
                            "Call"
                        ],
                        [
                            "ntokens",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bilinear_454": {
                "variable": {
                    "value": "self.discriminator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "768",
                            "int"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "nhidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ],
                        [
                            "nhidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_465": {
                "variable": {
                    "value": "idxes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_484": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "c_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_490": {
                "variable": {
                    "value": "q_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_outputs, c_attned_by_q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "variable": {
                    "value": "copy_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size * max_q_len",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.ntokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "fake_a_mean_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a_mean_emb[-1].unsqueeze(0), a_mean_emb[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "fake_q_mean_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_mean_emb[-1].unsqueeze(0), q_mean_emb[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_520": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_522": {
                "variable": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "true_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(q_mean_emb, a_mean_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_526": {
                "variable": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fake_a_logits, fake_q_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_527": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([fake_a_logits, fake_q_logits], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_541": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_543": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids.long() * q_mask.long()",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs, num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "self.question_decoder.generate(q_init_state, c_ids, a_ids)",
                            "Call"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_544": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids.long() * q_mask.long()",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs, num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "self.question_decoder.generate(q_init_state, c_ids, a_ids)",
                            "Call"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_584": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_595": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_597": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids.long() * q_mask.long()",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs, num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "self.question_decoder.generate(q_init_state, c_ids, a_ids)",
                            "Call"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_598": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids.long() * q_mask.long()",
                            "BinOp"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.argmax(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([self.sos_id] * batch_size).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_ids.to(c_ids.device)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(probs, num_samples=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(all_q_ids, 1)",
                            "Call"
                        ],
                        [
                            "self.postprocess(q_ids)",
                            "Call"
                        ],
                        [
                            "self.question_decoder.generate(q_init_state, c_ids, a_ids)",
                            "Call"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ],
                        [
                            "q_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_638": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_704": {
                "variable": {
                    "value": "self.q_h_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nzqdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nzqdim",
                            "Method Argument"
                        ],
                        [
                            "nzqdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dec_q_nlayers * dec_q_nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_705": {
                "variable": {
                    "value": "self.q_c_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nzqdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nzqdim",
                            "Method Argument"
                        ],
                        [
                            "nzqdim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dec_q_nlayers * dec_q_nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_706": {
                "variable": {
                    "value": "self.a_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nza * nzadim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "768",
                            "int"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ],
                        [
                            "emsize",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_708": {
                "variable": {
                    "value": "self.q_rec_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.vocab['[PAD]']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_753": {
                "variable": {
                    "value": "a_rec_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "max_c_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_ids.size()",
                            "Call"
                        ],
                        [
                            "c_ids.size()",
                            "Call"
                        ],
                        [
                            "c_ids.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_81": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ],
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_106": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_563": {
                "variable": {
                    "value": "q_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_outputs, c_attned_by_q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "variable": {
                    "value": "copy_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_ids.size()",
                            "Call"
                        ],
                        [
                            "q_ids.size()",
                            "Call"
                        ],
                        [
                            "q_ids.size()",
                            "Call"
                        ],
                        [
                            "c_ids.size(0)",
                            "Call"
                        ],
                        [
                            "c_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.ntokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_579": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_logits + copy_logits",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "logits.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.top_k_top_p_filtering(logits, 2, top_p=0.8)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_617": {
                "variable": {
                    "value": "q_concated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_outputs, c_attned_by_q]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_624": {
                "variable": {
                    "value": "copy_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_ids.size()",
                            "Call"
                        ],
                        [
                            "q_ids.size()",
                            "Call"
                        ],
                        [
                            "q_ids.size()",
                            "Call"
                        ],
                        [
                            "c_ids.size(0)",
                            "Call"
                        ],
                        [
                            "c_ids.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.ntokens",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_632": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_logits + copy_logits",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "logits.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.top_k_top_p_filtering(logits, 2, top_p=0.8)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_633": {
                "variable": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_60": {
                "input": {
                    "value": "mu1 - mu2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "input": {
                    "value": "logvar2 - logvar1 + fraction - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_151": {
                "sequence": {
                    "value": "output_packed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(input_packed, state)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_360": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sign(ids).float()",
                            "Call"
                        ],
                        [
                            "(1.0 - mask.float()) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "q_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(c_mask.unsqueeze(2).float(), c_mask.unsqueeze(1).float())",
                            "Call"
                        ],
                        [
                            "torch.triu(mask) == 0",
                            "Compare"
                        ],
                        [
                            "torch.matmul(c_mask.unsqueeze(2), c_mask.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(q_mask.unsqueeze(2), c_mask.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "c_mask.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_443": {
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_444": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_445": {
                "in_features": {
                    "value": "2 * nhidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * emsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "data": {
                    "value": "q_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_mask_lengths(q_ids)",
                            "Call"
                        ],
                        [
                            "np.argmax(eos_mask, axis=1) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(q_lengths).to(q_ids.device).long() + no_eos_idx_sum",
                            "BinOp"
                        ],
                        [
                            "return_mask_lengths(q_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_511": {
                "input": {
                    "value": "a_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_outputs * a_ids.float().unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_516": {
                "input": {
                    "value": "q_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_maxouted * q_mask.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_226": {
                "input": {
                    "value": "zq_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(self.zq_linear(h), self.nzqdim, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(self.zq_linear(c_h), self.nzqdim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_226": {
                "input": {
                    "value": "0.5 * zq_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_278": {
                "input": {
                    "value": "zq_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(self.zq_linear(h), self.nzqdim, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.split(self.zq_linear(c_h), self.nzqdim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_278": {
                "input": {
                    "value": "0.5 * zq_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_340": {
                "input": {
                    "value": "H - U",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_like_28": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_logits + copy_logits",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "gen_logits + copy_logits.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "logits.squeeze(1)",
                            "Call"
                        ],
                        [
                            "self.top_k_top_p_filtering(logits, 2, top_p=0.8)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "vae/trainer.py": {
        "torch": {
            "Adam_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, self.vae.parameters())",
                            "Call"
                        ],
                        [
                            "{'state_dict': self.vae.state_dict(), 'args': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_72": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, self.vae.parameters())",
                            "Call"
                        ],
                        [
                            "{'state_dict': self.vae.state_dict(), 'args': self.args}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vae/translate.py": {
        "torch": {
            "sign_15": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_16": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sign(ids).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_input_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "post_process(batch_q_ids, batch_start, batch_end, c_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "all_seg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_seg_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_seg_ids, dim=0)",
                            "Call"
                        ],
                        [
                            "post_process(batch_q_ids, batch_start, batch_end, c_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "all_c_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.c_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_93": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_c_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_c_ids)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "pads",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_max_len - q_length - c_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "q_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, c, pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids[i, :q_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_49": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_ids[i, :c_length]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_50": {
                "variable": {
                    "value": "seg_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zeros, ones, pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "max_c_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_mask_lengths(c_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vae/utils.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "all_c_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.c_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "all_q_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.q_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "all_tag_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.tag_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.noq_start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.noq_end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_28": {
                "variable": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_c_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_c_ids, all_q_ids, all_a_ids, all_start_positions, all_end_positions)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle",
                            "Method Argument"
                        ],
                        [
                            "shuffle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "all_c_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.c_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_45": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_c_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(all_c_ids)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shuffle",
                            "Method Argument"
                        ],
                        [
                            "shuffle",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "c_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(c_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_55": {
                "variable": {
                    "value": "max_c_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sign(c_ids), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_59": {
                "variable": {
                    "value": "q_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(q_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_60": {
                "variable": {
                    "value": "max_q_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.sign(q_ids), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_54": {
                "input": {
                    "value": "c_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_ids[:, :max_c_len]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sign_59": {
                "input": {
                    "value": "q_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_ids[:, :max_q_len]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}