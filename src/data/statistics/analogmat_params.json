{
    "analogmat/ML/classification.py": {
        "sklearn": {
            "StandardScaler_79": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_195": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pd.concat([perovskite_sample, non_perovskite_sample], ignore_index=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_val_predict_220": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=10)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=2, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=10)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "confusion_matrix_221": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(df_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=10)",
                            "Call"
                        ],
                        [
                            "clf.predict(hypo_df)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_280": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pd.concat([perovskite_sample, non_perovskite_sample], ignore_index=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StratifiedKFold_293": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_294": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_315": {
                "variable": {
                    "value": "mean_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0, 1, 100)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mean_tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean(tprs, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_92": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pd.concat([perovskite_sample, non_perovskite_sample], ignore_index=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_98": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(no_iterations)",
                            "Call"
                        ],
                        [
                            "range(no_iterations)",
                            "Call"
                        ],
                        [
                            "range(no_iterations)",
                            "Call"
                        ],
                        [
                            "range(cm.shape[0])",
                            "Call"
                        ],
                        [
                            "tqdm(range(no_iterations))",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_val_score_116": {
                "variable": {
                    "value": "cv_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=10)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=2, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=10)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['is_perovskite'], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_133": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pd.concat([perovskite_sample, non_perovskite_sample], ignore_index=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GridSearchCV_138": {
                "variable": {
                    "value": "gridcv",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "GradientBoostingClassifier(random_state=10)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'learning_rate': [0.05, 0.08, 0.09, 0.1, 0.11, 0.12, 0.15], 'n_estimators': [100, 250, 400, 500, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "iid": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_139": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(no_iterations)",
                            "Call"
                        ],
                        [
                            "range(no_iterations)",
                            "Call"
                        ],
                        [
                            "range(no_iterations)",
                            "Call"
                        ],
                        [
                            "range(cm.shape[0])",
                            "Call"
                        ],
                        [
                            "tqdm(range(no_iterations))",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_157": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pd.concat([perovskite_sample, non_perovskite_sample], ignore_index=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_161": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_201": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "plot_roc_curve_303": {
                "variable": {
                    "value": "viz",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=250, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "y[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'ROC fold {}'.format(i + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "lw": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ax": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shuffle_384": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "pd.concat([perovskite_sample, non_perovskite_sample], ignore_index=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_389": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_100": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_203": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_102": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_205": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_104": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_138": {
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_207": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_210": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_106": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_109": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analogmat/ML/crystal_system_clf.py": {
        "sklearn": {
            "StandardScaler_55": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_69": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeaveOneOut_85": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_score_86": {
                "variable": {
                    "value": "cv_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['HMS_label', 'HMS'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ]
                    ]
                }
            },
            "LeaveOneOut_115": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_predict_116": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['HMS_label', 'HMS'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_117": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(df_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=cv)",
                            "Call"
                        ],
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=cv)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_181": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeaveOneOut_198": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_score_199": {
                "variable": {
                    "value": "cv_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['HMS_label', 'HMS'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_val_predict_203": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=0)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ],
                        [
                            "KNeighborsClassifier(n_neighbors=5)",
                            "Call"
                        ],
                        [
                            "RandomForestClassifier(max_depth=3, random_state=10)",
                            "Call"
                        ],
                        [
                            "DecisionTreeClassifier(random_state=0)",
                            "Call"
                        ],
                        [
                            "svm.SVC()",
                            "Call"
                        ],
                        [
                            "GradientBoostingClassifier(learning_rate=0.1, n_estimators=100, random_state=10)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['CrystalSystemNum', 'CrystalClass'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ],
                        [
                            "df.drop(['HMS_label', 'HMS'], axis=1)",
                            "Call"
                        ],
                        [
                            "self.scaler.fit_transform(df_x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ],
                        [
                            "LeaveOneOut()",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientBoostingClassifier_72": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_102": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_184": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_74": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_104": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_127": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(df_y)",
                            "Call"
                        ],
                        [
                            "np.array(df_y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=cv)",
                            "Call"
                        ],
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=cv)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(['Triclinic', 'Monoclinic', 'Orthorhombic', 'Tetragonal', 'Cubic', 'Trigonal', 'Hexagonal'])",
                            "Call"
                        ],
                        [
                            "np.array(['Triclinic', 'Monoclinic', 'Orthorhombic', 'Tetragonal', 'Cubic', 'Trigonal', 'Hexagonal'])",
                            "Call"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_186": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_205": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(df_y)",
                            "Call"
                        ],
                        [
                            "np.array(df_y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=cv)",
                            "Call"
                        ],
                        [
                            "cross_val_predict(clf, df_x, df_y.values.ravel(), cv=cv)",
                            "Call"
                        ]
                    ]
                },
                "target_names": {
                    "value": "np.array(unique_spgs)",
                    "type": "Call",
                    "possible_values": []
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_76": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_106": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_188": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_78": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_108": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_190": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_80": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_83": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_110": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_113": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_192": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingClassifier_195": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analogmat/ML/property_pred.py": {
        "sklearn": {
            "StandardScaler_70": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_211": {
                "variable": {
                    "value": "bandgap_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(df['Bandgap'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(df['Predicted_Bandgap'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_absolute_error_212": {
                "variable": {
                    "value": "bandgap_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.array(df['Bandgap'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(df['Predicted_Bandgap'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_141": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_y.values.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19
                            ],
                            "Call"
                        ],
                        [
                            "dft_fingerprints",
                            "variable"
                        ],
                        [
                            "yaml.load(row.All_phases)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeaveOneOut_154": {
                "variable": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_val_score_155": {
                "variable": {
                    "value": "cv_results_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeaveOneOut()",
                            "Call"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_squared_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_val_score_156": {
                "variable": {
                    "value": "cv_results_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LeaveOneOut()",
                            "Call"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_absolute_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Pipeline_143": {
                "steps": {
                    "value": "[('Scaler', StandardScaler()), ('DT', DecisionTreeRegressor())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_144": {
                "steps": {
                    "value": "[('Scaler', StandardScaler()), ('SVR', SVR())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_145": {
                "steps": {
                    "value": "[('Scaler', StandardScaler()), ('PLS', PLSRegression())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_146": {
                "steps": {
                    "value": "[('Scaler', StandardScaler()), ('KNN', KNeighborsRegressor())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_147": {
                "steps": {
                    "value": "[('Scaler', StandardScaler()), ('RAND', RandomForestRegressor())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Pipeline_148": {
                "steps": {
                    "value": "[('Scaler', StandardScaler()), ('GBR', GradientBoostingRegressor())]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "StandardScaler_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVR_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PLSRegression_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KNeighborsRegressor_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientBoostingRegressor_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "analogmat/autoencoder.py": {
        "sklearn": {
            "StandardScaler_44": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_47": {
                "variable": {
                    "value": "(self.X_train, self.X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analogmat/plot_df.py": {
        "sklearn": {
            "PCA_113": {
                "variable": {
                    "value": "tsne_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_115": {
                "variable": {
                    "value": "tsne_coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analogmat/validate_fingerprints.py": {
        "sklearn": {
            "classification_report_104": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "target_names": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(['Triclinic', 'Monoclinic', 'Orthorhombic', 'Tetragonal', 'Cubic', 'Trigonal', 'Hexagonal'])",
                            "Call"
                        ],
                        [
                            "np.array(unique_spgs)",
                            "Call"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_163": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "target_names": {
                    "value": "np.array(unique_spgs)",
                    "type": "Call",
                    "possible_values": []
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "analogmat/web_scraper/ask_com_scraper.py": {
        "sklearn": {}
    },
    "analogmat/web_scraper/bing_scraper.py": {
        "sklearn": {}
    }
}