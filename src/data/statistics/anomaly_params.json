{
    "config.py": {
        "tensorflow": {}
    },
    "main.py": {
        "tensorflow": {
            "ConfigProto_22": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_27": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.8))",
                            "Call"
                        ]
                    ]
                }
            },
            "run_functions_eagerly_21": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_session_28": {
                "session": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "VGG16_34": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "img_to_array_35": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(folder + filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "preprocess_input_37": {
                "variable": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessing.image.img_to_array(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_tensor, axis=0)",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_49": {
                "variable": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(pooled_grads, conv_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_model_139": {
                "variable": {
                    "value": "model1",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model.tf",
                    "type": "str",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_47": {
                "variable": {
                    "value": "pooled_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gtape.gradient(loss, conv_output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GPUOptions_23": {
                "per_process_gpu_memory_fraction": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientTape_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_49": {
                "x": {
                    "value": "pooled_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.mean(grads, axis=(0, 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heatmap_model(tf.convert_to_tensor(img_tensor, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_43": {
                "value": {
                    "value": "img_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessing.image.img_to_array(image)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img_tensor, axis=0)",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_tensor)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "Input_24": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(patchSize, patchSize, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "VGG16_49": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_83": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "yPred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_26": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_27": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_28": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_29": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_30": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_31": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "UpSampling2D_34": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "UpSampling2D_36": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_37": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "UpSampling2D_38": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a1 * tf.keras.losses.mean_absolute_error(yy, yp)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a2 * tf.keras.losses.mean_squared_error(y, y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GradientTape_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_absolute_error_62": {
                "y_true": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "yp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_63": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(x, training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}