{
    "adopty/autograd/generation.py": {
        "sklearn": {
            "check_random_state_8": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_random_state(rng)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "adopty/autograd/lista.py": {
        "sklearn": {}
    },
    "adopty/datasets.py": {
        "sklearn": {
            "fetch_openml_200": {
                "variable": {
                    "value": "(digits, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "type": "str",
                    "possible_values": []
                },
                "version": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "adopty/lista.py": {
        "torch": {
            "relu_51": {
                "input": {
                    "value": "z_hat.abs() - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_342": {
                "data": {
                    "value": "check_tensor(p, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_440": {
                "input": {
                    "value": "z_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z0",
                            "variable"
                        ],
                        [
                            "x.matmul(layer_params['Wx'])",
                            "Call"
                        ],
                        [
                            "z_hat.matmul(layer_params['Wz']) + x.matmul(layer_params['Wx'])",
                            "BinOp"
                        ],
                        [
                            "soft_thresholding(z_hat, lmbd * th)",
                            "Call"
                        ],
                        [
                            "x.matmul(W)",
                            "Call"
                        ],
                        [
                            "z_hat - res.matmul(W)",
                            "BinOp"
                        ],
                        [
                            "self.transform(x, lmbd)",
                            "Call"
                        ],
                        [
                            "self.transform(x, lmbd, z0=z_hat)",
                            "Call"
                        ],
                        [
                            "self(x, lmbd, output_layer=n_layer)",
                            "Call"
                        ],
                        [
                            "self(x, lmbd)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adopty/utils/check.py": {
        "torch": {
            "Tensor_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/run_comparison_networks.py": {
        "torch": {
            "empty_cache_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}