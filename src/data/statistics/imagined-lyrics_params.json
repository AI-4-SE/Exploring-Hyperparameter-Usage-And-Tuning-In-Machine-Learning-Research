{
    "utils/audio_utils.py": {
        "sklearn": {
            "shuffle_292": {
                "variable": {
                    "value": "functions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "[random_speed, random_stretch, random_pitch, partial(random_noise, noise_signals=noise_signals)]",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "DataLoader_274": {
                "variable": {
                    "value": "tmp_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tmp_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset([input_file], feature_fn=audio_utils.featurize_mfcc, **subsampling_kwargs)",
                            "Call"
                        ],
                        [
                            "data_loaders.AudioDataset([input_file], feature_fn=audio_utils.featurize_mfcc, label_paths=[label_file], label_fn=dataset_utils.get_timit_phoneme_labels, **subsampling_kwargs)",
                            "Call"
                        ],
                        [
                            "data_loaders.AudioDataset([input_file], feature_and_label_fn=dataset_utils.sample_timit_features_and_labels, label_paths=[label_file], feature_fn=audio_utils.featurize_mfcc, does_subsample=True, **subsampling_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "tmp_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tmp_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset([input_file], feature_fn=audio_utils.featurize_mfcc, **subsampling_kwargs)",
                            "Call"
                        ],
                        [
                            "data_loaders.AudioDataset([input_file], feature_fn=audio_utils.featurize_mfcc, label_paths=[label_file], label_fn=dataset_utils.get_timit_phoneme_labels, **subsampling_kwargs)",
                            "Call"
                        ],
                        [
                            "data_loaders.AudioDataset([input_file], feature_and_label_fn=dataset_utils.sample_timit_features_and_labels, label_paths=[label_file], feature_fn=audio_utils.featurize_mfcc, does_subsample=True, **subsampling_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_18": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_40": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_65": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "output_dim + hid_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim + hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "input_and_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input[:-1].squeeze(0), hidden[:-1].squeeze(0), context[:-1].squeeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_127": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim + hid_dim",
                    "type": null,
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim + hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "input_and_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input[:-1].squeeze(0), hidden[:-1].squeeze(0), context[:-1].squeeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ],
                        [
                            "self.max_label_len",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_284": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_284": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_314": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_371": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(padded_seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_371": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_228": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Categorical_236": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(src)",
                            "Call"
                        ],
                        [
                            "model(src, teacher_forcing_ratio=0)",
                            "Call"
                        ],
                        [
                            "model(src)",
                            "Call"
                        ],
                        [
                            "torch.cat((input[:-1].squeeze(0), hidden[:-1].squeeze(0), context[:-1].squeeze(0)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((input[:-1].squeeze(0), hidden[:-1].squeeze(0), context[:-1].squeeze(0)), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainers/train_libri_speech_audio.py": {
        "torch": {
            "DataLoader_128": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset(train_wavs, feature_and_label_fn=dataset_utils.sample_timit_features_and_labels, label_paths=train_phoneme_files, feature_fn=audio_utils.featurize_mfcc, does_subsample=True, **subsampling_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=max_seq_len, max_label_len=max_label_len, output_vocab=output_vocab, one_hot_labels=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset(test_wavs, feature_and_label_fn=dataset_utils.sample_timit_features_and_labels, label_paths=test_phoneme_files, feature_fn=audio_utils.featurize_mfcc, does_subsample=True, **subsampling_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=max_seq_len, max_label_len=max_label_len, output_vocab=output_vocab, one_hot_labels=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_144": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_175": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/train_libri_speech_txt.py": {
        "torch": {
            "DataLoader_151": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset(train_tg_files, feature_and_label_fn=dataset_utils.sample_textgrid_features_and_labels, label_paths=train_tg_files, feature_fn=lambda x: x, does_subsample=True, **word_to_phoneme_subsampling_args)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=max_seq_len, max_label_len=13, input_vocab=input_vocab, output_vocab=word_output_vocab, one_hot_inputs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset(test_tg_files, feature_and_label_fn=dataset_utils.sample_textgrid_features_and_labels, label_paths=test_tg_files, feature_fn=lambda x: x, does_subsample=True, **word_to_phoneme_subsampling_args)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=max_seq_len, max_label_len=13, input_vocab=input_vocab, output_vocab=word_output_vocab, one_hot_inputs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_163": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_190": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/train_metrolyrics_txt.py": {
        "torch": {
            "DataLoader_129": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.OneFileDataset(metrolyrics_db_file, load_fn=dataset_utils.load_metrolyrics_from_csv, feature_and_label_fn=dataset_utils.sample_metrolyrics_features_and_labels, start_index=0, end_index=200000, **word_to_phoneme_subsampling_args)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=max_seq_len, max_label_len=max_label_len, input_vocab=input_vocab, output_vocab=word_output_vocab, one_hot_inputs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.OneFileDataset(metrolyrics_db_file, load_fn=dataset_utils.load_metrolyrics_from_csv, feature_and_label_fn=dataset_utils.sample_metrolyrics_features_and_labels, start_index=200000, end_index=253962, **word_to_phoneme_subsampling_args)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=max_seq_len, max_label_len=max_label_len, input_vocab=input_vocab, output_vocab=word_output_vocab, one_hot_inputs=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_141": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_168": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "trainers/train_timit.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset(train_wavs, feature_fn=audio_utils.featurize_mfcc, label_paths=train_phoneme_files, label_fn=label_fn, **basic_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=450, max_label_len=max_label_len, output_vocab=output_vocab, one_hot_labels=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_loaders.AudioDataset(test_wavs, feature_fn=audio_utils.featurize_mfcc, label_paths=train_phoneme_files, label_fn=label_fn, **basic_kwargs)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial(audio_utils.pad_sequences_with_labels, sequence_pad_value=0, label_pad_value=text_utils.PAD_SYMBOL, max_seq_len=450, max_label_len=max_label_len, output_vocab=output_vocab, one_hot_labels=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_105": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_134": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_loaders.py": {
        "torch": {}
    },
    "utils/torch_utils.py": {
        "torch": {
            "zeros_35": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_tensor.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n_dims if n_dims is not None else int(torch.max(y_tensor)) + 1",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "embedding_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location=torch.device('cpu'))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "bow_output_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "bow_target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_90": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_state_dict(model, optimizer, model.epoch, model.global_step, model.best_val_loss)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, 'last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "full_179": {
                "variable": {
                    "value": "ctc_input_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(ctc_batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "ctc_input_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_265": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_267": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "ctc_trg_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ctc_trg_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "isinf_202": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_ctc",
                            "Name"
                        ],
                        [
                            "_get_ctc_loss(output, trg, device)",
                            "Call"
                        ],
                        [
                            "c(output, trg)",
                            "Call"
                        ],
                        [
                            "_get_ctc_loss(output, trg, device)",
                            "Call"
                        ],
                        [
                            "c(flat_output, flat_trg)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_228": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_228": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_230": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_284": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__289": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_405": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size or len(filepaths)",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_465": {
                "variable": {
                    "value": "self.generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "weight_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_109": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CTCLoss_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_252": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_421": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_421": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_481": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(seqs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_481": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_34": {
                "input": {
                    "value": "y_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.data if isinstance(y, Variable) else y",
                            "IfExp"
                        ],
                        [
                            "y_tensor.type(torch.LongTensor).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "[int(ctc_input_length / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}