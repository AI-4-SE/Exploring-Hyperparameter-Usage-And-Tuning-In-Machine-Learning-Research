{
    "stochastic.py": {
        "sklearn": {
            "make_spd_matrix_32": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "n_dim": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "make_spd_matrix_34": {
                "variable": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": []
                },
                "n_dim": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "set_default_tensor_type_6": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "C1_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Root_1.astype(np.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "C2_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Root_2.astype(np.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "A.astype(np.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "B.astype(np.double)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_165": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[mean, std]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-L.copy()",
                            "UnaryOp"
                        ],
                        [
                            "P / tau",
                            "BinOp"
                        ],
                        [
                            "A - A.logsumexp(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "A - A.logsumexp(dim=0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_107": {
                "variable": {
                    "value": "(u, sigma, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "C2_tilde @ DS @ C1_tilde",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_163": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_112": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(x) @ yy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_181": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(g1)",
                            "Call"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trace_105": {
                "input": {
                    "value": "torch.transpose(DS, 0, 1) @ y @ DS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logdet_114": {
                "input": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(DS, 0, 1) @ y @ DS",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_111": {
                "input": {
                    "value": "DS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doubly_stochastic(P_noisy, tau, it)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_112": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.double(l1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(A.astype(np.double))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_105": {
                "input": {
                    "value": "DS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doubly_stochastic(P_noisy, tau, it)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}