{
    "src/dataset/dataset.py": {
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EpisodicData(mode_train=True, transform=train_transform, class_list=class_list, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.batch_size / world_size) if args.distributed else args.batch_size",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_data) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EpisodicData(mode_train=False, transform=val_transform, class_list=class_list, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_219": {
                "variable": {
                    "value": "spprt_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "support_image_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "spprt_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "support_label_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_48": {
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EpisodicData(mode_train=True, transform=train_transform, class_list=class_list, args=args)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/dataset/transform.py": {
        "torch": {
            "from_numpy_67": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "back_crop_s_mask",
                            "Name"
                        ],
                        [
                            "cv2.resize(label, None, fx=scale_factor_x, fy=scale_factor_y, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(label, pad_h_half, pad_h - pad_h_half, pad_w_half, pad_w - pad_w_half, cv2.BORDER_CONSTANT, value=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "label[h_off:h_off + self.crop_h, w_off:w_off + self.crop_w]",
                            "Subscript"
                        ],
                        [
                            "cv2.warpAffine(label, matrix, (w, h), flags=cv2.INTER_NEAREST, borderMode=cv2.BORDER_CONSTANT, borderValue=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 1)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "back_crop_s_mask",
                            "Name"
                        ],
                        [
                            "cv2.resize(label, None, fx=scale_factor_x, fy=scale_factor_y, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(label, pad_h_half, pad_h - pad_h_half, pad_w_half, pad_w - pad_w_half, cv2.BORDER_CONSTANT, value=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "label[h_off:h_off + self.crop_h, w_off:w_off + self.crop_w]",
                            "Subscript"
                        ],
                        [
                            "cv2.warpAffine(label, matrix, (w, h), flags=cv2.INTER_NEAREST, borderMode=cv2.BORDER_CONSTANT, borderValue=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 1)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/pspnet.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "layer0",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "layer1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "layer2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "layer3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "layer4",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.bottleneck_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_classes_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fea_dim, self.bottleneck_dim, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_2, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_2, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_164": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.classify(x, (H, W))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_2, x_3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_3)",
                            "Call"
                        ],
                        [
                            "self.ppm(x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_2, x_3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_3)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(bin)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_30": {
                "input": {
                    "value": "f(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x_size[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "fea_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024 + 512",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "Constant"
                        ],
                        [
                            "fea_dim * 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.bottleneck_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "self.bottleneck_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_118": {
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_19": {
                "output_size": {
                    "value": "bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bins",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "reduction_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_114": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_119": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_195": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./initmodel/resnet50_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet101_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet152_v2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_207": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./initmodel/resnet50_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet101_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet152_v2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_220": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./initmodel/resnet50_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet101_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet152_v2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/transformer.py": {
        "torch": {
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_16": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_19": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_qkvs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_21": {
                "variable": {
                    "value": "log_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_24": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.view(v.size()[0], v.size()[1], -1)",
                            "Call"
                        ],
                        [
                            "v.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.w_qkvs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.w_qkvs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_43": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/vgg.py": {
        "torch": {
            "AdaptiveAvgPool2d_30": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_150": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./initmodel/vgg16.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/vgg16_bn.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_164": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./initmodel/vgg16.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/vgg16_bn.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/optimizer.py": {
        "torch": {
            "SGD_12": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_30": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "args.lr_stepsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_31": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "milestones": {
                    "value": "args.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_32": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "batches * args.epochs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "zeros_141": {
                "variable": {
                    "value": "runtimes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_runs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_trans, f'{args.ckpt_used}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_51": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "logits_q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.num_classes_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Constant"
                        ],
                        [
                            "model.module.feature_res[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Constant"
                        ],
                        [
                            "model.module.feature_res[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_244": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_q.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_256": {
                "variable": {
                    "value": "criterion_standard",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "binary_classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.bottleneck_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_classes_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "binary_classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.cls_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_193": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.tensor([1.0, len(back_pix[0]) / len(target_pix[0])]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "args.resume_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_159": {
                "*size": {
                    "value": "args.batch_size_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.image_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.image_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_203": {
                "variable": {
                    "value": "output_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_classifier(f_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output_support, size=s_label.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "s_label.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_215": {
                "variable": {
                    "value": "f_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.extract_features(qry_img)",
                            "Call"
                        ],
                        [
                            "F.normalize(f_q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "Pseudo_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.bottleneck_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_classes_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_231": {
                "variable": {
                    "value": "Pseudo_cls.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "updated_weights_cls.squeeze(0).unsqueeze(2).unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "[1.0, len(back_pix[0]) / len(target_pix[0])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "zeros_216": {
                "variable": {
                    "value": "train_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iter_per_epoch",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "train_Ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iter_per_epoch",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "binary_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.bottleneck_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.num_classes_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_250": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "binary_cls.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.cls_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_257": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.tensor([1.0, len(back_pix[0]) / len(target_pix[0])]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_284": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.tensor([1.0, len(q_back_pix[0]) / (len(q_target_pix[0]) + 1e-12)]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_306": {
                "variable": {
                    "value": "pred_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "updated_weights_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer(weights_cls_reshape, f_q, f_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_q_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_q.view(args.batch_size, args.bottleneck_dim, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_310": {
                "variable": {
                    "value": "pred_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(updated_weights_cls, f_q_reshape).view(args.batch_size, 2, f_q.shape[-2], f_q.shape[-1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(pred_q, size=q_label.shape[1:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "q_label.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_53": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_181": {
                "obj": {
                    "value": "{'epoch': args.epochs, 'state_dict': transformer.state_dict(), 'optimizer': optimizer_transformer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_transformer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(trans_save_dir, 'final.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(trans_save_dir, f'best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_267": {
                "variable": {
                    "value": "output_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_cls(f_s)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output_support, size=s_label.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "s_label.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_292": {
                "variable": {
                    "value": "f_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.extract_features(qry_img)",
                            "Call"
                        ],
                        [
                            "F.normalize(f_q, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "args.resume_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "[1.0, len(back_pix[0]) / len(target_pix[0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "[1.0, len(q_back_pix[0]) / (len(q_target_pix[0]) + 1e-12)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': transformer.state_dict(), 'optimizer': optimizer_transformer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_transformer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(trans_save_dir, 'final.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(trans_save_dir, f'best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "zeros_98": {
                "variable": {
                    "value": "one_hot_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_143": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(n_task * shots, num_classes, h, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "area_intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "area_union",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "area_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histc_189": {
                "variable": {
                    "value": "area_intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds[preds == target]",
                            "Subscript"
                        ]
                    ]
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_190": {
                "variable": {
                    "value": "area_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_191": {
                "variable": {
                    "value": "area_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "bins": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_100": {
                "condition": {
                    "value": "new_mask == 255",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "utils/operations.py": {
        "torch": {
            "matmul_30": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - torch.mean(embedding, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "embedding.permute([0, 2, 3, 1]).reshape([-1, c])",
                            "Call"
                        ],
                        [
                            "torch.matmul(embedding, pc)",
                            "Call"
                        ],
                        [
                            "embedding.reshape([N, h, w, -1]).permute([0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_31": {
                "variable": {
                    "value": "(u, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(embedding.transpose(0, 1), embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - torch.mean(embedding, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "embedding.permute([0, 2, 3, 1]).reshape([-1, c])",
                            "Call"
                        ],
                        [
                            "torch.matmul(embedding, pc)",
                            "Call"
                        ],
                        [
                            "embedding.reshape([N, h, w, -1]).permute([0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_principle_components(embedding, num_components)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "location_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.stack([y_features, x_features], axis=2), 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(location_features).float()",
                            "Call"
                        ],
                        [
                            "location_features.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_337": {
                "variable": {
                    "value": "logits_binary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[other_logits.unsqueeze(1), label_logits.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_29": {
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding - torch.mean(embedding, dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "embedding.permute([0, 2, 3, 1]).reshape([-1, c])",
                            "Call"
                        ],
                        [
                            "torch.matmul(embedding, pc)",
                            "Call"
                        ],
                        [
                            "embedding.reshape([N, h, w, -1]).permute([0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[location_features for _ in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_332": {
                "variable": {
                    "value": "other_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "other_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[logit_k[torch.arange(logit_k.size(0), device=label.device) != label[idx]] for (idx, logit_k) in enumerate(logits_full)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(other_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.max(other_logits, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "logits_full[torch.arange(logits_full.size(0), device=label.device), zeros]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_335": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_13": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_327": {
                "start": {
                    "value": "logits_full.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_333": {
                "input": {
                    "value": "other_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[logit_k[torch.arange(logit_k.size(0), device=label.device) != label[idx]] for (idx, logit_k) in enumerate(logits_full)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(other_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.max(other_logits, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "logits_full[torch.arange(logits_full.size(0), device=label.device), zeros]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_336": {
                "start": {
                    "value": "logits_full.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_330": {
                "start": {
                    "value": "logit_k.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}