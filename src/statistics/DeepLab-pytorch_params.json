{
    "src/dataset/datasets.py": {
        "torch": {
            "DataLoader_292": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "possible_values": [
                        [
                            "VOCDataSet('./data', is_transform=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate.py": {
        "torch": {
            "Upsample_92": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "tile_size",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "possible_values": [
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "image.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Upsample_136": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "tile_size",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_198": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "testloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CSDataSet(args.data_dir, args.data_list, crop_size=(1024, 2048), mean=IMG_MEAN, scale=False, mirror=False)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_210": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1024, 2048)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "ndarray": {
                    "value": "padded_img",
                    "possible_values": [
                        [
                            "np.pad(img, ((0, 0), (0, 0), (0, rows_missing), (0, cols_missing)), 'constant')",
                            "Call"
                        ],
                        [
                            "pad_image(img, tile_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/libs/_ext/__init__.py": {
        "torch": {}
    },
    "src/libs/bn.py": {
        "torch": {
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "device_count_137": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                }
            }
        }
    },
    "src/libs/build.py": {
        "torch": {}
    },
    "src/libs/dense.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.convs1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.convs3",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "inputs + [x]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "inputs + [x]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "OrderedDict([('bn', norm_act(in_channels)), ('conv', nn.Conv2d(in_channels, self.growth * bottleneck_factor, 1, bias=False))])",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "OrderedDict([('bn', norm_act(self.growth * bottleneck_factor)), ('conv', nn.Conv2d(self.growth * bottleneck_factor, self.growth, 3, padding=dilation, bias=False, dilation=dilation))])",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "in_channels + self.growth",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.growth * bottleneck_factor",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "self.growth * bottleneck_factor",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.growth",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/libs/functions.py": {
        "torch": {
            "gather_193": {
                "variable": {
                    "value": "means",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "possible_values": [
                        [
                            "comm.gather(means)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_194": {
                "variable": {
                    "value": "vars",
                    "possible_values": []
                },
                "input": {
                    "value": "vars",
                    "possible_values": [
                        [
                            "comm.gather(vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_coalesced_199": {
                "variable": {
                    "value": "tensors",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean, var)",
                    "possible_values": []
                },
                "devices": {
                    "value": "[mean.get_device()] + ctx.worker_ids",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_274": {
                "variable": {
                    "value": "tensors",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edz, eydz)",
                    "possible_values": []
                },
                "devices": {
                    "value": "[edz.get_device()] + ctx.worker_ids",
                    "possible_values": []
                }
            },
            "reduce_add_271": {
                "inputs": {
                    "value": "edzs",
                    "possible_values": []
                }
            },
            "reduce_add_272": {
                "inputs": {
                    "value": "eydzs",
                    "possible_values": []
                }
            }
        }
    },
    "src/libs/misc.py": {
        "torch": {}
    },
    "src/libs/residual.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.convs",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.proj_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "channels[1]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "src/networks/deeplabv3.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation * multi_grid",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation * multi_grid",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu_inplace",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv4",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.bottleneck",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inner_features * 5, out_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "possible_values": []
                }
            },
            "upsample_91": {
                "variable": {
                    "value": "feat1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu1",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu3",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MaxPool2d_115": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.head",
                    "possible_values": []
                },
                "*args": {
                    "value": "ASPPModule(2048)",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.dsn",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_69": {
                "output_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "features",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inner_features",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "inner_features * 5",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Dropout2d_84": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "1024",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout2d_130": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "load_161": {
                "variable": {
                    "value": "saved_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "possible_values": []
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "trainloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CSDataSet(args.data_dir, args.data_list, max_iters=args.num_steps * args.batch_size, crop_size=input_size, scale=args.random_scale, mirror=args.random_mirror, mean=IMG_MEAN)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SGD_197": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, deeplab.parameters()), 'lr': args.learning_rate}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            },
            "Upsample_201": {
                "variable": {
                    "value": "interp",
                    "possible_values": []
                },
                "size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "(h, w)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "deeplab.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'CS_scenes_' + str(args.num_steps) + '.pth')",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "deeplab.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'CS_scenes_' + str(i_iter) + '.pth')",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/criterion.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "upsample_25": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "upsample_28": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_41": {
                "variable": {
                    "value": "self.criterion2",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "upsample_46": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "upsample_49": {
                "variable": {
                    "value": "scale_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/encoding.py": {
        "torch": {
            "broadcast_coalesced_42": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_51": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "possible_values": []
                }
            },
            "is_grad_enabled_154": {
                "variable": {
                    "value": "grad_enabled",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_add_60": {
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[inputs[i:i + num_inputs] for i in range(0, len(inputs), num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i[0].get_device())",
                            "Call"
                        ],
                        [
                            "[i.data for i in inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs[i:i + ctx.num_inputs] for i in range(0, len(inputs), ctx.num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_158": {
                "mode": {
                    "value": "grad_enabled",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_164": {
                "type": {
                    "value": "device",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/loss.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "new_target",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_label.reshape(target.size())",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "input_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "possible_values": [
                        [
                            "nd.zoom(np_predict, (1.0, 1.0, 1.0 / factor, 1.0 / factor), order=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/utils.py": {
        "torch": {}
    }
}