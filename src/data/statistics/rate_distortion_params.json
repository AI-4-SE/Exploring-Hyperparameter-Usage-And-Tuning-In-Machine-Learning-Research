{
    "rate_distortion/algorithms/ais.py": {
        "torch": {
            "ones_56": {
                "variable": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.grad(U_temp, z, grad_outputs=grad_outputs)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(grad, -self.task_params.num_total_chains * self.hparams.model_train.z_size * 100, self.task_params.num_total_chains * self.hparams.model_train.z_size * 100)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.task_params.num_total_chains * self.hparams.model_train.z_size * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.task_params.num_total_chains * self.hparams.model_train.z_size * 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "accept_hist",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "logw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_203": {
                "variable": {
                    "value": "current_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "current_z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_58": {
                "outputs": {
                    "value": "U_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U(z, batch, t)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(self.task_params.num_total_chains)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "step_sizes_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_sizes_dir + str(current_traj_length) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "hparams.messenger.step_sizes_dir + (data + '_' if data is not None else '')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "var_221": {
                "variable": {
                    "value": "z_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_145": {
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "current_z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "current_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "singleton_repeat(post_z, task_params.n_chains).requires_grad_()",
                            "Call"
                        ],
                        [
                            "start_state[i]",
                            "Subscript"
                        ],
                        [
                            "prior_dist.sample(task_params.num_total_chains)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(current_z).to(hparams.tensor_type).to(hparams.device).requires_grad_()",
                            "Call"
                        ],
                        [
                            "torch.randn(task_params.num_total_chains, hparams.model_train.z_size).requires_grad_()",
                            "Call"
                        ],
                        [
                            "next_z",
                            "variable"
                        ]
                    ]
                }
            },
            "randn_167": {
                "variable": {
                    "value": "current_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(task_params.num_total_chains) * 0.01",
                            "BinOp"
                        ],
                        [
                            "init_step_size",
                            "variable"
                        ],
                        [
                            "torch.load(step_sizes_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "step_sizes_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_sizes_dir + str(current_traj_length) + '.pt'",
                            "BinOp"
                        ],
                        [
                            "hparams.messenger.step_sizes_dir + (data + '_' if data is not None else '')",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rate_distortion/algorithms/analytical_linear_vae.py": {
        "torch": {
            "MultivariateNormal_34": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariance",
                            "variable"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_42": {
                "variable": {
                    "value": "density",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.log_prob(torch.from_numpy(samples_grid).to(hparams.tensor_type).to(hparams.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_69": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "eye_70": {
                "variable": {
                    "value": "I_x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.size()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_71": {
                "variable": {
                    "value": "I_z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "W.size()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_72": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "data.view(-1, hparams.dataset.input_vector_length).to(device=hparams.device, dtype=hparams.tensor_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_74": {
                "variable": {
                    "value": "(U, D, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "diag_76": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(D, denominator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.div(D, denominator))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, diagonal), torch.t(U))",
                            "Call"
                        ],
                        [
                            "torch.t(X_T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(WT, inversed_subcore)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "data - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_93": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "eye_94": {
                "variable": {
                    "value": "I_x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.size()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_95": {
                "variable": {
                    "value": "I_z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "W.size()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_96": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "data.view(-1, hparams.dataset.input_vector_length).to(device=hparams.device, dtype=hparams.tensor_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_101": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subcore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, WT) + 1.0 / beta * I_x",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(W, WT) + 1.0 / beta * I_x",
                            "BinOp"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_105": {
                "variable": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.trtrs(LT_XT, torch.t(L), upper=True)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, diagonal), torch.t(U))",
                            "Call"
                        ],
                        [
                            "torch.t(X_T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(WT, inversed_subcore)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "data - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_121": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "eye_122": {
                "variable": {
                    "value": "I_x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data.size()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_123": {
                "variable": {
                    "value": "I_z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "W.size()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_124": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "torch.t(data)",
                            "Call"
                        ],
                        [
                            "data.view(-1, hparams.dataset.input_vector_length).to(device=hparams.device, dtype=hparams.tensor_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_128": {
                "variable": {
                    "value": "(_, s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "subsubcore_woodb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I_z + beta * torch.matmul(WT, W)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_133": {
                "variable": {
                    "value": "inversed_subsubcore_woodb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subsubcore_woodb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I_z + beta * torch.matmul(WT, W)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inversed_subcore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta * I_x - beta ** 2 * torch.matmul(torch.matmul(W, inversed_subsubcore_woodb), WT)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, diagonal), torch.t(U))",
                            "Call"
                        ],
                        [
                            "torch.t(X_T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(WT, inversed_subcore)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "data - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "mu_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(mu, mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "mu_batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(mu, mu), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_178": {
                "variable": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "unsqueeze_179": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=1)",
                            "Call"
                        ],
                        [
                            "decoder_bias",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(b, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "xb_dot_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(data - b, data - b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "xb_dot_batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xb_dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(data - b, data - b), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_182": {
                "variable": {
                    "value": "cross_term_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(torch.t(torch.matmul(W, mu)), data - b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_184": {
                "variable": {
                    "value": "cross_term_batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross_term_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(torch.t(torch.matmul(W, mu)), data - b), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "E_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_186": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariance",
                            "variable"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_187": {
                "variable": {
                    "value": "E_Y_squared_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(E_Y, E_Y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_188": {
                "variable": {
                    "value": "E_Y_squared_batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "E_Y_squared_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(E_Y, E_Y), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_236": {
                "variable": {
                    "value": "cated_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rate_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "cated_distortion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "distortion_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_246": {
                "variable": {
                    "value": "rate_expecation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cated_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(rate_list, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_247": {
                "variable": {
                    "value": "distortion_expectation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cated_distortion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(distortion_list, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_153": {
                "variable": {
                    "value": "second_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(singular_values ** 2 + 1.0 / beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_155": {
                "variable": {
                    "value": "trace_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / beta / (singular_values ** 2 + 1.0 / beta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "det_159": {
                "variable": {
                    "value": "det_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariance",
                            "variable"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_160": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.det(cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_161": {
                "variable": {
                    "value": "trace_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariance",
                            "variable"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ],
                        [
                            "I_z - torch.matmul(core, W)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "div_76": {
                "input": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / beta + D ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_77": {
                "input": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, diagonal), torch.t(U))",
                            "Call"
                        ],
                        [
                            "torch.t(X_T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(WT, inversed_subcore)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "matmul_99": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_109": {
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, diagonal), torch.t(U))",
                            "Call"
                        ],
                        [
                            "torch.t(X_T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(WT, inversed_subcore)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "matmul_126": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_130": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_130": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "input": {
                    "value": "core",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(V, diagonal), torch.t(U))",
                            "Call"
                        ],
                        [
                            "torch.t(X_T)",
                            "Call"
                        ],
                        [
                            "torch.matmul(WT, inversed_subcore)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "mul_163": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_175": {
                "input": {
                    "value": "torch.tensor(2.0 * pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_180": {
                "input": {
                    "value": "data - b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "data - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_183": {
                "input": {
                    "value": "torch.t(torch.matmul(W, mu))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "data - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_187": {
                "input": {
                    "value": "E_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, mu)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "E_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_189": {
                "input": {
                    "value": "cov_Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(W, cov), WT)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_44": {
                "ndarray": {
                    "value": "samples_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack([x_grid.flatten(), y_grid.flatten()]).transpose()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_103": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(subcore, upper=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_127": {
                "input": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "input": {
                    "value": "torch.matmul(W, inversed_subsubcore_woodb)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "WT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ],
                        [
                            "torch.t(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_151": {
                "input": {
                    "value": "torch.tensor(1.0 / beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_153": {
                "input": {
                    "value": "singular_values ** 2 + 1.0 / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "2.0 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_183": {
                "input": {
                    "value": "torch.matmul(W, mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_135": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "inversed_subsubcore_woodb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(subsubcore_woodb)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "data": {
                    "value": "1.0 / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ],
                        [
                            "decoder_weights",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ],
                        [
                            "torch.matmul(core, data - b)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rate_distortion/algorithms/anneal_ops.py": {
        "torch": {
            "zeros_51": {
                "variable": {
                    "value": "z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_90": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(data - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "task_params.num_total_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gen_rep - data_rep) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "log_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "prior_dist.log_likelihood(z.detach().cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_156": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(data - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_36": {
                "input": {
                    "value": "distortion",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/algorithms/hmc.py": {
        "torch": {
            "exp_72": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_Hamil - propose_Hamil",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_73": {
                "variable": {
                    "value": "uniform_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "prob.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "avg_avg_accept",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_accept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "accept_hist / hist_len",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rate_distortion/algorithms/mixture_prior_rd.py": {
        "torch": {
            "Bernoulli_57": {
                "variable": {
                    "value": "Ber_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([hparams.mixture_weight])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "mean_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_59": {
                "variable": {
                    "value": "std_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_61": {
                "variable": {
                    "value": "original_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(hparams.model_train.z_size)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(hparams.model_train.z_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_62": {
                "variable": {
                    "value": "bad_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(hparams.model_train.z_size)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "std_bad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(hparams.model_train.z_size) * hparams.bad_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "samples_64",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mixture_prior.sample(64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).to(device=self.hparams.device, dtype=self.hparams.tensor_type)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_44": {
                "variable": {
                    "value": "coin_flips",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Ber_dist.sample([shape]).type(torch.ByteTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bad_samples_selected, good_samples_selected)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "torch.log(self.likelihood(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[hparams.mixture_weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "self.bad_prior.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_35": {
                "input": {
                    "value": "self.original_prior.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "self.likelihood(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/algorithms/rate_distortion.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "z_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "approx_post_zs[0].size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "cated_KLD_expecation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "KLD_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "cated_distortion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "distortion_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "KLD_expecation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cated_KLD_expecation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(KLD_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "distortion_expectation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cated_distortion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(distortion_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(normalizing_constants_logws)",
                            "Call"
                        ],
                        [
                            "torch.flatten(singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(normalizing_constants_logws)",
                            "Call"
                        ],
                        [
                            "torch.flatten(singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains))",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_105": {
                "variable": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "variable": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(normalizing_constants_logws)",
                            "Call"
                        ],
                        [
                            "torch.flatten(singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(normalizing_constants_logws)",
                            "Call"
                        ],
                        [
                            "torch.flatten(singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains))",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_124": {
                "variable": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_163": {
                "variable": {
                    "value": "distortion_expectation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distortion_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distortion * flattened_normalized_AIS_weights",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "variable": {
                    "value": "flattened_normalized_AIS_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_AIS_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "flattened_normalized_AIS_weights * (log_q_zs_lower - log_p_zs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "flattened_normalized_AIS_weights * (log_q_zs - log_p_zs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "distortion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gen_rep - data_rep) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "distortion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_139": {
                "input": {
                    "value": "normalizing_constants_logws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(normalizing_constants_logws)",
                            "Call"
                        ],
                        [
                            "torch.flatten(singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(normalizing_constants_logws)",
                            "Call"
                        ],
                        [
                            "torch.flatten(singleton_repeat(normalizing_constants_logws, hparams.rd.n_chains))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/algorithms/rd_baseline.py": {
        "torch": {
            "Normal_30": {
                "variable": {
                    "value": "normal_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(0.5 * logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[torch.exp(covariance[0][0]), 0.0], [0.0, torch.exp(covariance[0][1])]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MultivariateNormal_107": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[0]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[torch.exp(covariance[0][0]), 0.0], [0.0, torch.exp(covariance[0][1])]])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_114": {
                "variable": {
                    "value": "density",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m.log_prob(torch.from_numpy(samples_grid).to(hparams.tensor_type).to(hparams.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_267": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "normal_dist.log_prob(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.en1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.en2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.en3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.en4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.model_train.z_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_62": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-elbo",
                            "UnaryOp"
                        ],
                        [
                            "self.beta * likelihood + (logpz - logqz)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_85": {
                "variable": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, zeros, zeros)",
                            "Call"
                        ],
                        [
                            "torch.mean(logpz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_86": {
                "variable": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, mu, logvar)",
                            "Call"
                        ],
                        [
                            "torch.mean(logqz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_87": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.observation_log_likelihood_fn(flattened_x_k, x_mean, x_logvar_full)",
                            "Call"
                        ],
                        [
                            "torch.mean(likelihood)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_141": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((flattened_x - x_mean) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "ndarray": {
                    "value": "samples_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack([x_grid.flatten(), y_grid.flatten()]).transpose()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_99": {
                "input": {
                    "value": "covariance[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_100": {
                "input": {
                    "value": "covariance[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "(flattened_x - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], recon_batch.view(task_params.batch_size, hparams.dataset.input_dims[0], hparams.dataset.input_dims[1], hparams.dataset.input_dims[2])[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/algorithms/train_mnist_CNN.py": {
        "torch": {
            "nll_loss_31": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams.messenger.checkpoint_dir_rep, 'mnist_cnn_checkpoint.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams.messenger.checkpoint_dir_rep, 'mnist_cnn_checkpoint.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "{'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(hparams.messenger.checkpoint_dir_rep, 'mnist_cnn_checkpoint.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_46": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/algorithms/train_vae.py": {
        "torch": {
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data[:n], recon_batch.view(task_params.batch_size, hparams.dataset.input_dims[0], hparams.dataset.input_dims[1], hparams.dataset.input_dims[2])[:n]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/data/cifar.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(data_dir, train=train, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True if shuffle else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_70": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_71": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(hparams.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(hparams.data_dir, train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rate_distortion/data/load_data.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "x_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams.rd.simulate_dir + 'rd_simulated_x.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_50": {
                "variable": {
                    "value": "z_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "z_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams.rd.simulate_dir + 'rd_simulated_z.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rate_distortion/data/mnist.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(data_dir, train=train, download=True, transform=transforms.ToTensor())",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True if shuffle else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_58": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_59": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(hparams.data_dir, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(hparams.data_dir, train=True, download=True, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(hparams.tensor_type).to(hparams.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size) * hparams.dataset.label",
                            "BinOp"
                        ],
                        [
                            "mask.to(device=hparams.device, dtype=hparams.tensor_type)",
                            "Call"
                        ],
                        [
                            "torch.eq(labels, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_155": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.to(hparams.tensor_type).to(hparams.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size) * hparams.dataset.label",
                            "BinOp"
                        ],
                        [
                            "mask.to(device=hparams.device, dtype=hparams.tensor_type)",
                            "Call"
                        ],
                        [
                            "torch.eq(labels, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_103": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_151": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/main.py": {
        "torch": {
            "exp_74": {
                "variable": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/models/aae.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.de1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.de2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.de3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.de_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(hparams.model_train.x_var, dtype=hparams.tensor_type))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de_mean(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "torch.tensor(hparams.model_train.x_var, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "hparams.model_train.x_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/models/cnns.py": {
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, 28, 28)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/models/gans.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.de1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "zdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.de2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.de3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ],
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ],
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.de1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "zdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.de2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ],
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ],
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.de1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "zdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ],
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ],
                        [
                            "int(np.prod(img_dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_131": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ],
                        [
                            "self.out(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "out.reshape(z.size(0), *self.img_dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "zdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nchannels * self.proj_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tanh_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_188": {
                "in_channels": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "variable"
                        ],
                        [
                            "nchannels * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_203": {
                "in_channels": {
                    "value": "nchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "variable"
                        ],
                        [
                            "nchannels * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nchannels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_224": {
                "variable": {
                    "value": "layers[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "layers[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/models/simulate.py": {
        "torch": {
            "randn_85": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, hparams.model_train.z_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_97": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(x_logvar * 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_98": {
                "variable": {
                    "value": "x_normal_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(x_mean.size()).mul(torch.exp(x_logvar * 0.5))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_97": {
                "input": {
                    "value": "x_logvar * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_91": {
                "input": {
                    "value": "torch.tensor(beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_94": {
                "input": {
                    "value": "torch.tensor(2 * beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_94": {
                "data": {
                    "value": "2 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/models/vaes.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.en1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.en2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.en3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.en4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.model_train.z_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.de1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.de2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.de3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.de_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(hparams.model_train.x_var, dtype=hparams.tensor_type))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_50": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_60": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_61": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_70": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_71": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_79": {
                "variable": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(2, 2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "likelihood + logpz - logqz",
                            "BinOp"
                        ],
                        [
                            "log_mean_exp(elbo.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(elbo)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_103": {
                "variable": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, zeros, zeros)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(logpz.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(logpz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_104": {
                "variable": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, mu, logvar)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(logqz.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(logqz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_105": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.observation_log_likelihood_fn(flattened_x_k, x_mean, x_logvar)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(likelihood.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(likelihood)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.en1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.en2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.en3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.en4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.model_train.z_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.de1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.de2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.de3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.de_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(hparams.model_train.x_var, dtype=hparams.tensor_type))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_139": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_140": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_141": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.en3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_149": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_150": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_159": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_160": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de2(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_161": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.de3(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_182": {
                "variable": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "likelihood + logpz - logqz",
                            "BinOp"
                        ],
                        [
                            "log_mean_exp(elbo.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(elbo)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_183": {
                "variable": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, zeros, zeros)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(logpz.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(logpz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_184": {
                "variable": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, mu, logvar)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(logqz.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(logqz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_185": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.observation_log_likelihood_fn(flattened_x_k, x_mean, x_logvar)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(likelihood.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(likelihood)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.model_train.z_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.dec_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hparams.dataset.input_vector_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(1, dtype=hparams.tensor_type))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_218": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_219": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_246": {
                "variable": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "likelihood + logpz - logqz",
                            "BinOp"
                        ],
                        [
                            "log_mean_exp(elbo.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(elbo)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_247": {
                "variable": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, zeros, zeros)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(logpz.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(logpz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_248": {
                "variable": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logqz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_normal(z, mu, logvar)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(logqz.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(logqz)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_249": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.observation_log_likelihood_fn(flattened_x_k, x_mean, x_logvar)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(likelihood.view(num_iwae, -1), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(likelihood)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_41": {
                "input": {
                    "value": "torch.tensor(hparams.model_train.x_var, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_132": {
                "input": {
                    "value": "torch.tensor(hparams.model_train.x_var, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "x_mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "torch.tensor(1, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "hparams.model_train.x_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "hparams.model_train.x_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/utils/aae_utils.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "model.de1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h1/w_dense:0'].transpose()).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "model.de1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h1/b_dense:0']).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "model.de2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h2/w_dense:0'].transpose()).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "model.de2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h2/b_dense:0']).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "model.de3.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h3/w_dense:0'].transpose()).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "model.de3.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h3/b_dense:0']).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "model.de_mean.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h4/w_dense:0'].transpose()).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "model.de_mean.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(aae_weights['decoder_h4/b_dense:0']).to(device=hparams.device, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "aae_weights['decoder_h1/w_dense:0'].transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "aae_weights['decoder_h1/b_dense:0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "aae_weights['decoder_h2/w_dense:0'].transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "aae_weights['decoder_h2/b_dense:0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "aae_weights['decoder_h3/w_dense:0'].transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "aae_weights['decoder_h3/b_dense:0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "aae_weights['decoder_h4/w_dense:0'].transpose()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "aae_weights['decoder_h4/b_dense:0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/utils/computation_utils.py": {
        "torch": {
            "sum_32": {
                "variable": {
                    "value": "test_logws_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_logws",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_45": {
                "variable": {
                    "value": "chain_sum_logws",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rearanged_logws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logws.view(n_chains, batch_size, -1).to(device=hparams.device, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "logws.view(n_chains, batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "normalized_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_log_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rearanged_logws - chain_sum_logws",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_25": {
                "variable": {
                    "value": "singleton_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "torch.tensor(n_chains).to(hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "n_chains",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/utils/experiment_utils.py": {
        "torch": {
            "cat_147": {
                "variable": {
                    "value": "whole_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_150": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "whole_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(data_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_152": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "whole_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(data_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_153": {
                "variable": {
                    "value": "data_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "whole_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(data_list, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_154": {
                "variable": {
                    "value": "data_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "whole_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(data_list, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_468": {
                "variable": {
                    "value": "hparams.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if hparams.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_779": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_809": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "self.beta_array",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(self.hparams.messenger.beta_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "self.log_weights_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.log_weights_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "self.log_Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.log_Z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_62": {
                "variable": {
                    "value": "self.distortion_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.distortion_chains",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_329": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hparams.model_train.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_486": {
                "t": {
                    "value": "hparams.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_606": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[comp_data, comp_rec]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_791": {
                "variable": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_821": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer_state, 'global_step': hparams.step, 'global_epoch': hparams.epoch, 'test_loss_list': test_loss_list}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_ckpt",
                            "variable"
                        ],
                        [
                            "latest_ckpt",
                            "variable"
                        ]
                    ]
                }
            },
            "is_available_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_352": {
                "input": {
                    "value": "x_logvar",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_device_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "self.hparams.messenger.beta_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/utils/gan_utils.py": {
        "torch": {
            "device_218": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if opt.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_288": {
                "variable": {
                    "value": "netG.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(hparams.model_train.x_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "all_gen_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_gen_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_gen_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "backup_gan_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams.output_root_dir + '/checkpoints/gans/results/' + hparams.specific_model_path[32:]",
                            "BinOp"
                        ],
                        [
                            "hparams.output_root_dir + '/checkpoints/gans/results/' + hparams.specific_model_path[56:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_289": {
                "input": {
                    "value": "torch.tensor(hparams.model_train.x_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_297": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if opt.cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_178": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "backup_gan_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hparams.output_root_dir + '/checkpoints/gans/results/' + hparams.specific_model_path[32:]",
                            "BinOp"
                        ],
                        [
                            "hparams.output_root_dir + '/checkpoints/gans/results/' + hparams.specific_model_path[56:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_289": {
                "data": {
                    "value": "hparams.model_train.x_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_240": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_251": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_262": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_273": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/utils/guassian_blur.py": {
        "torch": {
            "meshgrid_40": {
                "variable": {
                    "value": "meshgrids",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.arange(size, dtype=tensor_type) for size in kernel_size]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "kernel * (1 / (std * math.sqrt(2 * math.pi)) * torch.exp(-((mgrid - mean) / std) ** 2 / 2))",
                            "BinOp"
                        ],
                        [
                            "kernel / torch.sum(kernel)",
                            "BinOp"
                        ],
                        [
                            "kernel.view(1, 1, *kernel.size())",
                            "Call"
                        ],
                        [
                            "kernel.repeat(channels, *[1] * (kernel.dim() - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_41": {
                "start": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor_type",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_45": {
                "input": {
                    "value": "-((mgrid - mean) / std) ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rate_distortion/utils/vae_utils.py": {
        "torch": {
            "max_108": {
                "variable": {
                    "value": "(max_, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hparams.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "model.x_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(hparams.overwrite_variance, dtype=hparams.tensor_type))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "mean.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_109": {
                "input": {
                    "value": "torch.mean(torch.exp(x - max_), dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_109": {
                "input": {
                    "value": "max_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_78": {
                "input": {
                    "value": "torch.tensor(hparams.overwrite_variance, dtype=hparams.tensor_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "torch.exp(x - max_)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(mean.size())[1]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "hparams.overwrite_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hparams.tensor_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "torch.tensor(2 * pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_109": {
                "input": {
                    "value": "x - max_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_125": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(mean.size()) + logvar",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_101": {
                "input": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(mean.size()) + logvar",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}