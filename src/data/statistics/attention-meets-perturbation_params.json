{
    "amep/commands/make_dataset/bc/ag_news.py": {
        "sklearn": {
            "train_test_split_39": {
                "variable": {
                    "value": "(train_idx, dev_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df.index[df.exp_split == 'train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "16377",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "amep/commands/make_dataset/bc/imdb.py": {
        "sklearn": {
            "train_test_split_31": {
                "variable": {
                    "value": "(train_idx, dev_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1378",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_40": {
                "variable": {
                    "value": "(test_idx, remaining_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1378",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "amep/commands/make_dataset/bc/newsgroups.py": {
        "sklearn": {
            "fetch_20newsgroups_23": {
                "variable": {
                    "value": "data_20",
                    "type": "variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "str",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "remove": {
                    "value": "('headers', 'footers', 'quotes')",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(train_idx, test_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(len(sentences))",
                    "type": "Call",
                    "possible_values": []
                },
                "stratify": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0 if data_20.target[i] == 9 else 1 for i in all_sentences]",
                            "ListComp"
                        ],
                        [
                            "{'train': y_train, 'test': y_test, 'dev': y_dev}",
                            "Dict"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "13478",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_39": {
                "variable": {
                    "value": "(train_idx, dev_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "[label[i] for i in train_idx]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "13478",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "amep/commands/make_dataset/nli/multi_nli.py": {
        "sklearn": {
            "train_test_split_64": {
                "variable": {
                    "value": "(train_idx, dev_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(len(paragraph_dict['train']))",
                    "type": "Call",
                    "possible_values": []
                },
                "stratify": {
                    "value": "answer_dict['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "13478",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "amep/commands/make_dataset/qa/babi.py": {
        "sklearn": {
            "train_test_split_79": {
                "variable": {
                    "value": "(train_idx, dev_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df.index[df.exp_split == 'train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "16377",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CountVectorizer_129": {
                "variable": {
                    "value": "cvec",
                    "type": "variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "lambda x: x.split(' ')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "amep/commands/make_dataset/util.py": {
        "sklearn": {
            "CountVectorizer_37": {
                "variable": {
                    "value": "count_vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "lambda x: x.split(' ')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "min_df": {
                    "value": "min_df",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "amep/common/util.py": {
        "torch": {
            "stack_23": {
                "tensors": {
                    "value": "(one_minus_logit, logit)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "amep/models/bc/at_advt.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self._output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_layer.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_39": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_grad_enabled_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "amep/models/bc/weighted.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self._output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_layer.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_37": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(one_minus_logit, logit)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "amep/models/qa/vanilla.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self._p_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_layer.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_layer.get_output_dim() // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self._q_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_layer.get_output_dim()",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_layer.get_output_dim() // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self._output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_layer.get_output_dim() // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('labels')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_51": {
                "variable": {
                    "value": "self._tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "amep/modules/attention_layer/base.py": {
        "torch": {}
    },
    "amep/modules/attention_layer/bc/advt.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "r_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d_var_.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_89": {
                "variable": {
                    "value": "dir_normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_1 - attn_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_96": {
                "variable": {
                    "value": "d_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(attn_d_var * dir_normed).sum(axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_102": {
                "variable": {
                    "value": "r_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.d_var_.grad",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "amep/modules/attention_layer/bc/vanilla.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.attn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tanh_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "amep/modules/attention_layer/qa/vanilla.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.attn1p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.attn1q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.attn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_16": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "hidden_p",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "hidden_q.unsqueeze(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "amep/nn/util.py": {
        "torch": {}
    }
}