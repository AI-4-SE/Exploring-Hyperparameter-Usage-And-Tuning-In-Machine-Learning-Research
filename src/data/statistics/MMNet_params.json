{
    "learning_based/denoiser.py": {
        "tensorflow": {
            "cast_11": {
                "variable": {
                    "value": "self.lgst_constel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "lgst_constel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "information['constellation']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(zt, [-1, 1]) - self.lgst_constel",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.NT, self.M])",
                            "Call"
                        ],
                        [
                            "-tf.square(arg) / 2.0 / tau2_t",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.M])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.NT, self.M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "variable": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(zt, [-1, 1]) - self.lgst_constel",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.NT, self.M])",
                            "Call"
                        ],
                        [
                            "-tf.square(arg) / 2.0 / tau2_t",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.M])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "shatt1",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(zt, [-1, 1]) - self.lgst_constel",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.NT, self.M])",
                            "Call"
                        ],
                        [
                            "-tf.square(arg) / 2.0 / tau2_t",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.M])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "shatt1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "shatt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(arg, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(shatt1, tf.reshape(self.lgst_constel, [self.M, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(shatt1, [-1, self.NT])",
                            "Call"
                        ],
                        [
                            "fc_layer(tf.nn.relu(fc_layer(zt, 8 * self.NT)), self.NT)",
                            "Call"
                        ],
                        [
                            "self.gaussian(zt, {'tau2_t': tau2_t / tf.Variable(tf.random_normal([1, self.NT, 1], 1.0, 0.1))})",
                            "Call"
                        ],
                        [
                            "self.gaussian(zt, {'tau2_t': tau2_t})",
                            "Call"
                        ],
                        [
                            "zt",
                            "variable"
                        ],
                        [
                            "tf.reshape(den, [-1, self.NT])",
                            "Call"
                        ],
                        [
                            "self.gaussian(zt, {'tau2_t': tau2_t})",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(self.lgst_constel, [self.M, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "shatt1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "shatt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(arg, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(shatt1, tf.reshape(self.lgst_constel, [self.M, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(shatt1, [-1, self.NT])",
                            "Call"
                        ],
                        [
                            "fc_layer(tf.nn.relu(fc_layer(zt, 8 * self.NT)), self.NT)",
                            "Call"
                        ],
                        [
                            "self.gaussian(zt, {'tau2_t': tau2_t / tf.Variable(tf.random_normal([1, self.NT, 1], 1.0, 0.1))})",
                            "Call"
                        ],
                        [
                            "self.gaussian(zt, {'tau2_t': tau2_t})",
                            "Call"
                        ],
                        [
                            "zt",
                            "variable"
                        ],
                        [
                            "tf.reshape(den, [-1, self.NT])",
                            "Call"
                        ],
                        [
                            "self.gaussian(zt, {'tau2_t': tau2_t})",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.NT]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_38": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(tf.trace(HTH), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_39": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_40": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_52": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(tf.trace(HTH), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_53": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "theta_t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_layer(tf.reshape(zt, [-1, 1]), nhidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_layer(den, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_73": {
                "variable": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "den_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(den, self.M)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(fc_layer(tf.reshape(zt, [-1, 1]), nhidden))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_layer(den, 10))",
                            "Call"
                        ],
                        [
                            "fc_layer(den, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(den_logit, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(den, tf.reshape(self.lgst_constel, [self.M, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reshape(self.lgst_constel, [self.M, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "shatt1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "den",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(fc_layer(tf.reshape(zt, [-1, 1]), nhidden))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_layer(den, 10))",
                            "Call"
                        ],
                        [
                            "fc_layer(den, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(den_logit, dim=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(den, tf.reshape(self.lgst_constel, [self.M, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.NT]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "feature1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(rt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / tf.trace(tf.matmul(H, H, transpose_a=True))",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(feature2, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature1, feature2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_layer(feature, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_layer(tau2_t, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_87": {
                "variable": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_layer(tau2_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_88": {
                "variable": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['tau2_t']",
                            "Subscript"
                        ],
                        [
                            "1.0 / self.NT * tf.reshape(tf.trace(tf.matmul(C_t, C_t, transpose_b=True)), [-1, 1, 1]) * v2_t + tf.square(tf.reshape(noise_sigma, [-1, 1, 1])) / (2.0 * self.NT) * tf.reshape(tf.trace(tf.matmul(W_t, W_t, transpose_b=True)), [-1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "1.0 / self.NT * tf.reshape(tf.trace(tf.matmul(C_t, C_t, transpose_b=True)), [-1, 1, 1]) * v2_t + tf.square(tf.reshape(theta_t, [-1, 1, 1]) * tf.reshape(noise_sigma, [-1, 1, 1])) / (2.0 * self.NT) * tf.reshape(tf.trace(tf.matmul(W_t, W_t, transpose_b=True)), [-1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(fc_layer(feature, 10))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_layer(tau2_t, 4))",
                            "Call"
                        ],
                        [
                            "tf.square(fc_layer(tau2_t, 1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tau2_t, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tau2_t, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_89": {
                "variable": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tau2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['tau2_t']",
                            "Subscript"
                        ],
                        [
                            "1.0 / self.NT * tf.reshape(tf.trace(tf.matmul(C_t, C_t, transpose_b=True)), [-1, 1, 1]) * v2_t + tf.square(tf.reshape(noise_sigma, [-1, 1, 1])) / (2.0 * self.NT) * tf.reshape(tf.trace(tf.matmul(W_t, W_t, transpose_b=True)), [-1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "1.0 / self.NT * tf.reshape(tf.trace(tf.matmul(C_t, C_t, transpose_b=True)), [-1, 1, 1]) * v2_t + tf.square(tf.reshape(theta_t, [-1, 1, 1]) * tf.reshape(noise_sigma, [-1, 1, 1])) / (2.0 * self.NT) * tf.reshape(tf.trace(tf.matmul(W_t, W_t, transpose_b=True)), [-1, 1, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(fc_layer(feature, 10))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_layer(tau2_t, 4))",
                            "Call"
                        ],
                        [
                            "tf.square(fc_layer(tau2_t, 1))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tau2_t, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tau2_t, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_17": {
                "tensor": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "tensor": {
                    "value": "self.lgst_constel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.M, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_29": {
                "features": {
                    "value": "fc_layer(zt, 8 * self.NT)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "input": {
                    "value": "tf.trace(HTH)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_41": {
                "num_rows": {
                    "value": "self.NT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(H)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "a": {
                    "value": "W_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_helper['W']",
                            "Subscript"
                        ],
                        [
                            "linear_helper['W']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_44": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "tf.trace(HTH)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_56": {
                "num_rows": {
                    "value": "self.NT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(H)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "self.lgst_constel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.M, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_81": {
                "x": {
                    "value": "rt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rt",
                            "Method Argument"
                        ],
                        [
                            "rt",
                            "Method Argument"
                        ],
                        [
                            "rt",
                            "Method Argument"
                        ],
                        [
                            "rt",
                            "Method Argument"
                        ],
                        [
                            "rt",
                            "Method Argument"
                        ],
                        [
                            "rt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_82": {
                "*args": {
                    "value": "tf.matmul(H, H, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "input_tensor": {
                    "value": "tf.square(rt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trace_38": {
                "*args": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(H, H, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(H, H, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_42": {
                "tensor": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ],
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "tf.square(rt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trace_52": {
                "*args": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(H, H, transpose_a=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(H, H, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_56": {
                "a": {
                    "value": "W_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_helper['W']",
                            "Subscript"
                        ],
                        [
                            "linear_helper['W']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ],
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "tensor": {
                    "value": "zt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ],
                        [
                            "zt",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_19": {
                "x": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(zt, [-1, 1]) - self.lgst_constel",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.NT, self.M])",
                            "Call"
                        ],
                        [
                            "-tf.square(arg) / 2.0 / tau2_t",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(arg, [-1, self.M])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_38": {
                "x": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ],
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_42": {
                "x": {
                    "value": "tf.reshape(noise_sigma, [-1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_42": {
                "*args": {
                    "value": "tf.matmul(C_t, C_t, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "tf.random_normal([1, self.NT, 1], 1.0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_52": {
                "x": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ],
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_57": {
                "x": {
                    "value": "tf.reshape(theta_t, [-1, 1, 1]) * tf.reshape(noise_sigma, [-1, 1, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trace_57": {
                "*args": {
                    "value": "tf.matmul(C_t, C_t, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "a": {
                    "value": "C_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - tf.matmul(W_t, H)",
                            "BinOp"
                        ],
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - theta_t * tf.matmul(W_t, H)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "C_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - tf.matmul(W_t, H)",
                            "BinOp"
                        ],
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - theta_t * tf.matmul(W_t, H)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "C_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - tf.matmul(W_t, H)",
                            "BinOp"
                        ],
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - theta_t * tf.matmul(W_t, H)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "C_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - tf.matmul(W_t, H)",
                            "BinOp"
                        ],
                        [
                            "tf.eye(self.NT, batch_shape=[tf.shape(H)[0]]) - theta_t * tf.matmul(W_t, H)",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "learning_based/detector.py": {
        "tensorflow": {
            "zeros_16": {
                "variable": {
                    "value": "xhatk",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.NT]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_17": {
                "variable": {
                    "value": "rk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.features['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "onsager",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self.NR]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learning_based/errorPropIid.py": {
        "tensorflow": {}
    },
    "learning_based/linear.py": {
        "tensorflow": {
            "Variable_15": {
                "variable": {
                    "value": "Wr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=[1, self.NT // 2, self.NR // 2], mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_16": {
                "variable": {
                    "value": "Wi",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, self.NT // 2, self.NR // 2], 0.0, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_17": {
                "values": {
                    "value": "[Wi, Wr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_18": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.concat([Wr, -Wi], axis=2), tf.concat([Wi, Wr], axis=2)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(W, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matrix_transpose_29": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matrix_transpose_37": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matrix_transpose_45": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "Theta1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, self.NT, self.NT], 0.0, 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "variable": {
                    "value": "theta3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1, self.NT], 0.0, 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "HHT",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "gamma_t",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_67": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(tf.trace(HTH), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_68": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.reduce_sum(tf.square(rt), axis=1, keep_dims=True) - self.NR * tf.square(noise_sigma) / 2.0, tf.expand_dims(tf.trace(HTH), axis=1))",
                            "Call"
                        ],
                        [
                            "tf.maximum(v2_t, 1e-09)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v2_t, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "tf.trace(HTH)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_70": {
                "x": {
                    "value": "tf.expand_dims(noise_sigma, axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "inv_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(v2_t * HHT + lam * tf.eye(self.NR, batch_shape=[tf.shape(H)[0]]))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "tf.trace(tf.matmul(What_t, H))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_22": {
                "num_rows": {
                    "value": "self.NT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "a": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.concat([Wr, -Wi], axis=2), tf.concat([Wi, Wr], axis=2)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(W, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_31": {
                "x": {
                    "value": "tf.Variable(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "tf.square(rt)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trace_67": {
                "*args": {
                    "value": "HTH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(H, H, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_70": {
                "input": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_73": {
                "*args": {
                    "value": "tf.matmul(What_t, H)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_75": {
                "num_rows": {
                    "value": "self.NT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "gamma_t * W_t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Variable_31": {
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "a": {
                    "value": "tf.tile(Theta1, [batch_size, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.concat([Wr, -Wi], axis=2), tf.concat([Wi, Wr], axis=2)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(W, [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ],
                        [
                            "tf.matrix_transpose(H)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_67": {
                "x": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['noise_sigma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_71": {
                "num_rows": {
                    "value": "self.NR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(H)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "What_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v2_t * tf.matmul(H, inv_term, transpose_a=True)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_51": {
                "input": {
                    "value": "Theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([1, self.NT, self.NT], 0.0, 0.001))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ],
                        [
                            "features['H']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "learning_based/loss.py": {
        "tensorflow": {
            "mean_squared_error_6": {
                "variable": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "xhatk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xhat",
                            "variable"
                        ],
                        [
                            "xhat",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_squared_error_18": {
                "variable": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "batch_matvec_mul(H, xhatk)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_to_collection_8": {
                "name": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=x, predictions=xhatk)",
                            "Call"
                        ],
                        [
                            "tf.losses.mean_squared_error(labels=y, predictions=batch_matvec_mul(H, xhatk))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_20": {
                "name": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "lk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.mean_squared_error(labels=x, predictions=xhatk)",
                            "Call"
                        ],
                        [
                            "tf.losses.mean_squared_error(labels=y, predictions=batch_matvec_mul(H, xhatk))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "learning_based/offlineTraining.py": {
        "tensorflow": {}
    },
    "learning_based/onlineTraining.py": {
        "tensorflow": {}
    },
    "learning_based/run.py": {
        "tensorflow": {}
    },
    "learning_based/sample_generator.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(-np.sqrt(n) + 1, np.sqrt(n) - 1, np.sqrt(n))",
                            "Call"
                        ],
                        [
                            "constellation / (alpha * np.sqrt(2))",
                            "BinOp"
                        ],
                        [
                            "tf.Variable(constellation, trainable=False, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.constellation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.QAM_N_ind()",
                            "Call"
                        ],
                        [
                            "self.QAM_N_ind()",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_129": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[wr, wi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "average_H_powerdB",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "H_powerdB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0 * tf.log(tf.reduce_mean(tf.reduce_sum(tf.square(H), axis=1), axis=0)) / tf.log(10.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_140": {
                "variable": {
                    "value": "complexnoise_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "(10.0 * np.log10(self.NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_54": {
                "variable": {
                    "value": "mod_names",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mod_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[self.batch_size, self.NT], minval=0, maxval=3, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tile(mod_names, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_56": {
                "variable": {
                    "value": "mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "mod_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[self.batch_size, self.NT], minval=0, maxval=3, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.tile(mod_names, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "indices_QAM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[self.batch_size, 2 * self.NT], minval=0, maxval=np.sqrt(self.mod_n), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "mapping * tf.concat([indices_QAM64, tf.gather([0, 2, 5, 7], indices_QAM16), indices_QAM4 * 7], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(indices_QAM, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Hr, -1.0 * Hi]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Hi, Hr]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h1, h2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_122": {
                "variable": {
                    "value": "snr_adjusments",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "snr_adjusments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.mix_mapping, tf.float32) * [[[0, -powQAM16 - 7.0, -powQAM4 - 14.0]]]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(snr_adjusments, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(snr_adjusments, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "snr_adjusments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_adjusments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.mix_mapping, tf.float32) * [[[0, -powQAM16 - 7.0, -powQAM4 - 14.0]]]",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(snr_adjusments, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(snr_adjusments, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_138": {
                "x": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "(10.0 * np.log10(self.NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_132": {
                "x": {
                    "value": "tf.reduce_mean(tf.reduce_sum(tf.square(H), axis=1), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_134": {
                "x": {
                    "value": "tf.reduce_mean(tf.reduce_sum(tf.square(x), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_143": {
                "x": {
                    "value": "tf.reduce_mean(tf.reduce_sum(tf.square(batch_matvec_mul(H, x)), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_144": {
                "x": {
                    "value": "tf.reduce_mean(tf.reduce_sum(tf.square(w), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_72": {
                "values": {
                    "value": "[indices_QAM64, tf.gather([0, 2, 5, 7], indices_QAM16), indices_QAM4 * 7]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_119": {
                "x": {
                    "value": "(tf.square(self.constellation[0]) + tf.square(self.constellation[7])) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_120": {
                "x": {
                    "value": "(self.constellation[0] ** 2 + self.constellation[2] ** 2 + self.constellation[5] ** 2 + self.constellation[7] ** 2) / 4.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "self.mix_mapping",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(H), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(x), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(batch_matvec_mul(H, x)), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(w), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_72": {
                "params": {
                    "value": "[0, 2, 5, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_QAM16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[self.batch_size, 2 * self.NT, 1], minval=0, maxval=4, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "tf.square(H)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_134": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "input_tensor": {
                    "value": "tf.square(batch_matvec_mul(H, x))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "tf.square(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_132": {
                "x": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "variable"
                        ],
                        [
                            "tf.concat([h1, h2], axis=1)",
                            "Call"
                        ],
                        [
                            "H * 10.0 ** (snr_adjusments / 10.0)",
                            "BinOp"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_134": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.constellation, indices)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_143": {
                "x": {
                    "value": "batch_matvec_mul(H, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_144": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([wr, wi], axis=1)",
                            "Call"
                        ],
                        [
                            "w * tf.pow(10.0, (10.0 * np.log10(self.NT) + self.Hdataset_powerdB - snr_db - 10.0 * np.log10(self.NR)) / 20.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_119": {
                "x": {
                    "value": "self.constellation[7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "learning_based/tf_session.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "snr_db_max",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "snr_db_max",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "snr_db_min",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "snr_db_min",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "train_flag",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "train_flag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_43": {
                "variable": {
                    "value": "x_mmse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mimo.constellation",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "x_mmse_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demodulate(x_mmse, constellation)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_58": {
                "variable": {
                    "value": "acc_NN",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdamOptimizer_63": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(), name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_68": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_13": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_15": {
                "seed": {
                    "value": "self.params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2 * self.params['N'], 2 * self.params['K'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "H",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_fun(x_NN, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "learning_based/utils.py": {
        "tensorflow": {
            "shape_31": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, shape=[-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(tf.cast(x, tf.float32), w), b)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, shape=[-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(tf.cast(x, tf.float32), w), b)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "variable": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "constellation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(constellation, shape=[1, -1])",
                            "Call"
                        ],
                        [
                            "constellation",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_34": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmin(tf.abs(y - constellation), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmin(tf.abs(y - constellation), axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([in_size, out_size], stddev=np.sqrt(1.0 / (in_size + out_size)), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(out_size, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.cast(x, tf.float32), w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(out_size, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "get_weights(int(x.shape[-1]), out_size)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_54": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_55": {
                "variable": {
                    "value": "bpsk_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(mods, 'BPSK')",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(tf.shape(acc), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros(tf.shape(acc), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "variable": {
                    "value": "acc_bpsk",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(acc, bpsk_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_57": {
                "variable": {
                    "value": "acc_bpsk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "acc_bpsk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(acc, bpsk_mask))",
                            "Call"
                        ],
                        [
                            "tf.divide(acc_bpsk, tf.reduce_sum(bpsk_mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(bpsk_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "acc_pam4",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(acc, pam4_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_60": {
                "variable": {
                    "value": "acc_pam4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "acc_pam4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(acc, pam4_mask))",
                            "Call"
                        ],
                        [
                            "tf.divide(acc_pam4, tf.reduce_sum(pam4_mask))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(pam4_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(b, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "HtH",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "variable": {
                    "value": "HtH",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.cast(tf.equal(x, y), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(A, tf.expand_dims(b, axis=2), transpose_a=transpose_a)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_34": {
                "input": {
                    "value": "tf.abs(y - constellation)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.equal(x, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "shape": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([in_size, out_size], stddev=np.sqrt(1.0 / (in_size + out_size)), dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "get_weights(int(x.shape[-1]), out_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_54": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_matvec_mul(HtHinv, Hty)",
                            "Call"
                        ],
                        [
                            "batch_matvec_mul(HtHinv, Hty)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, shape=[-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(tf.cast(x, tf.float32), w), b)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_55": {
                "x": {
                    "value": "mods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mods",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "BPSK",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_55": {
                "shape": {
                    "value": "tf.shape(acc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "shape": {
                    "value": "tf.shape(acc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_56": {
                "x": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([mmse_accuracy, accuracy], feed_dict)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.equal(x, y), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bpsk_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mods, 'BPSK'), tf.ones(tf.shape(acc), dtype=tf.float32), tf.zeros(tf.shape(acc), dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "bpsk_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(mods, 'BPSK'), tf.ones(tf.shape(acc), dtype=tf.float32), tf.zeros(tf.shape(acc), dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_59": {
                "x": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([mmse_accuracy, accuracy], feed_dict)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.equal(x, y), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pam4_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - bpsk_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "pam4_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - bpsk_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_67": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(out_size, dtype=tf.float32))",
                            "Call"
                        ],
                        [
                            "get_weights(int(x.shape[-1]), out_size)",
                            "Call"
                        ],
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_156": {
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_179": {
                "a": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_34": {
                "x": {
                    "value": "y - constellation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_40": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_matvec_mul(HtHinv, Hty)",
                            "Call"
                        ],
                        [
                            "batch_matvec_mul(HtHinv, Hty)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y, shape=[-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(tf.cast(x, tf.float32), w), b)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_matvec_mul(HtHinv, Hty)",
                            "Call"
                        ],
                        [
                            "batch_matvec_mul(HtHinv, Hty)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([mmse_accuracy, accuracy], feed_dict)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.equal(x, y), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_184": {
                "tensor": {
                    "value": "tf.square(noise_sigma) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_184": {
                "num_rows": {
                    "value": "tf.shape(H)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[tf.shape(H)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_184": {
                "x": {
                    "value": "noise_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noise_sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_184": {
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ],
                        [
                            "H",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}