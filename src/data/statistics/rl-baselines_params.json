{
    "rl_baselines/baselines.py": {
        "torch": {
            "Tensor_14": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/core.py": {
        "torch": {
            "from_numpy_163": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_266": {
                "variable": {
                    "value": "poptimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "pi_lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_269": {
                "variable": {
                    "value": "voptimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "value.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "vf_lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_286": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_logger(logger)",
                            "Call"
                        ],
                        [
                            "os.path.join('runs', current_time)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "self.obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_env, num_steps + 1, *obs_shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "self.acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_env, num_steps, *act_shape)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "self.rews",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_env, num_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "self.dones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_env, num_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*rets.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "stats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.num_env, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "episodes.rews[:, step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rews",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "episodes.dones[:, step]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_361": {
                "obj": {
                    "value": "policy_update",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(logdir, 'run.log')",
                            "Call"
                        ],
                        [
                            "os.path.join(logdir, 'checkpoint.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "(self.num_env, self.num_steps)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "*curr_rets.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/model_updates.py": {
        "torch": {
            "mse_loss_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(obs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/models.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h * w * sizes[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-0.5 * torch.ones(*action_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_9": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h * w * sizes[-1]",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Categorical_101": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_114": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "torch.diag(self.log_std.exp())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_114": {
                "input": {
                    "value": "self.log_std.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_110": {
                "*size": {
                    "value": "*action_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/ppo.py": {
        "torch": {
            "clamp_15": {
                "variable": {
                    "value": "clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diff.exp()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - clip_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + clip_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_19": {
                "input": {
                    "value": "ratio * weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/rcrc.py": {
        "torch": {
            "normal_29": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros((n, m))",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones((n, m))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_34": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(mean=torch.zeros((n, m)), std=torch.ones((n, m)))",
                            "Call"
                        ],
                        [
                            "u * s_ * v.t()",
                            "BinOp"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ],
                        [
                            "obs.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "obs / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SummaryWriter_142": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "31",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.W_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "self.W_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1665 * n_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_conv, x_esn, torch.ones((B, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, self.n_acts)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, self.n_acts))",
                            "Call"
                        ],
                        [
                            "Normal(loc=out, scale=torch.ones(*out.shape) * 1e-08)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.ones(*out.shape) * 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(obs).float()",
                            "Call"
                        ],
                        [
                            "obs.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "obs / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_62": {
                "variable": {
                    "value": "x_esn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_in(x_conv_flat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_64": {
                "variable": {
                    "value": "x_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_in(x_conv_flat) + self.W(self.x_esn)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "A_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "W_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.W_outs[i].reshape(1665, self.n_acts)).float()",
                            "Call"
                        ],
                        [
                            "self.W_out.reshape(1665, self.n_acts)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_102": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.tanh(A_hat[0]), (torch.tanh(A_hat[1]) + 1) / 2.0, torch.clamp(torch.tanh(A_hat[2]), 0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "policy_update.W_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(policy_update.W_outs[aM]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "(n, m)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "(n, m)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "1665 * n_acts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "W_out",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.W_outs[i].reshape(1665, self.n_acts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "policy_update",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(logdir, 'checkpoint.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_91": {
                "*size": {
                    "value": "(B, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "policy_update.W_outs[aM]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "input": {
                    "value": "A_hat[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_106": {
                "input": {
                    "value": "torch.tanh(A_hat[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_112": {
                "*size": {
                    "value": "*out.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tanh_106": {
                "input": {
                    "value": "A_hat[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "input": {
                    "value": "A_hat[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/rdn.py": {
        "torch": {
            "Adam_504": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "global_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.int_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2304",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.fc_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_acts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc_value_int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc_value_ext",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Categorical_171": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_logits(X)",
                            "Call"
                        ],
                        [
                            "logits.reshape(E, self.n_acts)",
                            "Call"
                        ],
                        [
                            "logits.reshape(E, B, self.n_acts)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_179": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "(obs - obs_mean) / (obs_std + 1e-05)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(obs, -5.0, 5.0)",
                            "Call"
                        ],
                        [
                            "episodes.obs",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_205": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_267": {
                "variable": {
                    "value": "rffs_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.rff_ext.update(rew) for rew in rews_ext.t()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_272": {
                "variable": {
                    "value": "rffs_int",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.rff_int.update(rew) for rew in rews_int.t()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mse_loss_295": {
                "variable": {
                    "value": "loss_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_values_int",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "returns_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_int + values_int[:, :-1, ...]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_296": {
                "variable": {
                    "value": "loss_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_values_ext",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "returns_ext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adv_ext + values_ext[:, :-1, ...]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_356": {
                "variable": {
                    "value": "obs_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.obs_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_388": {
                "variable": {
                    "value": "old_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "old_dist.logits[:, :-1, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_269": {
                "input": {
                    "value": "self.rms_ext.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_274": {
                "input": {
                    "value": "self.rms_int.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_320": {
                "input": {
                    "value": "X_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_net(obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "layer['out_channels']",
                            "Subscript"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "layer['out_channels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3136",
                            "int"
                        ],
                        [
                            "out_",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "layer['out_channels']",
                            "Subscript"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "layer['out_channels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_327": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/test.py": {
        "torch": {
            "Tensor_32": {
                "variable": {
                    "value": "episodes.obs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_33": {
                "variable": {
                    "value": "episodes.rews[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "episodes.dones[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "episodes.acts[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_37": {
                "variable": {
                    "value": "episodes.obs[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_40": {
                "variable": {
                    "value": "episodes.rews[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_41": {
                "variable": {
                    "value": "episodes.acts[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_42": {
                "variable": {
                    "value": "episodes.dones[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_49": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(2, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_70": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baselines/test_agent.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "policy_update",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "policy_update_filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}