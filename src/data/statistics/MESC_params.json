{
    "MESC[TF2].py": {
        "sklearn": {
            "normalize_210": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U[:, ::-1]",
                            "Subscript"
                        ],
                        [
                            "U.dot(S)",
                            "Call"
                        ],
                        [
                            "normalize(U, norm='l2', axis=1)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SpectralClustering_216": {
                "variable": {
                    "value": "spectral",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "eigen_solver": {
                    "value": "arpack",
                    "type": "str",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "assign_labels": {
                    "value": "discretize",
                    "type": "str",
                    "possible_values": []
                }
            },
            "contingency_matrix_228": {
                "variable": {
                    "value": "contingency_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_291": {
                "variable": {
                    "value": "nmi_x",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "label_all_subjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Label[i * num_sa:(i + num_class) * num_sa])",
                            "Call"
                        ],
                        [
                            "label_all_subjs - label_all_subjs.min() + 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(label_all_subjs)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_299": {
                "variable": {
                    "value": "ari_x",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "label_all_subjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Label[i * num_sa:(i + num_class) * num_sa])",
                            "Call"
                        ],
                        [
                            "label_all_subjs - label_all_subjs.min() + 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(label_all_subjs)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "y_x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "f1_score_303": {
                "variable": {
                    "value": "f1score_x",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label_all_subjs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Label[i * num_sa:(i + num_class) * num_sa])",
                            "Call"
                        ],
                        [
                            "label_all_subjs - label_all_subjs.min() + 1",
                            "BinOp"
                        ],
                        [
                            "np.squeeze(label_all_subjs)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_x",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "disable_eager_execution_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_input[0], self.n_input[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "self.z_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_57": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.compat.v1.trainable_variables() if not v.name.startswith('Coef')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "self.recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.x_r_ft, self.x), 2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_71": {
                "variable": {
                    "value": "self.merged_summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "self.optimizer_ssc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_73": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_74": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_75": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./pretrain-model-COIL40/ft/logs' + TIMESTAMP",
                            "BinOp"
                        ],
                        [
                            "'./pretrain/logs'",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.compat.v1.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "all_weights[enc_w0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_w0",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "all_weights[enc_b0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[0]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[0], 1, self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_107": {
                "variable": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b0']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_133": {
                "variable": {
                    "value": "Coef",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0001 * tf.ones([self.batch_size, self.batch_size], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "z_ssc",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Variable(0.0001 * tf.ones([self.batch_size, self.batch_size], tf.float32), name='Coef')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.z_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_46": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.random_normal(shape=tf.shape(self.x), mean=0, stddev=0.2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "self_expressive_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.cost_ssc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "coefficient_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reg_ssc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "reconstruction loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "all_weights[enc_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_name_wi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'enc_w' + str(iter_i)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[iter_i], self.kernel_size[iter_i], self.n_hidden[iter_i - 1], self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "all_weights[enc_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[iter_i]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "all_weights[dec_name_wi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_name_wi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ],
                        [
                            "'dec_w' + str(iter_i - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[n_layers - iter_i], self.kernel_size[n_layers - iter_i], self.n_hidden[n_layers - iter_i - 1], self.n_hidden[n_layers - iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.compat.v1.keras.initializers.he_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "self.reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "all_weights[dec_name_bi]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self.n_hidden[n_layers - iter_i - 1]], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_113": {
                "variable": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "weights['enc_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_127": {
                "variable": {
                    "value": "layer3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weights['dec_b' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_128": {
                "variable": {
                    "value": "layer3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layeri",
                            "variable"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_60": {
                "x": {
                    "value": "tf.subtract(self.x_r_ft, self.x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "tf.multiply(self.Coef, tf.math.log(tf.compat.v1.clip_by_value(Coef, clip_value_min=1e-12, clip_value_max=1.0)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "tf.pow(tf.subtract(self.z_conv, self.z_ssc), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "shape": {
                    "value": "[self.n_hidden[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weights['enc_w0']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_60": {
                "x": {
                    "value": "self.x_r_ft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_62": {
                "x": {
                    "value": "self.Coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.log(tf.compat.v1.clip_by_value(Coef, clip_value_min=1e-12, clip_value_max=1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_64": {
                "x": {
                    "value": "tf.subtract(self.z_conv, self.z_ssc)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_88": {
                "shape": {
                    "value": "[self.n_hidden[iter_i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "shape": {
                    "value": "[self.n_hidden[n_layers - iter_i - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "he_normal_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_113": {
                "input": {
                    "value": "layeri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, weights['enc_w0'], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b0'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(layeri, weights['enc_w' + str(iter_i)], strides=[1, 2, 2, 1], padding='SAME'), weights['enc_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layeri)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['enc_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_127": {
                "input": {
                    "value": "layer3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layeri",
                            "variable"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "tf.add(tf.nn.conv2d_transpose(layer3, weights['dec_w' + str(iter_i)], tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]), strides=[1, 2, 2, 1], padding='SAME'), weights['dec_b' + str(iter_i)])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights['dec_w' + str(iter_i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "tf.stack([tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_133": {
                "shape": {
                    "value": "[self.batch_size, self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.compat.v1.clip_by_value(Coef, clip_value_min=1e-12, clip_value_max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_64": {
                "x": {
                    "value": "self.z_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.z_ssc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "he_normal_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "he_normal_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_127": {
                "values": {
                    "value": "[tf.shape(self.x)[0], shape_de[1], shape_de[2], shape_de[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_46": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_62": {
                "t": {
                    "value": "Coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Variable(0.0001 * tf.ones([self.batch_size, self.batch_size], tf.float32), name='Coef')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_127": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}