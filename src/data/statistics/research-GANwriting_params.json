{
    "blocks.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_184": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_77": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_115": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_79": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_89": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_117": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_128": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_140": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_175": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_119": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_142": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "fid_folder/fid_score_crop64x64.py": {
        "torch": {
            "from_numpy_83": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cv2.imread(str(f)).astype(np.float32) for f in files[start:end]]",
                            "ListComp"
                        ],
                        [
                            "[i[:, :64] for i in images]",
                            "ListComp"
                        ],
                        [
                            "np.array([cv2.resize(i, (64, 64), interpolation=cv2.INTER_AREA) for i in images])",
                            "Call"
                        ],
                        [
                            "images.transpose((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "images / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_92": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "fid_folder/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "load_data.py": {
        "torch": {}
    },
    "loss_tro.py": {
        "torch": {
            "LogSoftmax_33": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_6": {
                "input": {
                    "value": "torch.abs(predict - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_12": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_25": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.detach() == self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_49": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_6": {
                "input": {
                    "value": "predict - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_49": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "main_run.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "sort_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_THREAD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "sort_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_THREAD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "variable": {
                    "value": "train_wid",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_wid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(train_wid, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_wid)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "train_img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(train_img, dtype='float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "train_img_width",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_img_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(train_img_width, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_img_width)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(train_label, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "img_xts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_xts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(img_xts, dtype='float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_xts)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "label_xts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_xts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(label_xts, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_xts)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "label_xts_swap",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_xts_swap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "np.array(label_xts_swap, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label_xts_swap)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "dis_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in dis_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 * 0.0001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "gen_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in gen_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 * 0.0001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "rec_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in rec_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 * 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_195": {
                "variable": {
                    "value": "cla_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in cla_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_cla",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 * 1e-05",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_150": {
                "f": {
                    "value": "modelFile_o_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_181": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_weights/contran-' + str(CurriculumModelID) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_208": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "folder_weights + '/contran-%d.model' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "modules_tro.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "variable": {
                    "value": "pred_label_swap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.cnn_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_f",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.cnn_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_135": {
                "variable": {
                    "value": "self.bce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_fake.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.final_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_real.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.final_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_fake.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.final_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "self.cnn_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_f",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.cnn_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_185": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.linear_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "feat_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat_xs, feat_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_219": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "60",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(text_max_len * embed_size, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "60",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "final_res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res] * height_reps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, img, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text * width_reps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "in_features": {
                    "value": "text_max_len * embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_222": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_225": {
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_39": {
                "input": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(pred_label, 1, dim=-1)[1].squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pred_label.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_41": {
                "input": {
                    "value": "pred_label_swap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(pred_label_swap, 1, dim=-1)[1].squeeze(-1)",
                            "Call"
                        ],
                        [
                            "pred_label_swap.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_123": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_124": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_173": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_174": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_252": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "tokens['PAD_TOKEN']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_282": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_309": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'recognizer/save_weights/seq2seq-72.model_5.79.bak'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "network_tro.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "l_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH] * batch_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/LogMetric.py": {
        "torch": {}
    },
    "recognizer/loadData4_vgg.py": {
        "torch": {}
    },
    "recognizer/main_torch_latest.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogSoftmax_91": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_109": {
                "variable": {
                    "value": "loss_f",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "sort_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_THREAD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "sort_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_THREAD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "sort_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_THREAD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_test",
                    "type": "variable",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "sort_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size_nuevo",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NUM_THREAD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "train_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(train_in, dtype='float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_in)",
                            "Call"
                        ],
                        [
                            "train_in[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_163": {
                "variable": {
                    "value": "train_out",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(train_out, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_out)",
                            "Call"
                        ],
                        [
                            "train_out[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "train_in_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_in_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(train_in_len, dtype='int64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_in_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_285": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "seq2seq.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * 0.0001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MultiStepLR_290": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(seq2seq.parameters(), lr=learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "lr_milestone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[20, 40, 60, 80, 100]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "KLDivLoss_70": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_83": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.detach() == self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "eye_104": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_196": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_l.reshape(-1, vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "train_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_out.permute(1, 0)[1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "tokens['PAD_TOKEN']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_241": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_weights/seq2seq-' + str(modelID) + '.model'",
                            "BinOp"
                        ],
                        [
                            "'save_weights/seq2seq-' + str(CurriculumModelID) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "1 - noise.sum(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_224": {
                "variable": {
                    "value": "loss_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_t.reshape(-1, vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_out.permute(1, 0)[1:].reshape(-1)",
                            "Call"
                        ],
                        [
                            "test_out.permute(1, 0)[1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "tokens['PAD_TOKEN']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_261": {
                "variable": {
                    "value": "loss_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_t.reshape(-1, vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_out.permute(1, 0)[1:].reshape(-1)",
                            "Call"
                        ],
                        [
                            "test_out.permute(1, 0)[1:].reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "tokens['PAD_TOKEN']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_284": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'save_weights/seq2seq-' + str(modelID) + '.model'",
                            "BinOp"
                        ],
                        [
                            "'save_weights/seq2seq-' + str(CurriculumModelID) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_317": {
                "obj": {
                    "value": "seq2seq.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "folder_weights + '/seq2seq-%d.model' % epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/models/attention.py": {
        "torch": {
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_19": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.hidden_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.encoder_output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "addMask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[addMask] * hidden.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "addMask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_61": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.hidden_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_65": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "addMask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[addMask] * hidden.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "addMask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_113": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.hidden_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.encoder_output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_117": {
                "variable": {
                    "value": "self.conv1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.prev_attn_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_119": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_120": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "addMask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[addMask] * hidden.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_147": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "hidden.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.bmm(hidden, addMask)",
                            "Call"
                        ],
                        [
                            "hidden.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "addMask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1 / self.decoder_layer] * self.decoder_layer).view(1, self.decoder_layer, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([addMask] * hidden.shape[0], dim=0)",
                            "Call"
                        ],
                        [
                            "Variable(addMask.cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "attn_energy.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "attn_energy.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "attn_energy.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/models/decoder.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embed_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_output.permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(hidden, encoder_output, enc_len, prev_attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_51": {
                "variable": {
                    "value": "in_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embed_char, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.context_shrink",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_size * self.tradeoff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRU_25": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_size * self.tradeoff + self.embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embed_size + self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_45": {
                "variable": {
                    "value": "top1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_char",
                    "type": "variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/models/encoder_vgg.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer(in_data)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out)",
                            "Call"
                        ],
                        [
                            "out.permute(3, 0, 2, 1)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, batch_size, self.height // 16 * 512)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(out, src_len.tolist(), batch_first=False)",
                            "Call"
                        ],
                        [
                            "self.output_proj(out_short)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_len.tolist()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_78": {
                "variable": {
                    "value": "(output, output_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_out_merge(output)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "matrix_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "matrix_new.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_33": {
                "variable": {
                    "value": "self.layer_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.height // 16 * 512 * self.step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.height // 16 * 512",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "out_short",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "time_step // self.step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_data.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_feature * self.step",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "out_short[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "part_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[out[j] for j in range(i * self.step, (i + 1) * self.step)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/models/seq2seq.py": {
        "torch": {
            "device_8": {
                "variable": {
                    "value": "cpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_9": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.output_max_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_enc.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "out_enc.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_58": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/models/vgg_tro_channel1.py": {
        "torch": {
            "Sequential_70": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_163": {
                "variable": {
                    "value": "total_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_urls['vgg16_bn']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "recognizer/models/vgg_tro_channel3.py": {
        "torch": {
            "Sequential_70": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_164": {
                "variable": {
                    "value": "total_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_urls['vgg16_bn']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tt.test_single_writer.4_scenarios.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(final_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([np.array(label_padding(label, num_tokens)) for label in texts])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_139": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.rec(xg, label, img_width=torch.from_numpy(np.array([IMG_WIDTH])))",
                            "Call"
                        ],
                        [
                            "torch.topk(pred, 1, dim=-1)[1].squeeze()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "list(filter(lambda x: x != j, pred))",
                            "Call"
                        ],
                        [
                            "''.join([index2letter[c - num_tokens] for c in pred])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tt.word_ladder.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(final_imgs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([np.array(label_padding(label, num_tokens)) for label in texts])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "np.array([IMG_WIDTH])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_103": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.rec(xg, label, img_width=torch.from_numpy(np.array([IMG_WIDTH])))",
                            "Call"
                        ],
                        [
                            "torch.topk(pred, 1, dim=-1)[1].squeeze()",
                            "Call"
                        ],
                        [
                            "pred.cpu().numpy().tolist()",
                            "Call"
                        ],
                        [
                            "list(filter(lambda x: x != j, pred))",
                            "Call"
                        ],
                        [
                            "''.join([index2letter[c - num_tokens] for c in pred])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "vgg_tro_channel3_modi.py": {
        "torch": {
            "Sequential_45": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NUM_CHANNEL",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_41": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}