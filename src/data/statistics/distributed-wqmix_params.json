{
    "model.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_12": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "config.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "config.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.hyper_b_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.state_dim, self.embed_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_65": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w_1(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_69": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.bmm(agent_qs, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_71": {
                "variable": {
                    "value": "w_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w_final(states)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.hyper_w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim * self.n_agents",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.hyper_w_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.hyper_w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.state_dim, hypernet_embed)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.hyper_w_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.state_dim, hypernet_embed)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_76": {
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.elu(th.bmm(agent_qs, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_final",
                    "type": "Call",
                    "possible_values": [
                        [
                            "th.abs(self.hyper_w_final(states))",
                            "Call"
                        ],
                        [
                            "w_final.view(-1, self.embed_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hypernet_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hypernet_embed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "hypernet_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hypernet_embed",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_dim * self.n_agents",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "self.state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hypernet_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hypernet_embed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "hypernet_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.hypernet_embed",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_69": {
                "input": {
                    "value": "agent_qs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "agent_qs.view(-1, 1, self.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "th.abs(self.hyper_w_1(states))",
                            "Call"
                        ],
                        [
                            "w1.view(-1, self.n_agents, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "q_learner.py": {
        "torch": {
            "RMSprop_19": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "self.rnn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, config.n_agents, config.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "self.rnn_targ_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, config.n_agents, config.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "batch[u]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch['u']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_43": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "q_targ_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targ_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_targ_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(batch_size * config.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "inputs_next",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(batch_size * config.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_53": {
                "variable": {
                    "value": "target_max_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_targ_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_targ_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "next_max_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_targ_values_detach[:, :].max(dim=3, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_53": {
                "variable": {
                    "value": "target_max_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__86": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "u_onehot[:, time_step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "replay_buffer.py": {
        "torch": {
            "as_tensor_54": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device(config.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_54": {
                "type": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "worker.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs.copy()",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, last_action))",
                            "Call"
                        ],
                        [
                            "np.hstack((inputs, agent_id))",
                            "Call"
                        ],
                        [
                            "torch.tensor(inputs, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "avail_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "avail_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(avail_actions, dtype=torch.float32).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "avail_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, config.n_agents, config.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_47": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "wq_learner.py": {
        "torch": {
            "set_num_threads_3": {
                "int": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_21": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.rnn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, config.n_agents, config.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.rnn_targ_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(episode_num, config.n_agents, config.rnn_hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "batch[u]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch['u']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_45": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "q_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "q_targ_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_targ_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_targ_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(batch_size * config.n_agents, -1) for x in inputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "inputs_next",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(batch_size * config.n_agents, -1) for x in inputs_next]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_55": {
                "variable": {
                    "value": "target_max_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_targ_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_targ_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "next_max_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_targ_values_detach[:, :].max(dim=3, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "target_max_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_71": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "td_error < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(td_error) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ws",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones_like(td_error) * w_to_use",
                            "BinOp"
                        ],
                        [
                            "torch.where(td_error < 0, torch.ones_like(td_error) * 1, ws)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(td_error) * w_to_use",
                            "BinOp"
                        ],
                        [
                            "torch.where(is_max_action | qtot_larger, torch.ones_like(td_error) * 1, ws)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_75": {
                "variable": {
                    "value": "target_max_agent_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_targ_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(q_targ_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_max_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_values_detach[:, :].max(dim=3, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "target_max_agent_qvals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_79": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_max_action | qtot_larger",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(td_error) * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ws",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.ones_like(td_error) * w_to_use",
                            "BinOp"
                        ],
                        [
                            "torch.where(td_error < 0, torch.ones_like(td_error) * 1, ws)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(td_error) * w_to_use",
                            "BinOp"
                        ],
                        [
                            "torch.where(is_max_action | qtot_larger, torch.ones_like(td_error) * 1, ws)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__90": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "self.rnnagent.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./checkpoint/rnnagent.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "self.mixer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "./checkpoint/mixer.pth",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_135": {
                "n": {
                    "value": "config.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_136": {
                "n": {
                    "value": "config.n_agents",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_136": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_70": {
                "input": {
                    "value": "td_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_total - targets.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "td_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_total - targets.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_131": {
                "input": {
                    "value": "u_onehot[:, time_step]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "td_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_total - targets.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_79": {
                "input": {
                    "value": "td_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_total - targets.detach()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}