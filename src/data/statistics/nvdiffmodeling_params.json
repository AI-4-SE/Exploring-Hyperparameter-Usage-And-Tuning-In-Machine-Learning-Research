{
    "src/material.py": {
        "torch": {
            "pad_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, (0, full_res[1] - x.shape[3], 0, full_res[0] - x.shape[2]), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, full_res[1] - x.shape[3], 0, full_res[0] - x.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "tex_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((util.scale_img_nhwc(mat[tex].data, tuple(max_res)) for mat in materials))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "material[prefix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "tuple((float(d) for d in data))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/mesh.py": {
        "torch": {
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_117": {
                "input": {
                    "value": "ref_aabb[1] - ref_aabb[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "input": {
                    "value": "attr[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "bone_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imesh.bone_mtx[t_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "mesh_a.bone_mtx",
                            "Attribute"
                        ],
                        [
                            "torch.cat((mesh_a.bone_mtx, mesh_b.bone_mtx), dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_185": {
                "variable": {
                    "value": "bone_mtx_it",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(bone_mtx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_191": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imesh.v_weights",
                            "Attribute"
                        ],
                        [
                            "torch.abs(weights)",
                            "Call"
                        ],
                        [
                            "weights / torch.sum(weights, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_265": {
                "variable": {
                    "value": "face_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1 - v0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "v2 - v0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "v_nrm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imesh.v_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_274": {
                "variable": {
                    "value": "v_nrm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "util.dot(v_nrm, v_nrm) > 1e-20",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "v_nrm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(imesh.v_pos)",
                            "Call"
                        ],
                        [
                            "torch.where(util.dot(v_nrm, v_nrm) > 1e-20, v_nrm, torch.tensor([0.0, 0.0, 1.0], dtype=torch.float32, device='cuda'))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor([0.0, 0.0, 1.0], dtype=torch.float32, device='cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_305": {
                "variable": {
                    "value": "tangents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imesh.v_nrm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_306": {
                "variable": {
                    "value": "tansum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imesh.v_nrm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_95": {
                "input": {
                    "value": "mesh.v_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_95": {
                "input": {
                    "value": "mesh.v_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_103": {
                "input": {
                    "value": "vmax - vmin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_148": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imesh.v_weights",
                            "Attribute"
                        ],
                        [
                            "torch.abs(weights)",
                            "Call"
                        ],
                        [
                            "weights / torch.sum(weights, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "attr_vtx_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] * n_attrs",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_432": {
                "variable": {
                    "value": "vd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imesh.v_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_433": {
                "variable": {
                    "value": "vd_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imesh.v_pos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "vd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[imesh.v_tex.shape[0], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "vd_n",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[imesh.v_tex.shape[0], 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_185": {
                "input": {
                    "value": "bone_mtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imesh.bone_mtx[t_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "mesh_a.bone_mtx",
                            "Attribute"
                        ],
                        [
                            "torch.cat((mesh_a.bone_mtx, mesh_b.bone_mtx), dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_192": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imesh.v_weights",
                            "Attribute"
                        ],
                        [
                            "torch.abs(weights)",
                            "Call"
                        ],
                        [
                            "weights / torch.sum(weights, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "all_210": {
                "input": {
                    "value": "torch.isfinite(v_pos_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "all_279": {
                "input": {
                    "value": "torch.isfinite(self.v_nrm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_318": {
                "condition": {
                    "value": "denom > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.clamp(denom, min=1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.clamp(denom, max=-1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_334": {
                "input": {
                    "value": "torch.isfinite(tangents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "self.new_tri_idx[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "new_tri_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "new_tri_idx + [[v0, h0, h2], [h0, v1, h1], [h1, v2, h2], [h0, h1, h2]]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "v_attr[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attr, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_490": {
                "input": {
                    "value": "mesh_a.bone_mtx == mesh_b.bone_mtx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_492": {
                "variable": {
                    "value": "v_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mesh_a.v_weights, mesh_b.v_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "bone_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mesh_a.bone_mtx, mesh_b.bone_mtx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_497": {
                "variable": {
                    "value": "v_wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh_a.v_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, mesh_b.v_weights.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_498": {
                "variable": {
                    "value": "v_wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mesh_b.v_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "[mesh_a.v_weights.shape[1], 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_499": {
                "variable": {
                    "value": "v_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v_wa, v_wb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_133": {
                "condition": {
                    "value": "b_size > 1e-06",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_vmax - b_vmin",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(b_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_210": {
                "input": {
                    "value": "v_pos_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_skin_hvec(bone_mtx, weights, util.to_hvec(imesh.v_pos, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "all_211": {
                "input": {
                    "value": "torch.isfinite(v_nrm_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_212": {
                "input": {
                    "value": "torch.isfinite(v_tng_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_279": {
                "input": {
                    "value": "self.v_nrm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_318": {
                "input": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uve1[..., 0:1] * uve2[..., 1:2] - uve1[..., 1:2] * uve2[..., 0:1]",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "-1e-06",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_324": {
                "input": {
                    "value": "tang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nom / torch.where(denom > 0.0, torch.clamp(denom, min=1e-06), torch.clamp(denom, max=-1e-06))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isfinite_334": {
                "input": {
                    "value": "tangents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(imesh.v_nrm)",
                            "Call"
                        ],
                        [
                            "tangents / tansum",
                            "BinOp"
                        ],
                        [
                            "util.safe_normalize(tangents)",
                            "Call"
                        ],
                        [
                            "util.safe_normalize(tangents - util.dot(tangents, imesh.v_nrm) * imesh.v_nrm)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_133": {
                "input": {
                    "value": "b_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_vmax - b_vmin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isfinite_211": {
                "input": {
                    "value": "v_nrm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_skin_hvec(bone_mtx_it, weights[self.nrm_remap, ...], util.to_hvec(imesh.v_nrm, 0))",
                            "Call"
                        ],
                        [
                            "util.safe_normalize(v_nrm_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_212": {
                "input": {
                    "value": "v_tng_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_skin_hvec(bone_mtx, weights[self.tng_remap, ...], util.to_hvec(imesh.v_tng, 0))",
                            "Call"
                        ],
                        [
                            "util.safe_normalize(v_tng_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_372": {
                "data": {
                    "value": "edge_fetch_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "edge_fetch_b + [v1]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_442": {
                "input": {
                    "value": "v_displ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v + n * self.scale * util.tex_2d(self.displacement_map, t)",
                            "BinOp"
                        ],
                        [
                            "v + n * self.scale * util.tex_2d(self.displacement_map, t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_456": {
                "input": {
                    "value": "v_displ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v + n * self.scale * util.tex_2d(self.displacement_map, t)",
                            "BinOp"
                        ],
                        [
                            "v + n * self.scale * util.tex_2d(self.displacement_map, t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "(a_idx, b_idx + a.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/obj.py": {
        "torch": {
            "tensor_124": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(vertices, dtype=torch.float32, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(faces, dtype=torch.int64, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "v_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load(os.path.splitext(filename)[0] + '.weights.npy')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "bone_mtx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.load(os.path.splitext(filename)[0] + '.bones.npy')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "texcoords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(texcoords, dtype=torch.float32, device='cuda') if len(texcoords) > 0 else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(normals, dtype=torch.float32, device='cuda') if len(normals) > 0 else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "tfaces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(tfaces, dtype=torch.int64, device='cuda') if texcoords is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "nfaces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(nfaces, dtype=torch.int64, device='cuda') if normals is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[0.5, 0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[0.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/regularizer.py": {
        "torch": {
            "tensor_38": {
                "variable": {
                    "value": "ix_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ix_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ix_i, dtype=torch.int64, device='cuda')",
                            "Call"
                        ],
                        [
                            "ix_i + [i] * m",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "ix_j",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ix_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ix_j, dtype=torch.int64, device='cuda')",
                            "Call"
                        ],
                        [
                            "ix_j + vtx_n[i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x_j - x_i) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "self.ix_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ix_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ix_i, dtype=torch.int64, device='cuda')",
                            "Call"
                        ],
                        [
                            "ix_i + [i] * m",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "self.ix_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ix_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ix_j, dtype=torch.int64, device='cuda')",
                            "Call"
                        ],
                        [
                            "ix_j + vtx_n[i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_86": {
                "variable": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x_j - x_i) ** 2 + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "self.ix_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ix_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ix_i, dtype=torch.int64, device='cuda')",
                            "Call"
                        ],
                        [
                            "ix_i + [i] * m",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "self.ix_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ix_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(ix_j, dtype=torch.int64, device='cuda')",
                            "Call"
                        ],
                        [
                            "ix_j + vtx_n[i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "self.edge_tri_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "shared_edge_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "shared_edge_idx + [edge]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_192": {
                "variable": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "util.dot(n0, n1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "var_89": {
                "input": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt((x_j - x_i) ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((x_j - x_i) ** 2 + 1e-20)",
                            "Call"
                        ],
                        [
                            "(x_j - x_i) * self.w_ij",
                            "BinOp"
                        ],
                        [
                            "util.segment_sum(term, self.ix_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(util.dot(n0, n1), min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "(1.0 - term) * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_146": {
                "input": {
                    "value": "term ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_195": {
                "input": {
                    "value": "torch.abs(term)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "w_ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_ij + [1.0 / m] * m",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_185": {
                "input": {
                    "value": "v1 - v0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "v2 - v0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_195": {
                "input": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt((x_j - x_i) ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((x_j - x_i) ** 2 + 1e-20)",
                            "Call"
                        ],
                        [
                            "(x_j - x_i) * self.w_ij",
                            "BinOp"
                        ],
                        [
                            "util.segment_sum(term, self.ix_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(util.dot(n0, n1), min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "(1.0 - term) * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt((x_j - x_i) ** 2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt((x_j - x_i) ** 2 + 1e-20)",
                            "Call"
                        ],
                        [
                            "(x_j - x_i) * self.w_ij",
                            "BinOp"
                        ],
                        [
                            "util.segment_sum(term, self.ix_i)",
                            "Call"
                        ],
                        [
                            "torch.clamp(util.dot(n0, n1), min=-1.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "(1.0 - term) * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/render.py": {
        "torch": {
            "cat_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shaded_col, alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "accum_col",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, full_res, full_res, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "lerp_209": {
                "variable": {
                    "value": "accum_col",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "accum_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size=(1, full_res, full_res, 3), dtype=torch.float32, device='cuda')",
                            "Call"
                        ],
                        [
                            "background",
                            "Name"
                        ],
                        [
                            "torch.lerp(accum_col, color[..., 0:3], alpha)",
                            "Call"
                        ],
                        [
                            "dr.antialias(accum_col.contiguous(), rast, v_pos_clip, mesh.t_pos_idx.int())",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "color[..., 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kd[..., 3:4] if kd.shape[-1] == 4 else torch.ones_like(kd[..., 0:1])",
                            "IfExp"
                        ],
                        [
                            "(rast[..., -1:] > 0) * color[..., 3:4]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "kd[..., 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_121": {
                "input": {
                    "value": "v1 - v0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "v2 - v0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "mtx_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mtx_in, dtype=torch.float32, device='cuda') if not torch.is_tensor(mtx_in) else mtx_in",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x, dtype=torch.float32, device='cuda') if not torch.is_tensor(x) else x",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_tensor_182": {
                "obj": {
                    "value": "mtx_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mtx_in, dtype=torch.float32, device='cuda') if not torch.is_tensor(mtx_in) else mtx_in",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_122": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "face_normals.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_tensor_176": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x, dtype=torch.float32, device='cuda') if not torch.is_tensor(x) else x",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "src/renderutils/bsdf.py": {
        "torch": {
            "clamp_33": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_dot(view_vec, smooth_nrm) / NORMAL_THRESHOLD",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_64": {
                "variable": {
                    "value": "dp_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_dot(_reflect(wo, nrm), wi)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "variable": {
                    "value": "dp_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_dot(nrm, wi)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_75": {
                "variable": {
                    "value": "_cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "specular_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0 - specular_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "variable": {
                    "value": "_cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "specular_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0 - specular_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "_cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosTheta",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "specular_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "1.0 - specular_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_96": {
                "variable": {
                    "value": "_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "min_roughness * min_roughness",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_30": {
                "variable": {
                    "value": "smooth_nrm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "_dot(geom_nrm, view_vec) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "smooth_nrm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(_dot(geom_nrm, view_vec) > 0, smooth_nrm, -smooth_nrm)",
                            "Call"
                        ],
                        [
                            "_safe_normalize(smooth_nrm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-smooth_nrm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_31": {
                "variable": {
                    "value": "geom_nrm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "_dot(geom_nrm, view_vec) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "geom_nrm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(_dot(geom_nrm, view_vec) > 0, geom_nrm, -geom_nrm)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-geom_nrm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "lerp_34": {
                "input": {
                    "value": "geom_nrm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(_dot(geom_nrm, view_vec) > 0, geom_nrm, -geom_nrm)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "smooth_nrm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(_dot(geom_nrm, view_vec) > 0, smooth_nrm, -smooth_nrm)",
                            "Call"
                        ],
                        [
                            "_safe_normalize(smooth_nrm)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(_dot(view_vec, smooth_nrm) / NORMAL_THRESHOLD, min=0, max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_112": {
                "condition": {
                    "value": "frontfacing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(woDotN > specular_epsilon) & (wiDotN > specular_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F * D * G * 0.25 / torch.clamp(woDotN, min=specular_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_38": {
                "input": {
                    "value": "smooth_tng",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_safe_normalize(smooth_tng)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "smooth_nrm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(_dot(geom_nrm, view_vec) > 0, smooth_nrm, -smooth_nrm)",
                            "Call"
                        ],
                        [
                            "_safe_normalize(smooth_nrm)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_57": {
                "input": {
                    "value": "_dot(nrm, wi)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "input": {
                    "value": "woDotN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_dot(wo, nrm)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "specular_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_like_112": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F * D * G * 0.25 / torch.clamp(woDotN, min=specular_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_87": {
                "input": {
                    "value": "1 + alphaSqr * tanThetaSqr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "input": {
                    "value": "perturbed_nrm[..., 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_42": {
                "input": {
                    "value": "perturbed_nrm[..., 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/renderutils/loss.py": {
        "torch": {
            "abs_19": {
                "variable": {
                    "value": "nom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_16": {
                "condition": {
                    "value": "f > 0.0031308",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.pow(torch.clamp(f, min=0.0031308), 1.0 / 2.4) * 1.055 - 0.055",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "12.92 * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_21": {
                "input": {
                    "value": "nom / denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_26": {
                "input": {
                    "value": "nom / denom",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_34": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(img, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(target, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_20": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(target, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_30": {
                "input": {
                    "value": "torch.clamp(img, min=0, max=65535) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "torch.clamp(target, min=0, max=65535) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_16": {
                "input": {
                    "value": "torch.clamp(f, min=0.0031308)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / 2.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_40": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(img, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(target, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_16": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0031308",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(img, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "65535",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_31": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_tonemap_srgb(torch.log(torch.clamp(target, min=0, max=65535) + 1))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "65535",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/renderutils/ops.py": {
        "torch": {
            "load_61": {
                "name": {
                    "value": "renderutils_plugin",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "source_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(os.path.dirname(__file__), fn) for fn in source_files]",
                            "ListComp"
                        ]
                    ]
                },
                "extra_ldflags": {
                    "value": "ldflags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['-lcuda']",
                            "List"
                        ],
                        [
                            "['/DEFAULTLIB:cuda']",
                            "List"
                        ]
                    ]
                },
                "with_cuda": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_396": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(matrix, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_89": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_112": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_134": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_156": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_207": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_244": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_283": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_324": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_364": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_401": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_424": {
                "input": {
                    "value": "torch.isfinite(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_89": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_112": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_134": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_156": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isfinite_207": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_244": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_283": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_324": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_361": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_364": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_396": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_396": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_401": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_424": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bsdf_fresnel_shlick(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "_fresnel_shlick_func.apply(f0, f90, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_ndf_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_ndf_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_lambda_ggx(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "_lambda_ggx_func.apply(alphaSqr, cosTheta)",
                            "Call"
                        ],
                        [
                            "bsdf_masking_smith_ggx_correlated(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "_masking_smith_func.apply(alphaSqr, cosThetaI, cosThetaO)",
                            "Call"
                        ],
                        [
                            "bsdf_prepare_shading_normal(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "_prepare_shading_normal_func.apply(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl)",
                            "Call"
                        ],
                        [
                            "bsdf_lambert(nrm, wi)",
                            "Call"
                        ],
                        [
                            "_lambert_func.apply(nrm, wi)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr_specular(col, nrm, wo, wi, alpha, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_specular_func.apply(col, nrm, wo, wi, alpha, min_roughness)",
                            "Call"
                        ],
                        [
                            "bsdf_pbr(kd, arm, pos, nrm, view_pos, light_pos, min_roughness=min_roughness)",
                            "Call"
                        ],
                        [
                            "_pbr_bsdf_func.apply(kd, arm, pos, nrm, view_pos, light_pos, min_roughness)",
                            "Call"
                        ],
                        [
                            "image_loss_fn(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "_image_loss_func.apply(img, target, loss, tonemapper)",
                            "Call"
                        ],
                        [
                            "torch.sum(out) / (img.shape[0] * img.shape[1] * img.shape[2])",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(points, pad=(0, 1), mode='constant', value=1.0), torch.transpose(matrix, 1, 2))",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(points, matrix, True)",
                            "Call"
                        ],
                        [
                            "torch.matmul(torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0), torch.transpose(matrix, 1, 2))[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "_xfm_func.apply(vectors, matrix, False)",
                            "Call"
                        ],
                        [
                            "_plugin.fresnel_shlick_fwd(f0, f90, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.ndf_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambda_ggx_fwd(alphaSqr, cosTheta, False)",
                            "Call"
                        ],
                        [
                            "_plugin.masking_smith_fwd(alphaSqr, cosThetaI, cosThetaO, False)",
                            "Call"
                        ],
                        [
                            "_plugin.prepare_shading_normal_fwd(pos, view_pos, perturbed_nrm, smooth_nrm, smooth_tng, geom_nrm, two_sided_shading, opengl, False)",
                            "Call"
                        ],
                        [
                            "_plugin.lambert_fwd(nrm, wi, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_specular_fwd(col, nrm, wo, wi, alpha, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.pbr_bsdf_fwd(kd, arm, pos, nrm, view_pos, light_pos, min_roughness, False)",
                            "Call"
                        ],
                        [
                            "_plugin.image_loss_fwd(img, target, loss, tonemapper, False)",
                            "Call"
                        ],
                        [
                            "_plugin.xfm_fwd(points, matrix, isPoints, False)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_419": {
                "input": {
                    "value": "torch.nn.functional.pad(vectors, pad=(0, 1), mode='constant', value=0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.transpose(matrix, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_419": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "transpose_419": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/renderutils/tests/test_bsdf.py": {
        "torch": {
            "rand_26": {
                "variable": {
                    "value": "pos_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "view_pos_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "perturbed_nrm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "smooth_nrm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "smooth_tng_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "geom_nrm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_60": {
                "variable": {
                    "value": "f0_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_62": {
                "variable": {
                    "value": "f90_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_67": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_86": {
                "variable": {
                    "value": "alphaSqr_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_110": {
                "variable": {
                    "value": "alphaSqr_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_115": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_133": {
                "variable": {
                    "value": "alphaSqr_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_135": {
                "variable": {
                    "value": "cosThetaI_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_137": {
                "variable": {
                    "value": "cosThetaO_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_139": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_158": {
                "variable": {
                    "value": "normals_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_160": {
                "variable": {
                    "value": "wi_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_162": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_180": {
                "variable": {
                    "value": "col_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_182": {
                "variable": {
                    "value": "nrm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_184": {
                "variable": {
                    "value": "wi_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_186": {
                "variable": {
                    "value": "wo_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_188": {
                "variable": {
                    "value": "alpha_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_190": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_217": {
                "variable": {
                    "value": "kd_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_219": {
                "variable": {
                    "value": "arm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_221": {
                "variable": {
                    "value": "pos_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_223": {
                "variable": {
                    "value": "nrm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_225": {
                "variable": {
                    "value": "view_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_227": {
                "variable": {
                    "value": "light_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_229": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "torch.abs(ref - cuda) / torch.abs(ref + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_89": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_112": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_23": {
                "input": {
                    "value": "ref + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/renderutils/tests/test_loss.py": {
        "torch": {
            "clamp_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "65535",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "65535",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_36": {
                "variable": {
                    "value": "img_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "target_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_21": {
                "condition": {
                    "value": "f > 0.0031308",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.pow(torch.clamp(f, min=0.0031308), 1.0 / 2.4) * 1.055 - 0.055",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "12.92 * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(output, min=0, max=65535)",
                            "Call"
                        ],
                        [
                            "tonemap_srgb(torch.log(x + 1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, min=0, max=65535)",
                            "Call"
                        ],
                        [
                            "tonemap_srgb(torch.log(r + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_26": {
                "input": {
                    "value": "x + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "r + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_33": {
                "input": {
                    "value": "torch.abs(ref - cuda) / torch.abs(ref + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_21": {
                "input": {
                    "value": "torch.clamp(f, min=0.0031308)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / 2.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_21": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0031308",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_33": {
                "input": {
                    "value": "ref + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/renderutils/tests/test_mesh.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "65535",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(BATCH, RES, 4, dtype=DTYPE, device='cuda', requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.rand(BATCH, RES, 4, dtype=DTYPE, device='cuda', requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "65535",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "points_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_41": {
                "variable": {
                    "value": "mtx_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_43": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "points_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "mtx_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_65": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_24": {
                "condition": {
                    "value": "f > 0.0031308",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.pow(torch.clamp(f, min=0.0031308), 1.0 / 2.4) * 1.055 - 0.055",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "12.92 * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l1_loss_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(output, min=0, max=65535)",
                            "Call"
                        ],
                        [
                            "tonemap_srgb(torch.log(x + 1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(target, min=0, max=65535)",
                            "Call"
                        ],
                        [
                            "tonemap_srgb(torch.log(r + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_29": {
                "input": {
                    "value": "x + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "r + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_36": {
                "input": {
                    "value": "torch.abs(ref - cuda) / torch.abs(ref)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_24": {
                "input": {
                    "value": "torch.clamp(f, min=0.0031308)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / 2.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_24": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0031308",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_36": {
                "input": {
                    "value": "ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/renderutils/tests/test_perf.py": {
        "torch": {
            "rand_21": {
                "variable": {
                    "value": "kd_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_23": {
                "variable": {
                    "value": "arm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "pos_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "nrm_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "view_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "light_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_33": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "RES",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Event_35": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Event_36": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "enable_timing": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "synchronize_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/texture.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "imgdata",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "util.load_image(fn)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init.data",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(init, dtype=torch.float32, device='cuda')",
                            "Call"
                        ],
                        [
                            "init[None, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "util.scale_img_nhwc(init, res)",
                            "Call"
                        ],
                        [
                            "init[None, ...]",
                            "Subscript"
                        ],
                        [
                            "util.scale_img_nhwc(mip_chain[-1], new_size)",
                            "Call"
                        ],
                        [
                            "torch.tensor(init, dtype=torch.float32, device='cuda')",
                            "Call"
                        ],
                        [
                            "init[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init.data",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(init, dtype=torch.float32, device='cuda')",
                            "Call"
                        ],
                        [
                            "init[None, None, None, :]",
                            "Subscript"
                        ],
                        [
                            "util.scale_img_nhwc(init, res)",
                            "Call"
                        ],
                        [
                            "init[None, ...]",
                            "Subscript"
                        ],
                        [
                            "util.scale_img_nhwc(mip_chain[-1], new_size)",
                            "Call"
                        ],
                        [
                            "torch.tensor(init, dtype=torch.float32, device='cuda')",
                            "Call"
                        ],
                        [
                            "init[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "grid_sample_76": {
                "variable": {
                    "value": "tex",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tex_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tex_map[None, ...]",
                            "Subscript"
                        ],
                        [
                            "tex_map.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "coords[None, None, ...] * 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_101": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=min)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag, align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.avg_pool2d(y, size)",
                            "Call"
                        ],
                        [
                            "np.sin(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "torch.sin(phi) * sintheta",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx0 if np.dot(dx0, dx0) > np.dot(dx1, dx1) else dx1",
                            "IfExp"
                        ],
                        [
                            "dx / np.linalg.norm(dx)",
                            "BinOp"
                        ],
                        [
                            "dx0 if np.dot(dx0, dx0) > np.dot(dx1, dx1) else dx1",
                            "IfExp"
                        ],
                        [
                            "dx / np.linalg.norm(dx)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cross(N, dx)",
                            "Call"
                        ],
                        [
                            "dy / np.linalg.norm(dy)",
                            "BinOp"
                        ],
                        [
                            "np.cross(N, dx)",
                            "Call"
                        ],
                        [
                            "dy / np.linalg.norm(dy)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "N / np.linalg.norm(N)",
                            "BinOp"
                        ],
                        [
                            "N / np.linalg.norm(N)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_239": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_240": {
                "variable": {
                    "value": "costheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.prod(torch.tensor(data.shape[1:], dtype=torch.int64, device='cuda')).long()",
                            "Call"
                        ],
                        [
                            "np.random.uniform()",
                            "Call"
                        ],
                        [
                            "torch.rand(res, res, 1, dtype=torch.float32, device='cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_241": {
                "variable": {
                    "value": "sintheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / np.linalg.norm(a)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[1, 3, 3, 1], [3, 9, 9, 3], [3, 9, 9, 3], [1, 3, 3, 1]], dtype=torch.float32, device=x.device) / 64.0",
                            "BinOp"
                        ],
                        [
                            "w.expand(g, 1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "input": {
                    "value": "torch.clamp(dot(x, x), min=eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "torch.cos(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(xp, w, padding=0, stride=2, groups=g)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / np.linalg.norm(a)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[1, 3, 3, 1], [3, 9, 9, 3], [3, 9, 9, 3], [1, 3, 3, 1]], dtype=torch.float32, device=x.device) / 64.0",
                            "BinOp"
                        ],
                        [
                            "w.expand(g, 1, 4, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_40": {
                "condition": {
                    "value": "f > 0.0031308",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.pow(torch.clamp(f, min=0.0031308), 1.0 / 2.4) * 1.055 - 0.055",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "12.92 * f",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_47": {
                "condition": {
                    "value": "f <= 0.0031308",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "f * 12.92",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.pow(torch.clamp(f, 0.0031308), 1.0 / 2.4) * 1.055 - 0.055",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_56": {
                "condition": {
                    "value": "f <= 0.04045",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "f / 12.92",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.pow((torch.clamp(f, 0.04045) + 0.055) / 1.055, 2.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_91": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=min)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag, align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.avg_pool2d(y, size)",
                            "Call"
                        ],
                        [
                            "np.sin(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "torch.sin(phi) * sintheta",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'area'",
                            "MethodArgument"
                        ],
                        [
                            "'area'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "prod_113": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(data.shape[1:], dtype=torch.int64, device='cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_272": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "torch.cos(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.conv2d(xp, w, padding=0, stride=2, groups=g)",
                            "Call"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x, (1, 1, 1, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / np.linalg.norm(a)",
                            "BinOp"
                        ],
                        [
                            "torch.tensor([[1, 3, 3, 1], [3, 9, 9, 3], [3, 9, 9, 3], [1, 3, 3, 1]], dtype=torch.float32, device=x.device) / 64.0",
                            "BinOp"
                        ],
                        [
                            "w.expand(g, 1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_27": {
                "input": {
                    "value": "dot(x, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(_rgb_to_srgb(f[..., 0:3]), f[..., 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_56": {
                "input": {
                    "value": "(torch.clamp(f, 0.04045) + 0.055) / 1.055",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "(_srgb_to_rgb(f[..., 0:3]), f[..., 3:4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_94": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=min)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag, align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.avg_pool2d(y, size)",
                            "Call"
                        ],
                        [
                            "np.sin(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "torch.sin(phi) * sintheta",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_96": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=min)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag, align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size, mode=mag)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.avg_pool2d(y, size)",
                            "Call"
                        ],
                        [
                            "np.sin(phi) * sintheta",
                            "BinOp"
                        ],
                        [
                            "torch.sin(phi) * sintheta",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_238": {
                "*size": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cos_244": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * np.pi * np.random.uniform()",
                            "BinOp"
                        ],
                        [
                            "2.0 * np.pi * torch.rand(res, res, 1, dtype=torch.float32, device='cuda')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_245": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * np.pi * np.random.uniform()",
                            "BinOp"
                        ],
                        [
                            "2.0 * np.pi * torch.rand(res, res, 1, dtype=torch.float32, device='cuda')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_256": {
                "data": {
                    "value": "[[1, 3, 3, 1], [3, 9, 9, 3], [3, 9, 9, 3], [1, 3, 3, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "data": {
                    "value": "[[1, 3, 3, 1], [3, 9, 9, 3], [3, 9, 9, 3], [1, 3, 3, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_consecutive_109": {
                "*args": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_40": {
                "input": {
                    "value": "torch.clamp(f, min=0.0031308)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / 2.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_47": {
                "input": {
                    "value": "torch.clamp(f, 0.0031308)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / 2.4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_40": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0031308",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_47": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0031308",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_56": {
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.04045",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "trainable_list + [displacement_map_var]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_211": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(trainable_list, lr=FLAGS.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda x: max(0.0, 10 ** (-x * 0.0002))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "displacement_map_var",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.zeros(FLAGS.texture_res + [1], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "background",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "util.checkerboard(FLAGS.display_res, 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "img_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "variable": {
                    "value": "lap_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_326": {
                "variable": {
                    "value": "randomBgColor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "FLAGS.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "iter_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.train_res",
                            "Attribute"
                        ],
                        [
                            "np.random.randint(16, FLAGS.train_res + 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_222": {
                "variable": {
                    "value": "background",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, FLAGS.display_res, FLAGS.display_res, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_278": {
                "variable": {
                    "value": "img_disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(displacement_map_var[None, ...])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "result_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_base, img_opt, img_ref]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "result_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_opt, img_ref]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_278": {
                "input": {
                    "value": "displacement_map_var[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}