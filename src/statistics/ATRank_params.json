{
    "multi/train.py": {
        "sklearn": {
            "roc_auc_score_85": {
                "variable": {
                    "value": "test_auc",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "Name",
                    "possible_values": []
                },
                "y_score": {
                    "value": "predict_prob_y",
                    "type": "Name",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_17": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "hidden_units",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden units in each layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "num_blocks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of blocks in each attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "num_heads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of heads in each attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_23": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout probability(0.0: no dropout)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_24": {
                "name": {
                    "value": "regulation_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regulation rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "itemid_embedding_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Item id embedding size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "cateid_embedding_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Cate id embedding size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "concat_time_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Concat time-embedding instead of Add",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "net_type",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "att-i2i",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "a: attention  i: rnn-item  q: rnn-query  c: rnn-coupon",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "model_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "save_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to save model checkpoints",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "sgd",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Optimizer for training: (adadelta, adam, rmsprop,sgd*)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "max_gradient_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "train_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_41": {
                "name": {
                    "value": "test_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Testing Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "max_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum # of training epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_44": {
                "name": {
                    "value": "display_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Display training status every this iteration",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_45": {
                "name": {
                    "value": "eval_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Display training status every this iteration",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "cuda_visible_devices",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Choice which GPU to use",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "per_process_gpu_memory_fraction",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Gpu memory use fraction, 0.0 for allow_growth=True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_65": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_121": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GPUOptions_231": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "checkpoint_exists_66": {
                "checkpoint_prefix": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_98": {
                "filename": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_100": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_123": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_125": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.per_process_gpu_memory_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_154": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_208": {
                "filename": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_210": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_233": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_235": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.per_process_gpu_memory_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_252": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DeleteRecursively_99": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DeleteRecursively_209": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_154": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.per_process_gpu_memory_fraction)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.per_process_gpu_memory_fraction)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_252": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.per_process_gpu_memory_fraction)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.per_process_gpu_memory_fraction)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "atrank/model.py": {
        "tensorflow": {
            "range_443": {
                "variable": {
                    "value": "batch_range",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_444": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_range, ind]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_445": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([batch_range, ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_11": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config['model_dir'] + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_12": {
                "variable": {
                    "value": "self.eval_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config['model_dir'] + '/eval'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['item_count'], self.config['itemid_embedding_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['item_count']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "cate_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['cate_count'], self.config['cateid_embedding_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_57": {
                "variable": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.i))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [self.config['item_count']], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_105": {
                "variable": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_107": {
                "variable": {
                    "value": "self.global_epoch_step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_epoch_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_110": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_121": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.histogram('embedding/1_item_emb', item_emb_w), tf.summary.histogram('embedding/2_cate_emb', cate_emb_w), tf.summary.histogram('embedding/3_time_raw', self.hist_t), tf.summary.histogram('embedding/3_time_dense', t_emb), tf.summary.histogram('embedding/4_final', h_emb), tf.summary.histogram('attention_output', u_emb), tf.summary.scalar('L2_norm Loss', l2_norm), tf.summary.scalar('Training Loss', self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_146": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_149": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_226": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_235": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_262": {
                "variable": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(dec, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec, [-1, num_units])",
                            "Call"
                        ],
                        [
                            "feedforward(dec, num_units=[num_units // 4, num_units], scope='feed_forward', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(dec, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec, [-1, num_units])",
                            "Call"
                        ],
                        [
                            "feedforward(dec, num_units=[num_units // 4, num_units], scope='feed_forward', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_320": {
                "variable": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "h_emb.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_321": {
                "variable": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "h_emb.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_322": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "h_emb.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_325": {
                "variable": {
                    "value": "Q_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "K_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_327": {
                "variable": {
                    "value": "V_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(V, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_333": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_339": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Name",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(keys)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_340": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_341": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(key_masks, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(queries)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_344": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_349": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_352": {
                "variable": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "queries_length",
                    "type": "Name",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(queries)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_353": {
                "variable": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(queries_length, tf.shape(queries)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_354": {
                "variable": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(query_masks, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(keys)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_361": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['dropout']",
                            "Subscript"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "tf.convert_to_tensor(is_training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_364": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(V, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_367": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_397": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv1d_402": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_433": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_434": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_435": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_71": {
                "variable": {
                    "value": "t_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_emb, t_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ],
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "t_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.expand_dims(self.hist_t, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_137": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "all",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'feedforward'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_393": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'feedforward'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_429": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'feedforward'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_97": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_139": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "user_hist_group",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "item_feature_group",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_325": {
                "value": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(queries, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_326": {
                "value": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_327": {
                "value": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_333": {
                "a": {
                    "value": "K_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_341": {
                "input": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_343": {
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_354": {
                "input": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(queries_length, tf.shape(queries)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_367": {
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_435": {
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_443": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_60": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], self.config['itemid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], self.config['cateid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(cate_list, self.i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], self.config['itemid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_67": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], self.config['cateid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(cate_list, self.hist_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_97": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.i))], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_111": {
                "t": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "l2_loss_112": {
                "t": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.i))], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_116": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_122": {
                "name": {
                    "value": "embedding/1_item_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], self.config['itemid_embedding_size']])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_123": {
                "name": {
                    "value": "embedding/2_cate_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], self.config['cateid_embedding_size']])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_124": {
                "name": {
                    "value": "embedding/3_time_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_125": {
                "name": {
                    "value": "embedding/3_time_dense",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "t_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(self.hist_t, 12, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.expand_dims(self.hist_t, -1), self.config['hidden_units'], activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_126": {
                "name": {
                    "value": "embedding/4_final",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ],
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_127": {
                "name": {
                    "value": "attention_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_128": {
                "name": {
                    "value": "L2_norm Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_129": {
                "name": {
                    "value": "Training Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_141": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_143": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_339": {
                "input": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_352": {
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "convert_to_tensor_361": {
                "value": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_61": {
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_67": {
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "'num_blocks_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "'num_blocks_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_341": {
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_354": {
                "input": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_like_268": {
                "input": {
                    "value": "dec[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "atrank/train.py": {
        "tensorflow": {
            "set_random_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "hidden_units",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden units in each layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "num_blocks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of blocks in each attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "num_heads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of heads in each attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_23": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout probability(0.0: no dropout)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_24": {
                "name": {
                    "value": "regulation_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regulation rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "itemid_embedding_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Item id embedding size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "cateid_embedding_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Cate id embedding size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "model_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "save_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to save model checkpoints",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "sgd",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Optimizer for training: (adadelta, adam, rmsprop,sgd*)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "max_gradient_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "train_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "test_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Testing Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "max_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum # of training epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "display_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Display training status every this iteration",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "eval_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Display training status every this iteration",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "cuda_visible_devices",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Choice which GPU to use",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "per_process_gpu_memory_fraction",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Gpu memory use fraction, 0.0 for allow_growth=True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_110": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "checkpoint_exists_65": {
                "checkpoint_prefix": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_96": {
                "filename": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_98": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_112": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_114": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.per_process_gpu_memory_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_129": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_85": {
                "value": {
                    "value": "[tf.Summary.Value(tag='Eval AUC', simple_value=test_auc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DeleteRecursively_97": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_129": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.per_process_gpu_memory_fraction)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "bpr/model.py": {
        "tensorflow": {
            "placeholder_6": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_7": {
                "variable": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_8": {
                "variable": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_9": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_11": {
                "variable": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "user_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[user_count, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[item_count, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[item_count]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "cate_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cate_count, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_15": {
                "variable": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_17": {
                "variable": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('user_emb_w', [user_count, 128])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_19": {
                "variable": {
                    "value": "ic",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_20": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_24": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [item_count])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_26": {
                "variable": {
                    "value": "jc",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_27": {
                "variable": {
                    "value": "j_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.j), tf.nn.embedding_lookup(cate_emb_w, jc)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_31": {
                "variable": {
                    "value": "j_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [item_count])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i_b - j_b + tf.reduce_sum(tf.multiply(u_emb, i_emb - j_emb), 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "self.mf_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(x > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "all_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[item_emb_w, tf.nn.embedding_lookup(cate_emb_w, cate_list)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "self.logits_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "item_b + tf.matmul(u_emb, all_emb, transpose_b=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_50": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb), tf.nn.l2_loss(j_emb)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb - j_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_40": {
                "x": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "input_tensor": {
                    "value": "tf.log(self.logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_21": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_22": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.i)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_28": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_29": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "jc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.j)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_34": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb - j_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_45": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_48": {
                "a": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "all_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([item_emb_w, tf.nn.embedding_lookup(cate_emb_w, cate_list)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_51": {
                "t": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_52": {
                "t": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_53": {
                "t": {
                    "value": "j_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.j), tf.nn.embedding_lookup(cate_emb_w, jc)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_57": {
                "x": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "bpr/train.py": {
        "tensorflow": {
            "GPUOptions_22": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_11": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_23": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_24": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/model.py": {
        "tensorflow": {
            "sequence_mask_247": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sl",
                    "type": "Name",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(h_emb)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_248": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sl, tf.shape(h_emb)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, tf.shape(h_emb)[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_249": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sl, tf.shape(h_emb)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, tf.shape(h_emb)[2]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(h_emb)[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_253": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_256": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_284": {
                "variable": {
                    "value": "h_pool_dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool, [-1, num_filters_total])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "FileWriter_11": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config['model_dir'] + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_12": {
                "variable": {
                    "value": "self.eval_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config['model_dir'] + '/eval'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['item_count'], self.config['itemid_embedding_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['item_count']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "cate_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['cate_count'], self.config['cateid_embedding_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_57": {
                "variable": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.i))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [self.config['item_count']], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_92": {
                "variable": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cnn_net(h_emb, self.sl, filter_sizes, num_filters, self.config['hidden_units'], self.config['dropout'], self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(u_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_104": {
                "variable": {
                    "value": "self.global_epoch_step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_epoch_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_107": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_118": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.histogram('embedding/1_item_emb', item_emb_w), tf.summary.histogram('embedding/2_cate_emb', cate_emb_w), tf.summary.histogram('embedding/3_time_raw', self.hist_t), tf.summary.histogram('embedding/3_time_dense', t_emb), tf.summary.histogram('embedding/4_final', h_emb), tf.summary.histogram('attention_output', u_emb), tf.summary.scalar('L2_norm Loss', l2_norm), tf.summary.scalar('Training Loss', self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_132": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_143": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_146": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_224": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_234": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_71": {
                "variable": {
                    "value": "t_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_72": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[h_emb, t_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_73": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_75": {
                "variable": {
                    "value": "t_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.expand_dims(self.hist_t, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_134": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_263": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_264": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_265": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_271": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_273": {
                "variable": {
                    "value": "pooled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_112": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_136": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_247": {
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_260": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_53": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_60": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], self.config['itemid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], self.config['cateid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(cate_list, self.i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_66": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], self.config['itemid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_67": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], self.config['cateid_embedding_size']])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(cate_list, self.hist_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "input": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_94": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cnn_net(h_emb, self.sl, filter_sizes, num_filters, self.config['hidden_units'], self.config['dropout'], self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(u_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.i))], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_108": {
                "t": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cnn_net(h_emb, self.sl, filter_sizes, num_filters, self.config['hidden_units'], self.config['dropout'], self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(u_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_109": {
                "t": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.i))], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_113": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_119": {
                "name": {
                    "value": "embedding/1_item_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], self.config['itemid_embedding_size']])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_120": {
                "name": {
                    "value": "embedding/2_cate_emb",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], self.config['cateid_embedding_size']])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_121": {
                "name": {
                    "value": "embedding/3_time_raw",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.hist_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_122": {
                "name": {
                    "value": "embedding/3_time_dense",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "t_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(self.hist_t, 12, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.expand_dims(self.hist_t, -1), self.config['hidden_units'], activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_123": {
                "name": {
                    "value": "embedding/4_final",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_124": {
                "name": {
                    "value": "attention_output",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cnn_net(h_emb, self.sl, filter_sizes, num_filters, self.config['hidden_units'], self.config['dropout'], self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(u_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_125": {
                "name": {
                    "value": "L2_norm Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_126": {
                "name": {
                    "value": "Training Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_138": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_140": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_249": {
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_263": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, embedding_size, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_264": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_271": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h_emb, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_61": {
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_67": {
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_254": {
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb + t_emb",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, tf.gather(cate_list, self.hist_i))], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([h_emb, t_emb], -1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h_emb, self.config['hidden_units'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/train.py": {
        "tensorflow": {
            "set_random_seed_16": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_20": {
                "name": {
                    "value": "hidden_units",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of hidden units in each layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "num_blocks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of blocks in each attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "num_heads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of heads in each attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_23": {
                "name": {
                    "value": "dropout",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout probability(0.0: no dropout)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_24": {
                "name": {
                    "value": "regulation_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "L2 regulation rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "itemid_embedding_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Item id embedding size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_27": {
                "name": {
                    "value": "cateid_embedding_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Cate id embedding size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_33": {
                "name": {
                    "value": "model_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "save_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to save model checkpoints",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "sgd",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Optimizer for training: (adadelta, adam, rmsprop,sgd*)",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_35": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "max_gradient_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Clip gradients to this norm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "train_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "test_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Testing Batch size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "max_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum # of training epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_42": {
                "name": {
                    "value": "display_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Display training status every this iteration",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "eval_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Display training status every this iteration",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "cuda_visible_devices",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Choice which GPU to use",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "per_process_gpu_memory_fraction",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Gpu memory use fraction, 0.0 for allow_growth=True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_63": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_108": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "checkpoint_exists_64": {
                "checkpoint_prefix": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_94": {
                "filename": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_96": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_110": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_112": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "FLAGS.per_process_gpu_memory_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_127": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_83": {
                "value": {
                    "value": "[tf.Summary.Value(tag='Eval AUC', simple_value=test_auc)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DeleteRecursively_95": {
                "dirname": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_127": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions()",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=FLAGS.per_process_gpu_memory_fraction)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "multi/model.py": {
        "tensorflow": {
            "bidirectional_dynamic_rnn_624": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ],
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ],
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sl",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_626": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[extract_axis_1(rnn_output[0], sl - 1), tf.reshape(rnn_output[1][:, 0, :], [-1, hidden_units])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_630": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([extract_axis_1(rnn_output[0], sl - 1), tf.reshape(rnn_output[1][:, 0, :], [-1, hidden_units])], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ],
                        [
                            "vanilla_attention(i_emb, rnn_output, sl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hist, [-1, hidden_units * 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_636": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ],
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ],
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "sl",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_638": {
                "variable": {
                    "value": "rnn_output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(rnn_output, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_641": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([extract_axis_1(rnn_output[0], sl - 1), tf.reshape(rnn_output[1][:, 0, :], [-1, hidden_units])], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ],
                        [
                            "vanilla_attention(i_emb, rnn_output, sl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hist, [-1, hidden_units * 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_units * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_642": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([extract_axis_1(rnn_output[0], sl - 1), tf.reshape(rnn_output[1][:, 0, :], [-1, hidden_units])], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ],
                        [
                            "vanilla_attention(i_emb, rnn_output, sl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hist, [-1, hidden_units * 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tile_651": {
                "variable": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_652": {
                "variable": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_654": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(keys, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_657": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Name",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(keys)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_658": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keys_mask",
                            "Name"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_660": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keys_mask",
                            "Name"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_666": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_669": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "range_675": {
                "variable": {
                    "value": "batch_range",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_676": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_range, ind]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_677": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([batch_range, ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_694": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sl",
                    "type": "Name",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(h_emb)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_695": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sl, tf.shape(h_emb)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, tf.shape(h_emb)[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_696": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sl, tf.shape(h_emb)[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(mask, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(mask, [1, 1, tf.shape(h_emb)[2]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(h_emb)[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_700": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_702": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_727": {
                "variable": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "pooled_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_728": {
                "variable": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(pooled_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_filters_total]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_730": {
                "variable": {
                    "value": "h_pool_dropout",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "h_pool_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool, [-1, num_filters_total])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['dropout']",
                            "Subscript"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "FileWriter_18": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config['model_dir'] + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FileWriter_19": {
                "variable": {
                    "value": "self.eval_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "config['model_dir'] + '/eval'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.hist_i_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_44": {
                "variable": {
                    "value": "self.hist_i_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.hist_i_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.hist_i_sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.hist_q_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.hist_q_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.hist_q_sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.hist_c_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.hist_c_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.hist_c_sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_85": {
                "variable": {
                    "value": "item_feat_shop_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "map_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_86": {
                "variable": {
                    "value": "item_feat_cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "map_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_87": {
                "variable": {
                    "value": "item_feat_brand_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "map_list[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "coupon_feat_shop_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "map_list[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_89": {
                "variable": {
                    "value": "coupon_feat_cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "map_list[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "user_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['user_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['item_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "shop_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "shop_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['shop_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "cate_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['cate_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "brand_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "brand_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['brand_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "action_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "action_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['action_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "query_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "query_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['query_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_98": {
                "variable": {
                    "value": "coupon_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "coupon_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['coupon_count'], 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_100": {
                "variable": {
                    "value": "i_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "i_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_101": {
                "variable": {
                    "value": "q_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "q_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_102": {
                "variable": {
                    "value": "c_layer",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config['hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "c_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_105": {
                "variable": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('user_emb_w', [self.config['user_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(shop_emb_w, tf.gather(item_feat_shop_list, self.i)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(item_feat_cate_list, self.i)), tf.nn.embedding_lookup(brand_emb_w, tf.gather(item_feat_brand_list, self.i))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_113": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(shop_emb_w, tf.gather(item_feat_shop_list, self.i)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(item_feat_cate_list, self.i)), tf.nn.embedding_lookup(brand_emb_w, tf.gather(item_feat_brand_list, self.i))], 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(i_emb, [[0, 0], [0, 64 + 12]])",
                            "Call"
                        ],
                        [
                            "i_layer(i_emb)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.case([(tf.equal(self.behavior_type, 'item_batch'), lambda : i_emb), (tf.equal(self.behavior_type, 'query_batch'), lambda : q_emb), (tf.equal(self.behavior_type, 'coupon_batch'), lambda : c_emb)], default=lambda : tf.zeros([1])), [-1, self.config['hidden_units']])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 64 + 12]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['item_count']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_117": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [self.config['item_count']], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_119": {
                "variable": {
                    "value": "q_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "query_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('query_emb_w', [self.config['query_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_120": {
                "variable": {
                    "value": "q_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(query_emb_w, self.q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q_emb, [[0, 0], [0, 12]])",
                            "Call"
                        ],
                        [
                            "q_layer(q_emb)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 12]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "item_q",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_q",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['query_count']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_124": {
                "variable": {
                    "value": "q_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_q', [self.config['query_count']], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "c_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(coupon_emb_w, self.c), tf.nn.embedding_lookup(shop_emb_w, tf.gather(coupon_feat_shop_list, self.c)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(coupon_feat_cate_list, self.c))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_131": {
                "variable": {
                    "value": "c_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(coupon_emb_w, self.c), tf.nn.embedding_lookup(shop_emb_w, tf.gather(coupon_feat_shop_list, self.c)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(coupon_feat_cate_list, self.c))], 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(c_emb, [[0, 0], [0, 12]])",
                            "Call"
                        ],
                        [
                            "c_layer(c_emb)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 12]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_133": {
                "variable": {
                    "value": "item_c",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_c",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['coupon_count']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_135": {
                "variable": {
                    "value": "c_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_c', [self.config['coupon_count']], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "hist_i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.hist_i_id), tf.nn.embedding_lookup(shop_emb_w, tf.gather(item_feat_shop_list, self.hist_i_id)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(item_feat_cate_list, self.hist_i_id)), tf.nn.embedding_lookup(brand_emb_w, tf.gather(item_feat_brand_list, self.hist_i_id)), tf.nn.embedding_lookup(action_emb_w, self.hist_i_act), tf.one_hot(self.hist_i_time, 12, dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sequence_mask_147": {
                "variable": {
                    "value": "hist_i_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.hist_i_sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(hist_i_emb)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "hist_q_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(query_emb_w, self.hist_q_id), tf.one_hot(self.hist_q_time, 12, dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sequence_mask_154": {
                "variable": {
                    "value": "hist_q_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.hist_q_sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(hist_q_emb)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "hist_c_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(coupon_emb_w, self.hist_c_id), tf.nn.embedding_lookup(shop_emb_w, tf.gather(coupon_feat_shop_list, self.hist_c_id)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(coupon_feat_cate_list, self.hist_c_id)), tf.one_hot(self.hist_c_time, 12, dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sequence_mask_163": {
                "variable": {
                    "value": "hist_c_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.hist_c_sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(hist_c_emb)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "hist_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[hist_i_emb, hist_q_emb, hist_c_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "hist_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[hist_i_mask, hist_q_mask, hist_c_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.case([(tf.equal(self.behavior_type, 'item_batch'), lambda : i_emb), (tf.equal(self.behavior_type, 'query_batch'), lambda : q_emb), (tf.equal(self.behavior_type, 'coupon_batch'), lambda : c_emb)], default=lambda : tf.zeros([1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.config['hidden_units']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "case_181": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "pred_fn_pairs": {
                    "value": "[(tf.equal(self.behavior_type, 'item_batch'), lambda : i_b), (tf.equal(self.behavior_type, 'query_batch'), lambda : q_b), (tf.equal(self.behavior_type, 'coupon_batch'), lambda : c_b)]",
                    "type": "List",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : tf.zeros([1])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Variable_232": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "variable": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_235": {
                "variable": {
                    "value": "self.global_epoch_step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_epoch_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_238": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_249": {
                "variable": {
                    "value": "self.train_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar('L2_norm Loss', l2_norm), tf.summary.scalar('Training Loss', self.loss)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_263": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_274": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_277": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_404": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_412": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_439": {
                "variable": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(dec, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec, [-1, num_units])",
                            "Call"
                        ],
                        [
                            "feedforward(dec, num_units=[num_units // 4, num_units], scope='feed_forward', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_459": {
                "variable": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(dec, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dec, [-1, num_units])",
                            "Call"
                        ],
                        [
                            "feedforward(dec, num_units=[num_units // 4, num_units], scope='feed_forward', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_500": {
                "variable": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "hist_emb.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_501": {
                "variable": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "hist_emb.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_502": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                },
                "units": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "queries.get_shape().as_list[-1]",
                            "Subscript"
                        ],
                        [
                            "hist_emb.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "[2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_505": {
                "variable": {
                    "value": "Q_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(Q, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_506": {
                "variable": {
                    "value": "K_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(K, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_507": {
                "variable": {
                    "value": "V_",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(V, num_heads, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_513": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "Q_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(Q, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_520": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keys_mask",
                            "Name"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_521": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(key_masks, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(queries)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_524": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keys_mask",
                            "Name"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ],
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_529": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_532": {
                "variable": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "queries_mask",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tile_533": {
                "variable": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(queries_mask)",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_heads, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_534": {
                "variable": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(query_masks, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, tf.shape(keys)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_541": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['dropout']",
                            "Subscript"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "tf.convert_to_tensor(is_training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_544": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(V, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_547": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(outputs, num_heads, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_577": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv1d_582": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_613": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_614": {
                "variable": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_615": {
                "variable": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones(params_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiRNNCell_688": {
                "cells": {
                    "value": "cell_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[build_single_cell(hidden_units) for i in range(depth)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "AdadeltaOptimizer_265": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_418": {
                "name_or_scope": {
                    "value": "all",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_491": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'feedforward'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_573": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'feedforward'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "'feedforward'",
                            "MethodArgument"
                        ],
                        [
                            "'ln'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_654": {
                "a": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_659": {
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_709": {
                "variable": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_710": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[num_filter])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_711": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_717": {
                "variable": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_719": {
                "variable": {
                    "value": "pooled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b), name='relu')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, sequence_length - filter_size + 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "case_176": {
                "pred_fn_pairs": {
                    "value": "[(tf.equal(self.behavior_type, 'item_batch'), lambda : i_emb), (tf.equal(self.behavior_type, 'query_batch'), lambda : q_emb), (tf.equal(self.behavior_type, 'coupon_batch'), lambda : c_emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "default": {
                    "value": "lambda : tf.zeros([1])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_243": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_267": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_419": {
                "name_or_scope": {
                    "value": "user_hist_group",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_440": {
                "name_or_scope": {
                    "value": "item_feature_group",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_505": {
                "value": {
                    "value": "Q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(queries, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_506": {
                "value": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_507": {
                "value": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(keys, num_units, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_513": {
                "a": {
                    "value": "K_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(tf.split(K, num_heads, axis=2), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_521": {
                "input": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keys_mask",
                            "Name"
                        ],
                        [
                            "tf.tile(key_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(key_masks, 1), [1, tf.shape(queries)[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_523": {
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_534": {
                "input": {
                    "value": "query_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(queries_mask)",
                            "Call"
                        ],
                        [
                            "tf.tile(query_masks, [num_heads, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(query_masks, -1), [1, 1, tf.shape(keys)[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_547": {
                "value": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(Q_, tf.transpose(K_, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "outputs / K_.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + inputs",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dropout(outputs, rate=dropout_rate, training=tf.convert_to_tensor(is_training))",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, V_)",
                            "Call"
                        ],
                        [
                            "tf.concat(tf.split(outputs, num_heads, axis=0), axis=2)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv1d(**params)",
                            "Call"
                        ],
                        [
                            "normalize(outputs)",
                            "Call"
                        ],
                        [
                            "gamma * normalized + beta",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ],
                        [
                            "sess.run(output_feed, input_feed)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.config['num_heads']",
                            "Subscript"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_614": {
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_615": {
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_shape[-1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_628": {
                "tensor": {
                    "value": "rnn_output[1][:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_657": {
                "input": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_675": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_694": {
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_706": {
                "name": {
                    "value": "'conv-maxpool-%s' % filter_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_108": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_109": {
                "params": {
                    "value": "shop_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('shop_emb_w', [self.config['shop_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(item_feat_shop_list, self.i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_110": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(item_feat_cate_list, self.i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_111": {
                "params": {
                    "value": "brand_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('brand_emb_w', [self.config['brand_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(item_feat_brand_list, self.i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_116": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_123": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_127": {
                "params": {
                    "value": "coupon_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('coupon_emb_w', [self.config['coupon_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_128": {
                "params": {
                    "value": "shop_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('shop_emb_w', [self.config['shop_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(coupon_feat_shop_list, self.c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(coupon_feat_cate_list, self.c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_134": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_139": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [self.config['item_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_i_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_140": {
                "params": {
                    "value": "shop_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('shop_emb_w', [self.config['shop_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(item_feat_shop_list, self.hist_i_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_141": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(item_feat_cate_list, self.hist_i_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_142": {
                "params": {
                    "value": "brand_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('brand_emb_w', [self.config['brand_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(item_feat_brand_list, self.hist_i_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_143": {
                "params": {
                    "value": "action_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('action_emb_w', [self.config['action_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_i_act",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_144": {
                "indices": {
                    "value": "self.hist_i_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_147": {
                "input": {
                    "value": "hist_i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i_id), tf.nn.embedding_lookup(shop_emb_w, tf.gather(item_feat_shop_list, self.hist_i_id)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(item_feat_cate_list, self.hist_i_id)), tf.nn.embedding_lookup(brand_emb_w, tf.gather(item_feat_brand_list, self.hist_i_id)), tf.nn.embedding_lookup(action_emb_w, self.hist_i_act), tf.one_hot(self.hist_i_time, 12, dtype=tf.float32)], 2)",
                            "Call"
                        ],
                        [
                            "i_layer(hist_i_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_150": {
                "params": {
                    "value": "query_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('query_emb_w', [self.config['query_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_q_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_151": {
                "indices": {
                    "value": "self.hist_q_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "hist_q_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(query_emb_w, self.hist_q_id), tf.one_hot(self.hist_q_time, 12, dtype=tf.float32)], 2)",
                            "Call"
                        ],
                        [
                            "q_layer(hist_q_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_157": {
                "params": {
                    "value": "coupon_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('coupon_emb_w', [self.config['coupon_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_c_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_158": {
                "params": {
                    "value": "shop_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('shop_emb_w', [self.config['shop_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(coupon_feat_shop_list, self.hist_c_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_159": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [self.config['cate_count'], 64])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "tf.gather(coupon_feat_cate_list, self.hist_c_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_160": {
                "indices": {
                    "value": "self.hist_c_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "hist_c_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(coupon_emb_w, self.hist_c_id), tf.nn.embedding_lookup(shop_emb_w, tf.gather(coupon_feat_shop_list, self.hist_c_id)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(coupon_feat_cate_list, self.hist_c_id)), tf.one_hot(self.hist_c_time, 12, dtype=tf.float32)], 2)",
                            "Call"
                        ],
                        [
                            "c_layer(hist_c_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_224": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "birnn_net(hist_i_emb, self.hist_i_sl, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_net(hist_q_emb, self.hist_q_sl, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_net(hist_c_emb, self.hist_c_sl, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_att_net(hist_i_emb, self.hist_i_sl, i_emb, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_att_net(hist_q_emb, self.hist_q_sl, i_emb, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_att_net(hist_c_emb, self.hist_c_sl, i_emb, num_units)",
                            "Call"
                        ],
                        [
                            "cnn_net(hist_i_emb, self.hist_i_sl, filter_sizes, num_filters, num_units, dropout_rate, self.is_training)",
                            "Call"
                        ],
                        [
                            "cnn_net(hist_q_emb, self.hist_q_sl, filter_sizes, num_filters, num_units, dropout_rate, self.is_training)",
                            "Call"
                        ],
                        [
                            "cnn_net(hist_c_emb, self.hist_c_sl, filter_sizes, num_filters, num_units, dropout_rate, self.is_training)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(shop_emb_w, tf.gather(item_feat_shop_list, self.i)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(item_feat_cate_list, self.i)), tf.nn.embedding_lookup(brand_emb_w, tf.gather(item_feat_brand_list, self.i))], 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(i_emb, [[0, 0], [0, 64 + 12]])",
                            "Call"
                        ],
                        [
                            "i_layer(i_emb)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.case([(tf.equal(self.behavior_type, 'item_batch'), lambda : i_emb), (tf.equal(self.behavior_type, 'query_batch'), lambda : q_emb), (tf.equal(self.behavior_type, 'coupon_batch'), lambda : c_emb)], default=lambda : tf.zeros([1])), [-1, self.config['hidden_units']])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_239": {
                "t": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "birnn_net(hist_i_emb, self.hist_i_sl, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_net(hist_q_emb, self.hist_q_sl, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_net(hist_c_emb, self.hist_c_sl, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_att_net(hist_i_emb, self.hist_i_sl, i_emb, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_att_net(hist_q_emb, self.hist_q_sl, i_emb, num_units)",
                            "Call"
                        ],
                        [
                            "birnn_att_net(hist_c_emb, self.hist_c_sl, i_emb, num_units)",
                            "Call"
                        ],
                        [
                            "cnn_net(hist_i_emb, self.hist_i_sl, filter_sizes, num_filters, num_units, dropout_rate, self.is_training)",
                            "Call"
                        ],
                        [
                            "cnn_net(hist_q_emb, self.hist_q_sl, filter_sizes, num_filters, num_units, dropout_rate, self.is_training)",
                            "Call"
                        ],
                        [
                            "cnn_net(hist_c_emb, self.hist_c_sl, filter_sizes, num_filters, num_units, dropout_rate, self.is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_240": {
                "t": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(shop_emb_w, tf.gather(item_feat_shop_list, self.i)), tf.nn.embedding_lookup(cate_emb_w, tf.gather(item_feat_cate_list, self.i)), tf.nn.embedding_lookup(brand_emb_w, tf.gather(item_feat_brand_list, self.i))], 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(i_emb, [[0, 0], [0, 64 + 12]])",
                            "Call"
                        ],
                        [
                            "i_layer(i_emb)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.case([(tf.equal(self.behavior_type, 'item_batch'), lambda : i_emb), (tf.equal(self.behavior_type, 'query_batch'), lambda : q_emb), (tf.equal(self.behavior_type, 'coupon_batch'), lambda : c_emb)], default=lambda : tf.zeros([1])), [-1, self.config['hidden_units']])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_244": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_256": {
                "name": {
                    "value": "L2_norm Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.add_n([tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_257": {
                "name": {
                    "value": "Training Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_269": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_271": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_541": {
                "value": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_696": {
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_709": {
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size, embedding_size, 1, num_filter]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_710": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_717": {
                "value": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(h_emb, W, strides=[1, 1, 1, 1], padding='VALID', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[num_filter]), name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_109": {
                "params": {
                    "value": "item_feat_shop_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[0], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_110": {
                "params": {
                    "value": "item_feat_cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[1], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_111": {
                "params": {
                    "value": "item_feat_brand_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[2], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_128": {
                "params": {
                    "value": "coupon_feat_shop_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[3], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_129": {
                "params": {
                    "value": "coupon_feat_cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[4], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_140": {
                "params": {
                    "value": "item_feat_shop_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[0], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_141": {
                "params": {
                    "value": "item_feat_cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[1], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_142": {
                "params": {
                    "value": "item_feat_brand_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[2], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_158": {
                "params": {
                    "value": "coupon_feat_shop_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[3], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_c_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_159": {
                "params": {
                    "value": "coupon_feat_cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(map_list[4], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_c_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_182": {
                "x": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "item_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_183": {
                "x": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "query_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_184": {
                "x": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "coupon_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "'num_blocks_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "'num_blocks_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_521": {
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_534": {
                "input": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_177": {
                "x": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "item_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_178": {
                "x": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "query_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_179": {
                "x": {
                    "value": "self.behavior_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "coupon_batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_700": {
                "input": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h_emb * mask",
                            "BinOp"
                        ],
                        [
                            "tf.pad(h_emb, [[0, 0], [0, sequence_length - tf.shape(h_emb)[1]], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h_emb, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_445": {
                "input": {
                    "value": "dec[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rnn/model.py": {
        "tensorflow": {
            "range_149": {
                "variable": {
                    "value": "batch_range",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_range, ind]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_151": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([batch_range, ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "user_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[user_count, hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[item_count, hidden_units // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[item_count]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "cate_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cate_count, hidden_units // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_26": {
                "variable": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_28": {
                "variable": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('user_emb_w', [user_count, hidden_units])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_30": {
                "variable": {
                    "value": "ic",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_35": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [item_count], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_37": {
                "variable": {
                    "value": "jc",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "j_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.j), tf.nn.embedding_lookup(cate_emb_w, jc)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_42": {
                "variable": {
                    "value": "j_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [item_count], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_44": {
                "variable": {
                    "value": "hc",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, hc)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_61": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, hc)], 2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[extract_axis_1(rnn_output[0], self.sl - 1), tf.reshape(rnn_output[1][:, 0, :], [-1, hidden_units])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_67": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([extract_axis_1(rnn_output[0], self.sl - 1), tf.reshape(rnn_output[1][:, 0, :], [-1, hidden_units])], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "self.mf_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(x > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_77": {
                "variable": {
                    "value": "all_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[item_emb_w, tf.nn.embedding_lookup(cate_emb_w, cate_list)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "self.logits_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "item_b + tf.matmul(u_emb, all_emb, transpose_b=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_89": {
                "variable": {
                    "value": "self.global_epoch_step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_epoch_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_92": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_104": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_105": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_106": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_107": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_141": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiRNNCell_162": {
                "cells": {
                    "value": "cell_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[build_single_cell(hidden_units) for i in range(depth)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_sum_72": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb - j_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_74": {
                "x": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_149": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_33": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.i)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_40": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "jc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.j)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_46": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.hist_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_65": {
                "tensor": {
                    "value": "rnn_output[1][:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_72": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb - j_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_73": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_79": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "a": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "all_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([item_emb_w, tf.nn.embedding_lookup(cate_emb_w, cate_list)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_93": {
                "t": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                }
            },
            "l2_loss_94": {
                "t": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_99": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rnn/train.py": {
        "tensorflow": {
            "GPUOptions_39": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_14": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_40": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_40": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rnn_att/model.py": {
        "tensorflow": {
            "range_139": {
                "variable": {
                    "value": "batch_range",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_range, ind]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_141": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([batch_range, ind], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_160": {
                "variable": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_161": {
                "variable": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_163": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(queries, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(queries, 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(keys, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_166": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Name",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(keys)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_167": {
                "variable": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_169": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "key_masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sequence_mask(keys_length, tf.shape(keys)[1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(key_masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones_like(outputs) * (-2 ** 32 + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_175": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "user_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[user_count, hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[item_count, hidden_units // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "item_b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[item_count]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "cate_emb_w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[cate_count, hidden_units // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_26": {
                "variable": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_28": {
                "variable": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "user_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('user_emb_w', [user_count, hidden_units])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_30": {
                "variable": {
                    "value": "ic",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_35": {
                "variable": {
                    "value": "i_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [item_count], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_37": {
                "variable": {
                    "value": "jc",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_38": {
                "variable": {
                    "value": "j_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.j), tf.nn.embedding_lookup(cate_emb_w, jc)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_42": {
                "variable": {
                    "value": "j_b",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "item_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_b', [item_count], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_44": {
                "variable": {
                    "value": "hc",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, hc)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_52": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "build_cell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "h_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.hist_i), tf.nn.embedding_lookup(cate_emb_w, hc)], 2)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "rnn_output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(rnn_output, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vanilla_attention(i_emb, rnn_output, self.sl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hist, [-1, hidden_units * 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_units * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vanilla_attention(i_emb, rnn_output, self.sl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hist, [-1, hidden_units * 2])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(hist, hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "self.mf_auc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(x > 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "all_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[item_emb_w, tf.nn.embedding_lookup(cate_emb_w, cate_list)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "self.logits_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "item_b + tf.matmul(u_emb, all_emb, transpose_b=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_epoch_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_79": {
                "variable": {
                    "value": "self.global_epoch_step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_epoch_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.global_epoch_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_82": {
                "variable": {
                    "value": "l2_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(u_emb), tf.nn.l2_loss(i_emb)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "variable": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_95": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_96": {
                "variable": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_97": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_131": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_135": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiRNNCell_152": {
                "cells": {
                    "value": "cell_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[build_single_cell(hidden_units) for i in range(depth)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "transpose_163": {
                "a": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_168": {
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(queries, tf.transpose(keys, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.where(key_masks, outputs, paddings)",
                            "Call"
                        ],
                        [
                            "outputs / keys.get_shape().as_list()[-1] ** 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(outputs, keys)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_62": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb - j_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.multiply(u_emb, i_emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_64": {
                "x": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.logits, labels=self.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_139": {
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_166": {
                "input": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_32": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_33": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "ic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.i)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_39": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.j",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_40": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "jc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.j)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_46": {
                "params": {
                    "value": "item_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('item_emb_w', [item_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.hist_i",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_47": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "hc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(cate_list, self.hist_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_62": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb - j_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_63": {
                "x": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_69": {
                "params": {
                    "value": "cate_emb_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('cate_emb_w', [cate_count, hidden_units // 2])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "cate_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(cate_list, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "a": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "all_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([item_emb_w, tf.nn.embedding_lookup(cate_emb_w, cate_list)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_83": {
                "t": {
                    "value": "u_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(user_emb_w, self.u)",
                            "Call"
                        ],
                        [
                            "hist",
                            "Name"
                        ]
                    ]
                }
            },
            "l2_loss_84": {
                "t": {
                    "value": "i_emb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.embedding_lookup(item_emb_w, self.i), tf.nn.embedding_lookup(cate_emb_w, ic)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_89": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rnn_att/train.py": {
        "tensorflow": {
            "GPUOptions_38": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_14": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_39": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_39": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}