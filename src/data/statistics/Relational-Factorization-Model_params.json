{
    "methods/DataIO.py": {
        "sklearn": {
            "train_test_split_526": {
                "variable": {
                    "value": "(train_graphs, test_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "graph_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - split_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_722": {
                "variable": {
                    "value": "(train_graphs, test_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "graph_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - split_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_480": {
                "variable": {
                    "value": "(train_graphs, test_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "graph_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - split_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_493": {
                "variable": {
                    "value": "(labeled_train_graphs, unlabeled_train_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_graphs",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - labeling_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_557": {
                "variable": {
                    "value": "(train_graphs, test_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "graph_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - split_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_570": {
                "variable": {
                    "value": "(labeled_train_graphs, unlabeled_train_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_graphs",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 - labeling_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_454": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_456": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_622": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((num_nodes, 1))",
                            "Call"
                        ],
                        [
                            "dist[subset_nodes, :]",
                            "Subscript"
                        ],
                        [
                            "dist / np.sum(dist)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(dist).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.ones((num_nodes, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(dist).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_623": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lil_matrix((len(graph.nodes), len(graph.nodes)))",
                            "Call"
                        ],
                        [
                            "np.zeros((len(graph.nodes), len(graph.nodes)))",
                            "Call"
                        ],
                        [
                            "np.zeros((num_nodes, num_nodes))",
                            "Call"
                        ],
                        [
                            "adj[subset_nodes, :]",
                            "Subscript"
                        ],
                        [
                            "adj[:, subset_nodes]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(adj).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_nodes, num_nodes))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(adj).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_667": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((num_nodes, 1))",
                            "Call"
                        ],
                        [
                            "self.data[idx][2]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(features).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "features / np.sum(features)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_668": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((num_nodes, 1))",
                            "Call"
                        ],
                        [
                            "dist[subset_nodes, :]",
                            "Subscript"
                        ],
                        [
                            "dist / np.sum(dist)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(dist).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.ones((num_nodes, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(dist).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lil_matrix((len(graph.nodes), len(graph.nodes)))",
                            "Call"
                        ],
                        [
                            "np.zeros((len(graph.nodes), len(graph.nodes)))",
                            "Call"
                        ],
                        [
                            "np.zeros((num_nodes, num_nodes))",
                            "Call"
                        ],
                        [
                            "adj[subset_nodes, :]",
                            "Subscript"
                        ],
                        [
                            "adj[:, subset_nodes]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(adj).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.zeros((num_nodes, num_nodes))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(adj).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "methods/FusedGromovWassersteinFactorization.py": {
        "sklearn": {
            "TSNE_571": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MDS_622": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dissimilarity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TSNE_624": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_400": {
                "variable": {
                    "value": "predictor",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.num_atoms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.max(labels) + 1)",
                            "Call"
                        ],
                        [
                            "int(np.max(labels) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_401": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_atoms, self.num_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_60": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_122": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pb.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "pb.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pb.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_231": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[list(model.parameters())[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_404": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model.parameters()) + list(predictor.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_414": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[list(model.parameters())[0]] + list(predictor.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_591": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ParameterList_65": {
                "variable": {
                    "value": "self.atoms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_66": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_102": {
                "variable": {
                    "value": "self.atoms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_103": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_269": {
                "variable": {
                    "value": "tran",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_463": {
                "variable": {
                    "value": "tran",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_521": {
                "variable": {
                    "value": "(_, est)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictor(weights.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_601": {
                "f": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_59": {
                "*size": {
                    "value": "self.num_atoms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "atom",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.size_atoms[k], self.size_atoms[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.size_atoms[k], self.dim_embedding) / self.dim_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "atom",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "model.output_atoms(idx).cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(pb.size(0), pb.size(0))",
                            "Call"
                        ],
                        [
                            "graph + weights[k] * (torch.t(trans[k]) @ graph_k @ trans[k])",
                            "BinOp"
                        ],
                        [
                            "graph / tmp1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data[2]",
                            "Subscript"
                        ],
                        [
                            "data[2]",
                            "Subscript"
                        ],
                        [
                            "model.embeddings[idx].cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "MDS(n_components=2, dissimilarity='precomputed').fit_transform(cost)",
                            "Call"
                        ],
                        [
                            "TSNE(n_components=2).fit_transform(emb)",
                            "Call"
                        ],
                        [
                            "data[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_156": {
                "input": {
                    "value": "pb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_157": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "self.size_atoms[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.size_atoms[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "self.size_atoms[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_163": {
                "input": {
                    "value": "trans[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_69": {
                "*size": {
                    "value": "self.size_atoms[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_162": {
                "input": {
                    "value": "trans[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "test_fgwf.py": {
        "sklearn": {
            "KMeans_78": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_init": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_fgwf_noemb.py": {
        "sklearn": {
            "KMeans_74": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "str",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_init": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "methods/AlgOT.py": {
        "torch": {
            "ones_102": {
                "variable": {
                    "value": "all1_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_s.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_103": {
                "variable": {
                    "value": "all1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_t.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "tmp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_s ** 2 @ torch.ones(emb_s.size(1), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_47": {
                "variable": {
                    "value": "tmp3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_t ** 2 @ torch.ones(emb_t.size(1), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_175": {
                "input": {
                    "value": "p_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_187": {
                "variable": {
                    "value": "all1_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_s.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_188": {
                "variable": {
                    "value": "all1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_t.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "dual",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "p_t.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_213": {
                "input": {
                    "value": "p_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_227": {
                "variable": {
                    "value": "all1_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_s.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_228": {
                "variable": {
                    "value": "all1_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_t.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "dual",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p_s.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "p_t.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_42": {
                "input": {
                    "value": "cost_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_45": {
                "input": {
                    "value": "emb_t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_105": {
                "input": {
                    "value": "(dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_111": {
                "input": {
                    "value": "-(cost_mat(cost_s, cost_t, p_s, p_t, aux) + dual) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_157": {
                "input": {
                    "value": "-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_177": {
                "*size": {
                    "value": "p_s.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_215": {
                "*size": {
                    "value": "p_s.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_40": {
                "input": {
                    "value": "cost_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "emb_s.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "emb_t.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_106": {
                "input": {
                    "value": "kernel_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_107": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_113": {
                "input": {
                    "value": "all1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ],
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ],
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "t_158": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_162": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_179": {
                "input": {
                    "value": "-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_219": {
                "input": {
                    "value": "-cost / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_161": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_180": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_184": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_191": {
                "input": {
                    "value": "(dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_197": {
                "input": {
                    "value": "-(cost_mat(cost_s, cost_t, p_s, p_t, aux, emb_s, emb_t) + dual) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_220": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_224": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_231": {
                "input": {
                    "value": "(dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_239": {
                "input": {
                    "value": "-(cost + dual) / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_48": {
                "input": {
                    "value": "tmp3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(emb_t ** 2 @ torch.ones(emb_t.size(1), 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "t_183": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_192": {
                "input": {
                    "value": "kernel_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_193": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_199": {
                "input": {
                    "value": "all1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ],
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ],
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "t_223": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost_mat(cost_s, cost_t, p_s, p_t, tran, emb_s, emb_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp(-cost / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_232": {
                "input": {
                    "value": "kernel_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ],
                        [
                            "torch.exp((dual + 2 * torch.t(cost_s) @ tran @ cost_t) / gamma) * tran",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_233": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel_a) @ all1_s)",
                            "BinOp"
                        ],
                        [
                            "p_t / (torch.t(kernel) @ dual)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_241": {
                "input": {
                    "value": "all1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ],
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ],
                        [
                            "torch.ones(p_t.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "t_105": {
                "input": {
                    "value": "cost_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_191": {
                "input": {
                    "value": "cost_s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_231": {
                "input": {
                    "value": "cost_s",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}