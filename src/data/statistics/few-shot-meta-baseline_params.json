{
    "test_few_shot.py": {
        "sklearn": {
            "roc_auc_score_101": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * k + [0] * k",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "s[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['dataset'], **config['dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(dataset.label, n_batch, n_way, n_shot + n_query, ep_per_batch=ep_per_batch)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.make('meta-baseline', encoder=None)",
                            "Call"
                        ],
                        [
                            "models.load(torch.load(config['load']))",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_50": {
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_53": {
                "f": {
                    "value": "config['load_encoder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query).view(-1, n_way)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs.make_nk_label(n_way, n_query, ep_per_batch=ep_per_batch).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_95": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.encoder(x_shot.view(-1, *img_shape)).reshape(*shot_shape, -1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.normalize(p, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_96": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.encoder(x_query.view(-1, *img_shape)).view(bs, -1, p.shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(q, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_97": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.encoder(x_query.view(-1, *img_shape)).view(bs, -1, p.shape[-1])",
                            "Call"
                        ],
                        [
                            "F.normalize(q, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "p.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/analysis/select_best_model.py": {
        "tensorflow": {
            "DEFINE_string_66": {
                "name": {
                    "value": "all_experiments_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The overall experiments directory root.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "experiment_dir_basenames",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "baseline_imagenet_icml2019_1/3602170,baselinefinetune_imagenet_icml2019_1/3581340",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "A comma-separated list of directory basenames. Adding each basename as a suffix to FLAGS.all_experiments_root forms a path that stores the data of an experiment with multiple variants accross which we want to select the best. Each such path is expected to host a directory named \"summaries\" that contains subdirectories for the different runs with each such subdirectory containing event files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "restrict_to_variants",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "A comma-separated list of variants to restrict to for model selection. This is useful for example for finding the best out of all variants that use a specific embedding or image size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_91": {
                "name": {
                    "value": "restrict_to_variants_by_range",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "A comma-separated list of two integers that represent the start and end range (both inclusive) of variant ids to restrict to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "description",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "best",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The description for the output. The output will then be named as description.pklz and description.txt. For example, this can be used to reflect that some variants were omitted.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_104": {
                "name": {
                    "value": "restrict_to_architectures",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The comma-separated names of the embedding networks to restrict to for model selection.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_108": {
                "name": {
                    "value": "restrict_to_pretrained_source",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['', 'scratch', 'imagenet']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of a  pretrained_source to restrict to for model selection.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_403": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "summary_iterator_265": {
                "path": {
                    "value": "event_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "event_paths",
                            "Name"
                        ]
                    ]
                }
            },
            "info_280": {
                "msg": {
                    "value": "'Did not find any \"mean valid acc\" tags in event_path {}'.format(event_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_288": {
                "msg": {
                    "value": "'Successfully read event_path {} with best_acc {}'.format(event_path, best_acc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_118": {
                "name": {
                    "value": "params_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "listdir_208": {
                "path": {
                    "value": "summary_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, 'summaries')",
                            "Call"
                        ]
                    ]
                }
            },
            "isdir_209": {
                "path": {
                    "value": "os.path.join(summary_dir, fname)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_385": {
                "name": {
                    "value": "output_path_pklz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_experiment_dir, '{}.pklz'.format(description))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_391": {
                "name": {
                    "value": "output_path_txt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_experiment_dir, '{}.txt'.format(description))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_231": {
                "path": {
                    "value": "variant_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_273": {
                "msg": {
                    "value": "'Omitting events from event_path {} because tf.train.summary_iterator(event_path) failed.'.format(event_path)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/analyze.py": {
        "tensorflow": {
            "DEFINE_string_65": {
                "name": {
                    "value": "root_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The root directory to look in for sub-directory trees containing event files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_71": {
                "name": {
                    "value": "eval_imbalance",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to perform only 2-way evaluation for assessing performance as a function of how imbalanced each task is.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_75": {
                "name": {
                    "value": "eval_finegrainedness",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to perform only 2-way ImageNet evaluation for assessing performance as a function of how finegrained each task is. This differs from usual ImageNet eval in the sampling procedure used to get episodes, and therefore requires its own setting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_81": {
                "name": {
                    "value": "eval_finegrainedness_split",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['train', 'valid', 'test']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "The split whose results we want to use for the fine-grainedness analysis.Contrary to most analyses which are performed on the test split only, the fine-grainedness analysis may also be performed on the train or valid sub-graphs of ImageNet too, since the test sub-graph evidently does not exhibit enough variation in the fine-grainedness of its different tasks to allow for a meaningful analysis.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_95": {
                "name": {
                    "value": "restrict_to_subexperiment",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "[str(num) for num in range(11)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "help": {
                    "value": "If positive, restricts to using the summaries in the sub-experiment whose id is the given number. This corresponds to a specific hyper (e.g. choice of evaluation dataset). Valid experiment ids start from \"1\".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_101": {
                "name": {
                    "value": "force_recompute",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to always re-compute (and overwrite) the dictionaries regardless of whether they have already been computed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "summary_iterator_407": {
                "path": {
                    "value": "input_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exists_443": {
                "path": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isdir_463": {
                "path": {
                    "value": "summaries_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, 'summaries')",
                            "Call"
                        ]
                    ]
                }
            },
            "run_639": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_435": {
                "name": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_477": {
                "path": {
                    "value": "child_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "child_dirs",
                            "Name"
                        ]
                    ]
                }
            },
            "GFile_444": {
                "name": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isdir_474": {
                "path": {
                    "value": "child",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "listdir_471": {
                "path": {
                    "value": "summaries_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, 'summaries')",
                            "Call"
                        ]
                    ]
                }
            },
            "make_ndarray_413": {
                "tensor": {
                    "value": "v.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_ndarray_415": {
                "tensor": {
                    "value": "v.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_ndarray_417": {
                "tensor": {
                    "value": "v.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_ndarray_419": {
                "tensor": {
                    "value": "v.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "make_ndarray_421": {
                "tensor": {
                    "value": "v.tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/dataset_spec.py": {
        "tensorflow": {
            "DEFINE_string_39": {
                "name": {
                    "value": "records_root_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory containing a subdirectory per dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exists_861": {
                "path": {
                    "value": "json_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_records_path, 'dataset_spec.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_864": {
                "path": {
                    "value": "pkl_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_records_path, 'dataset_spec.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_862": {
                "name": {
                    "value": "json_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_records_path, 'dataset_spec.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_867": {
                "name": {
                    "value": "pkl_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_records_path, 'dataset_spec.pkl')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_869": {
                "name": {
                    "value": "json_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dataset_records_path, 'dataset_spec.json')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/decoder.py": {
        "tensorflow": {
            "decode_image_59": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.parse_single_example(example_string, features={'image': tf.FixedLenFeature([], dtype=tf.string), 'label': tf.FixedLenFeature([], tf.int64)})['image']",
                            "Subscript"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(image_decoded, [self.image_size, self.image_size], method=tf.image.ResizeMethod.BILINEAR, align_corners=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(image_resized, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_53": {
                "serialized": {
                    "value": "example_string",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([], dtype=tf.string), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[j, j], [j, j], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (image_resized / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image + tf.random_normal(tf.shape(image)) * self.data_augmentation.gaussian_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [self.image_size, self.image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[j, j], [j, j], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_crop_77": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (image_resized / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image + tf.random_normal(tf.shape(image)) * self.data_augmentation.gaussian_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [self.image_size, self.image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[self.image_size, self.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_106": {
                "serialized": {
                    "value": "example_string",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/embedding': tf.FixedLenFeature([self.feat_len], dtype=tf.float32), 'image/class/label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_56": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_57": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_110": {
                "shape": {
                    "value": "[self.feat_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_112": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_71": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (image_resized / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image + tf.random_normal(tf.shape(image)) * self.data_augmentation.gaussian_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [self.image_size, self.image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/decoder_test.py": {
        "tensorflow": {
            "main_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/imagenet_specification.py": {
        "tensorflow": {
            "DEFINE_string_40": {
                "name": {
                    "value": "ilsvrc_2012_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the ImageNet data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "path_to_is_a",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the file containing is-a relationships (parent, child) pairs. If empty, it defaults to \"wordnet.is_a.txt\" in ilsvrc_2012_data_root.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "path_to_words",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the file containing (synset, word description) pairs. If empty, it defaults to \"words.txt\" in ilsvrc_2012_data_root.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_975": {
                "variable": {
                    "value": "wn_ids_2012",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "data_root",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.ilsvrc_2012_data_root",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exists_808": {
                "path": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'longest'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GFile_959": {
                "name": {
                    "value": "path_to_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.path_to_words",
                            "Attribute"
                        ],
                        [
                            "os.path.join(data_root, 'words.txt')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_968": {
                "name": {
                    "value": "path_to_is_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.path_to_is_a",
                            "Attribute"
                        ],
                        [
                            "os.path.join(data_root, 'wordnet.is_a.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_825": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'longest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_809": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'longest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "isdir_978": {
                "path": {
                    "value": "os.path.join(data_root, entry)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "listdir_822": {
                "path": {
                    "value": "synset_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.ilsvrc_2012_data_root, s_2012.wn_id)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/imagenet_specification_test.py": {
        "tensorflow": {
            "main_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/pipeline.py": {
        "tensorflow": {
            "reduce_sum_56": {
                "variable": {
                    "value": "num_actual",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(class_ids >= 0, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_156": {
                "variable": {
                    "value": "support_images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "support_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "elems": {
                    "value": "support_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_fn_158": {
                "variable": {
                    "value": "query_images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "query_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "elems": {
                    "value": "query_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_162": {
                "variable": {
                    "value": "(_, support_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "support_class_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_163": {
                "variable": {
                    "value": "(_, query_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "query_class_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_fn_192": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "batch_decoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "elems": {
                    "value": "example_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "decode_jpeg_222": {
                "variable": {
                    "value": "image_decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.parse_single_example(example_string, features={'image': tf.FixedLenFeature([], dtype=tf.string), 'label': tf.FixedLenFeature([], tf.int64)})['image']",
                            "Subscript"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_313": {
                "variable": {
                    "value": "source_id_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sample_from_datasets_394": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "repeat_459": {
                "variable": {
                    "value": "source_id_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sample_from_datasets_527": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "repeat_390": {
                "variable": {
                    "value": "source_id_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_521": {
                "variable": {
                    "value": "source_id_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "class_ids >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_101": {
                "value": {
                    "value": "example_strings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "chunk_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler.compute_chunk_sizes()",
                            "Call"
                        ],
                        [
                            "sampler.compute_chunk_sizes()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_103": {
                "value": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "chunk_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sampler.compute_chunk_sizes()",
                            "Call"
                        ],
                        [
                            "sampler.compute_chunk_sizes()",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_example_216": {
                "serialized": {
                    "value": "example_string",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([], dtype=tf.string), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "constant_236": {
                "variable": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[j, j], [j, j], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_237": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (image_resized / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image + tf.random_normal(tf.shape(image)) * data_augmentation.gaussian_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[j, j], [j, j], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_crop_238": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (image_resized / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image + tf.random_normal(tf.shape(image)) * data_augmentation.gaussian_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_219": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_220": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (image_resized / 255.0 - 0.5)",
                            "BinOp"
                        ],
                        [
                            "image + tf.random_normal(tf.shape(image)) * data_augmentation.gaussian_noise_std",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/pipeline_test.py": {
        "tensorflow": {
            "main_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/reader.py": {
        "tensorflow": {
            "choose_from_datasets_336": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "class_datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.construct_class_datasets(pool=pool, shuffle=shuffle, shuffle_seed=shuffle_seed)",
                            "Call"
                        ],
                        [
                            "self.construct_class_datasets(pool=pool, repeat=False, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "choice_dataset": {
                    "value": "choice_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.from_generator(choice_generator, tf.int64, tf.TensorShape([]))",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_253": {
                "variable": {
                    "value": "example_string_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.base_path, file_pattern.format(class_id))",
                            "Call"
                        ]
                    ]
                },
                "buffer_size": {
                    "value": "self.read_buffer_size_bytes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_279": {
                "variable": {
                    "value": "class_id_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sample_from_datasets_432": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "class_datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.construct_class_datasets(pool=pool, shuffle=shuffle, shuffle_seed=shuffle_seed)",
                            "Call"
                        ],
                        [
                            "self.construct_class_datasets(pool=pool, repeat=False, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "class_proportions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_examples_per_class / num_examples_per_class.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "seed": {
                    "value": "shuffle_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_335": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "repeat_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/reader_test.py": {
        "tensorflow": {
            "repeat_217": {
                "variable": {
                    "value": "class_id_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_667": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/sampling_test.py": {
        "tensorflow": {
            "main_527": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/data/test_utils.py": {
        "tensorflow": {
            "TFRecordWriter_93": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/dataset_conversion/convert_datasets_to_records.py": {
        "tensorflow": {
            "DEFINE_string_41": {
                "name": {
                    "value": "mini_imagenet_records_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to store the tf.Records of MiniImageNet.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_48": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "omniglot",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to convert to records.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_153": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/dataset_conversion/dataset_to_records.py": {
        "tensorflow": {
            "DEFINE_string_60": {
                "name": {
                    "value": "ilsvrc_2012_num_leaf_images_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "A path used as a cache for a dict mapping the WordNet id of each Synset of a ILSVRC 2012 class to its number of images. If empty, it defaults to \"ilsvrc_2012/num_leaf_images.json\" inside records_root.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "omniglot_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the omniglot data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "aircraft_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the FGVC-Aircraft Benchmark.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_76": {
                "name": {
                    "value": "cu_birds_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the CU-Birds dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "dtd_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the Describable Textures Dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_86": {
                "name": {
                    "value": "quickdraw_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the quickdraw data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_91": {
                "name": {
                    "value": "fungi_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the fungi data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_96": {
                "name": {
                    "value": "vgg_flower_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the VGG Flower data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_101": {
                "name": {
                    "value": "traffic_sign_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the Traffic Sign dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_106": {
                "name": {
                    "value": "mscoco_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the MSCOCO images and annotations. The root directory should have a subdirectory `train2017` and an annotation JSON file `instances_train2017.json`. Both can be downloaded from MSCOCO website: http://cocodataset.org/#download and unzipped into the root directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_115": {
                "name": {
                    "value": "mini_imagenet_data_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the root of the MiniImageNet data.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_121": {
                "name": {
                    "value": "records_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The root directory storing all tf.Records of datasets.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_125": {
                "name": {
                    "value": "splits_root",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "The root directory storing the splits of datasets.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_173": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_281": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_369": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_155": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_158": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_161": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_273": {
                "name": {
                    "value": "class_npy_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_415": {
                "path": {
                    "value": "class_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_root_folder, class_label)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.data_root, 'images', class_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.data_root, 'Final_Training', 'Images', '{:05d}'.format(class_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "isdir_421": {
                "path": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(class_directory, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_505": {
                "path": {
                    "value": "records_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.records_root, name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exists_643": {
                "path": {
                    "value": "self.split_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Features_173": {
                "feature": {
                    "value": "feature_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(((key, feature_fns[feature_type](value)) for (key, feature_type, value) in features))",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_339": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'mini-imagenet-cache-{}.pkl'.format(split))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "makedirs_516": {
                "path": {
                    "value": "FLAGS.splits_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_659": {
                "name": {
                    "value": "self.dataset_spec_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_696": {
                "name": {
                    "value": "self.split_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_806": {
                "path": {
                    "value": "data_path_trainval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'images_background')",
                            "Call"
                        ]
                    ]
                }
            },
            "listdir_812": {
                "path": {
                    "value": "data_path_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'images_evaluation')",
                            "Call"
                        ]
                    ]
                }
            },
            "listdir_830": {
                "path": {
                    "value": "self.data_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_924": {
                "name": {
                    "value": "os.path.join(self.data_root, 'classes.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_997": {
                "name": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGFLOWER_LABELS_PATH",
                            "Name"
                        ],
                        [
                            "TRAFFICSIGN_LABELS_PATH",
                            "Name"
                        ],
                        [
                            "l.split('#')[0].strip()",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_1028": {
                "name": {
                    "value": "imagelabels_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'imagelabels.mat')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_1081": {
                "path": {
                    "value": "os.path.join(self.data_root, 'images')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_1149": {
                "name": {
                    "value": "variants_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'data', 'variants.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_1186": {
                "name": {
                    "value": "bboxes_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'data', 'images_box.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_1197": {
                "name": {
                    "value": "variant_trainval_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'data', 'images_variant_trainval.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_1204": {
                "name": {
                    "value": "variant_test_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'data', 'images_variant_test.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_1267": {
                "name": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VGGFLOWER_LABELS_PATH",
                            "Name"
                        ],
                        [
                            "TRAFFICSIGN_LABELS_PATH",
                            "Name"
                        ],
                        [
                            "l.split('#')[0].strip()",
                            "Call"
                        ]
                    ]
                }
            },
            "isdir_1341": {
                "path": {
                    "value": "image_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_root, image_subdir_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "exists_1346": {
                "path": {
                    "value": "annotation_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_root, annotation_json_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_1348": {
                "name": {
                    "value": "annotation_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_root, annotation_json_name)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_1609": {
                "name": {
                    "value": "os.path.join(self.data_root, 'train.json')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_1611": {
                "name": {
                    "value": "os.path.join(self.data_root, 'val.json')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_1654": {
                "name": {
                    "value": "os.path.join(self.data_root, 'train.json')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_1656": {
                "name": {
                    "value": "os.path.join(self.data_root, 'val.json')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_1762": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "class_records_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_label))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_label))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_label))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.records_path, self.file_pattern.format(class_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_155": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FloatList_158": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BytesList_161": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GFile_644": {
                "name": {
                    "value": "self.split_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_760": {
                "path": {
                    "value": "alphabet_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(alphabets_path, alphabet_folder_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "listdir_967": {
                "path": {
                    "value": "class_directory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_root_folder, class_label)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.data_root, 'images', class_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.data_root, 'Final_Training', 'Images', '{:05d}'.format(class_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_1413": {
                "name": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.image_dir, '%012d.jpg' % image_id)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_1449": {
                "path": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.records_path, self.dataset_spec.file_pattern.format(class_id))",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_1504": {
                "name": {
                    "value": "duplicates_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(AUX_DATA_PATH, 'ImageNet_{}_duplicates.txt'.format(other_dataset))",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_1750": {
                "name": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.data_root, 'mini-imagenet-cache-{}.pkl'.format(split))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "listdir_769": {
                "path": {
                    "value": "class_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(alphabet_path, char_folder_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.data_root, class_npy_fname)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.data_root, synset_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "listdir_1557": {
                "path": {
                    "value": "self.data_root",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isdir_1558": {
                "path": {
                    "value": "os.path.join(self.data_root, entry)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/learner.py": {
        "tensorflow": {
            "conv2d_39": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([input_size, output_size])",
                            "Call"
                        ],
                        [
                            "params[w_name]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_65": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "class_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "class_num_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_181": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "xw_plus_b_222": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([input_size, output_size])",
                            "Call"
                        ],
                        [
                            "params[w_name]",
                            "Subscript"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_variable([output_size])",
                            "Call"
                        ],
                        [
                            "params[b_name]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stop_gradient_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_684": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_827": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unique_937": {
                "variable": {
                    "value": "(episode_classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "episode.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_938": {
                "variable": {
                    "value": "way",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "episode_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_1031": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mse_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.episode.test_labels, logits=self.test_logits)",
                            "Call"
                        ],
                        [
                            "cross_entropy_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.data.test_labels, logits=self.test_logits)",
                            "Call"
                        ],
                        [
                            "cross_entropy_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "cross_entropy + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "cross_entropy + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_train_labels, train_logits)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_test_labels, self.test_logits)",
                            "Call"
                        ],
                        [
                            "loss + self.weight_decay * regularization",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_1405": {
                "variable": {
                    "value": "data_dependent_init_done",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "data_dependent_init_done",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "vectorized_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_images, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vectorized_prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_compute_prototypes(vectorized_embedding, labels)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_classes] + feature_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "batch_normalization_173": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments[scope_name + '/mean']",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(moments[scope_name + '/mean'])",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments[scope_name + '/var']",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(moments[scope_name + '/var'])",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('offset', shape=mean.get_shape().as_list(), initializer=tf.initializers.zeros())",
                            "Call"
                        ],
                        [
                            "params[scope_name + '/offset']",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('scale', shape=var.get_shape().as_list(), initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "params[scope_name + '/scale']",
                            "Subscript"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_182": {
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.shape.as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.truncated_normal(stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.initializers.constant(0.1)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "tf.nn.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_189": {
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.shape.as_list()",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.truncated_normal(stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.initializers.constant(0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_369": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_371": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[aligned_size, aligned_size]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_443": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_521": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "h + b",
                            "BinOp"
                        ],
                        [
                            "relu(h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "h_2",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value(h, -6, 6)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_534": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x + h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-6",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool_639": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, img_w, img_h, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_761": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1159": {
                "variable": {
                    "value": "prototype_extended",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.prototypes, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_test, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1162": {
                "variable": {
                    "value": "test_f_extended",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.test_embeddings, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.way, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_1164": {
                "variable": {
                    "value": "relation_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(prototype_extended, test_f_extended)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1166": {
                "variable": {
                    "value": "relation_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relation_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((prototype_extended, test_f_extended), 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(relation_pairs, [-1] + out_shape + [n_feature * 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + out_shape + [n_feature * 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1169": {
                "variable": {
                    "value": "relations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.relationnet_dict['output']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.way]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1175": {
                "variable": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.episode.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1179": {
                "variable": {
                    "value": "onehot_test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.episode.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_1180": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "onehot_test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.episode.test_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.test_labels, self.way)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1182": {
                "variable": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_1189": {
                "variable": {
                    "value": "self.test_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.test_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1190": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.episode.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.test_predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1252": {
                "variable": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.test_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1255": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1258": {
                "variable": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(test_embeddings - prototypes)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_1264": {
                "variable": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.episode.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_1268": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.episode.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1270": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mse_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.episode.test_labels, logits=self.test_logits)",
                            "Call"
                        ],
                        [
                            "cross_entropy_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.data.test_labels, logits=self.test_logits)",
                            "Call"
                        ],
                        [
                            "cross_entropy_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "cross_entropy + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "cross_entropy + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_train_labels, train_logits)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_test_labels, self.test_logits)",
                            "Call"
                        ],
                        [
                            "loss + self.weight_decay * regularization",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_1271": {
                "variable": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_1278": {
                "variable": {
                    "value": "self.test_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.test_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1279": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.episode.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.test_predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1328": {
                "variable": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.data.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_1335": {
                "variable": {
                    "value": "train_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.train_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_1341": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "self.test_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.nn.l2_normalize(test_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), moments=support_set_moments, reuse=True, backprop_through_moments=self.backprop_through_moments)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "train_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.train_images, self.is_training, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.train_images, self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.train_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.train_embeddings, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.train_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.train_embeddings",
                            "Attribute"
                        ],
                        [
                            "train_embeddings_['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1343": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(test_embeddings, train_embeddings, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1346": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(similarities)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.episode.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.episode.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(train_labels, num_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.train_labels, self.way)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1347": {
                "variable": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, onehot_train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_1353": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.data.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1355": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mse_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.episode.test_labels, logits=self.test_logits)",
                            "Call"
                        ],
                        [
                            "cross_entropy_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.data.test_labels, logits=self.test_logits)",
                            "Call"
                        ],
                        [
                            "cross_entropy_loss + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "cross_entropy + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "cross_entropy + self.weight_decay * regularization",
                            "BinOp"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_train_labels, train_logits)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_test_labels, self.test_logits)",
                            "Call"
                        ],
                        [
                            "loss + self.weight_decay * regularization",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_1356": {
                "variable": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_1386": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_1390": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(w_fc, axis=0, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_fc', [embedding_dims, num_classes], initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_dims, num_classes])",
                            "Call"
                        ],
                        [
                            "w_fc * (g / tf.sqrt(tf.reduce_sum(tf.square(w_fc), [0])))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_1414": {
                "variable": {
                    "value": "w_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_fc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[embedding_dims, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_1420": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "g",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones([num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_1449": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(data_dependent_init_done, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_do_data_dependent_init",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1659": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1660": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits, 1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logits, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1896": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1897": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.way",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_1909": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1910": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.argmax(logits, 1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logits, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1911": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_1999": {
                "variable": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weights_copy",
                            "Name"
                        ],
                        [
                            "2 * prototypes",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(fc_weights)",
                            "Call"
                        ],
                        [
                            "tf.pad(fc_weights, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_depth, MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_2030": {
                "variable": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.data.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_2168": {
                "variable": {
                    "value": "onehot_test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.data.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_2169": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.episode.test_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.test_labels, self.way)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_2170": {
                "variable": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_2177": {
                "variable": {
                    "value": "self.test_predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.test_logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_2178": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.data.test_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.test_predictions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu6_47": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "batch_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "moments_140": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_156": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "mean.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_160": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.ones()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_314": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, strides=[1, stride, stride, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "h + b",
                            "BinOp"
                        ],
                        [
                            "relu(h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(h, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "h_2",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value(h, -6, 6)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "identity",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'resnet18'",
                            "MethodArgument"
                        ],
                        [
                            "'wide_resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'relationnet_convnet'",
                            "MethodArgument"
                        ],
                        [
                            "'four_layer_convnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_403": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_446": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_502": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_523": {
                "name_or_scope": {
                    "value": "identity",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_567": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'resnet18'",
                            "MethodArgument"
                        ],
                        [
                            "'wide_resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'relationnet_convnet'",
                            "MethodArgument"
                        ],
                        [
                            "'four_layer_convnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_643": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, widths[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_688": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'resnet18'",
                            "MethodArgument"
                        ],
                        [
                            "'wide_resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'relationnet_convnet'",
                            "MethodArgument"
                        ],
                        [
                            "'four_layer_convnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pooling2d_708": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_715": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_737": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'resnet18'",
                            "MethodArgument"
                        ],
                        [
                            "'wide_resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'relationnet_convnet'",
                            "MethodArgument"
                        ],
                        [
                            "'four_layer_convnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_831": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'resnet18'",
                            "MethodArgument"
                        ],
                        [
                            "'wide_resnet'",
                            "MethodArgument"
                        ],
                        [
                            "'relationnet_convnet'",
                            "MethodArgument"
                        ],
                        [
                            "'four_layer_convnet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_861": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1006": {
                "variable": {
                    "value": "fc_weights_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(fc_weights.shape.as_list())",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_1009": {
                "variable": {
                    "value": "fc_weights_copy_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "fc_weights_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(fc_weights.shape.as_list()), collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weights_copy",
                            "Name"
                        ],
                        [
                            "2 * prototypes",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(fc_weights)",
                            "Call"
                        ],
                        [
                            "tf.pad(fc_weights, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_depth, MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_1013": {
                "variable": {
                    "value": "fc_bias_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(fc_bias.shape.as_list())",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_1016": {
                "variable": {
                    "value": "fc_bias_copy_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "fc_bias_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(fc_bias.shape.as_list()), collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_bias_copy",
                            "Name"
                        ],
                        [
                            "-tf.square(tf.norm(prototypes, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "tf.pad(fc_bias, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "bias_variable([MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_1125": {
                "msg": {
                    "value": "'RelationNetworkLearner: weight_decay {}'.format(weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1191": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1280": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_1339": {
                "variable": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "self.test_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.nn.l2_normalize(test_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), moments=support_set_moments, reuse=True, backprop_through_moments=self.backprop_through_moments)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_normalize_1389": {
                "variable": {
                    "value": "w_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(w_fc, axis=0, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_fc', [embedding_dims, num_classes], initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_dims, num_classes])",
                            "Call"
                        ],
                        [
                            "w_fc * (g / tf.sqrt(tf.reduce_sum(tf.square(w_fc), [0])))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_1428": {
                "variable": {
                    "value": "b_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_fc",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([num_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_normalize_1433": {
                "variable": {
                    "value": "w_fc_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_fc.read_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1434": {
                "variable": {
                    "value": "output_init",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(w_fc.read_value(), [0])",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_1435": {
                "variable": {
                    "value": "(mean_init, var_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "output_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, w_fc_normalized)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_1609": {
                "variable": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data.train_labels",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.way",
                            "Attribute"
                        ]
                    ]
                }
            },
            "top_k_1625": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-distance",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1626": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1628": {
                "variable": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.episode.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.episode.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(train_labels, num_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.train_labels, self.way)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_1636": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.data.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1637": {
                "variable": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_train_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1661": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_1713": {
                "variable": {
                    "value": "self.finetune_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.finetune_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_1737": {
                "variable": {
                    "value": "embedding_vars_copy_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*embedding_vars_copy_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_1882": {
                "variable": {
                    "value": "finetune_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_1899": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, self.num_train_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, w_fc)",
                            "Call"
                        ],
                        [
                            "logits * cosine_logits_multiplier",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(embeddings, w_fc) + b_fc",
                            "BinOp"
                        ],
                        [
                            "linear_classifier_forward_pass(embeddings, w_fc, b_fc, cosine_classifier, cosine_logits_multiplier, False)",
                            "Call"
                        ],
                        [
                            "linear_classifier_forward_pass(embeddings, w_fc, b_fc, cosine_classifier, cosine_logits_multiplier, True)",
                            "Call"
                        ],
                        [
                            "linear_classifier_logits(embeddings, self.num_train_classes, self.cosine_classifier, self.cosine_logits_multiplier, self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self.forward_pass_fc(self.train_embeddings)",
                            "Call"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self.train_logits",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.forward_pass_fc(self.train_embeddings)",
                            "Call"
                        ],
                        [
                            "self._fc_layer(self.train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "self._fc_layer(train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self._fc_layer(train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "linear_classifier_logits(embedding, MAX_WAY, self.cosine_classifier, self.cosine_logits_multiplier, self.use_weight_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1901": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=self.train_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1902": {
                "variable": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_2002": {
                "variable": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weights_copy",
                            "Name"
                        ],
                        [
                            "2 * prototypes",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(fc_weights)",
                            "Call"
                        ],
                        [
                            "tf.pad(fc_weights, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_depth, MAX_WAY])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, MAX_WAY - tf.shape(fc_weights)[1]]]",
                            "List"
                        ],
                        [
                            "[[0, MAX_WAY - tf.shape(fc_bias)[0]]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_2019": {
                "variable": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_bias_copy",
                            "Name"
                        ],
                        [
                            "-tf.square(tf.norm(prototypes, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "tf.pad(fc_bias, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "bias_variable([MAX_WAY])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0], [0, MAX_WAY - tf.shape(fc_weights)[1]]]",
                            "List"
                        ],
                        [
                            "[[0, MAX_WAY - tf.shape(fc_bias)[0]]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_2080": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(self.episode.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.episode.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.train_labels, self.way)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(train_labels, num_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(self.data.train_labels, self.way)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "train_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(train_embeddings, updated_fc_weights) + updated_fc_bias",
                            "BinOp"
                        ],
                        [
                            "train_logits[:, 0:self.way]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_op_2082": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_2104": {
                "variable": {
                    "value": "zero_weights_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weights_copy",
                            "Name"
                        ],
                        [
                            "2 * prototypes",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(fc_weights)",
                            "Call"
                        ],
                        [
                            "tf.pad(fc_weights, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_depth, MAX_WAY])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros_like(fc_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_2105": {
                "variable": {
                    "value": "zero_bias_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_bias_copy",
                            "Name"
                        ],
                        [
                            "-tf.square(tf.norm(prototypes, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "tf.pad(fc_bias, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "bias_variable([MAX_WAY])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros_like(fc_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_2130": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "inner_step_counter",
                    "type": "str",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_2136": {
                "variable": {
                    "value": "step_and_all_updated_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "_body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "loop_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[step] + embedding_vars + fc_vars",
                            "BinOp"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_2179": {
                "input_tensor": {
                    "value": "tf.cast(correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_97": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(labels, 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.data.labels, tf.int64)",
                            "Call"
                        ],
                        [
                            "self.data.test_labels",
                            "Attribute"
                        ],
                        [
                            "self.data.labels",
                            "Attribute"
                        ],
                        [
                            "tf.cast(labels, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stop_gradient_147": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "moments[scope_name + '/mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_148": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "moments[scope_name + '/var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_scope_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "conv2_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "conv3_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_424": {
                "name_or_scope": {
                    "value": "conv4_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_434": {
                "name_or_scope": {
                    "value": "conv5_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_568": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_585": {
                "name_or_scope": {
                    "value": "conv2_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_602": {
                "name_or_scope": {
                    "value": "conv3_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_615": {
                "name_or_scope": {
                    "value": "conv4_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_628": {
                "name_or_scope": {
                    "value": "embedding_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu6_705": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_707": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pooling2d_758": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_759": {
                "msg": {
                    "value": "'Output of block %d: %s' % (i, layer.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_764": {
                "name_or_scope": {
                    "value": "layer_2_fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_766": {
                "msg": {
                    "value": "'Output layer_2_fc: %s' % layer.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_769": {
                "name_or_scope": {
                    "value": "layer_3_fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "info_771": {
                "msg": {
                    "value": "'Output layer_3_fc: %s' % output.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pooling2d_854": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(layer)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(inputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(layer)",
                            "Call"
                        ],
                        [
                            "relu(layer, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(layer, [2, 2], 2)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_855": {
                "msg": {
                    "value": "'Output of block %d: %s' % (i, layer.shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_973": {
                "variable": {
                    "value": "var_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[tf.GraphKeys.LOCAL_VARIABLES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_975": {
                "variable": {
                    "value": "var_copy_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(shape), collections=[tf.GraphKeys.LOCAL_VARIABLES])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments[scope_name + '/var']",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(moments[scope_name + '/var'])",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1004": {
                "name_or_scope": {
                    "value": "weight_copy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_1034": {
                "input": {
                    "value": "dv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_1155": {
                "input": {
                    "value": "self.test_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1160": {
                "input": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1163": {
                "input": {
                    "value": "self.test_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_1183": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_1189": {
                "input": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1191": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.data.test_labels, self.test_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_1258": {
                "x": {
                    "value": "test_embeddings - prototypes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_1272": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_1278": {
                "input": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1280": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.data.test_labels, self.test_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_1357": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1396": {
                "a": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(embeddings, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(embeddings, axis=1, epsilon=0.001)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(w_fc, axis=0, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_fc', [embedding_dims, num_classes], initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_dims, num_classes])",
                            "Call"
                        ],
                        [
                            "w_fc * (g / tf.sqrt(tf.reduce_sum(tf.square(w_fc), [0])))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "group_1446": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "equal_1450": {
                "x": {
                    "value": "data_dependent_init_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('data_dependent_init_done', initializer=0, dtype=tf.int32, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_1453": {
                "control_inputs": {
                    "value": "[init_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1575": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1612": {
                "variable": {
                    "value": "train_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.train_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1614": {
                "variable": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.test_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_1616": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test_embeddings - train_embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_1639": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "onehot_labels": {
                    "value": "onehot_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, self.num_train_classes)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(labels, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "self.train_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_1641": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=self.train_logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy)",
                            "Call"
                        ],
                        [
                            "tf.losses.softmax_cross_entropy(onehot_labels=onehot_labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1642": {
                "variable": {
                    "value": "regularization",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1648": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_1659": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, w_fc)",
                            "Call"
                        ],
                        [
                            "logits * cosine_logits_multiplier",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(embeddings, w_fc) + b_fc",
                            "BinOp"
                        ],
                        [
                            "linear_classifier_forward_pass(embeddings, w_fc, b_fc, cosine_classifier, cosine_logits_multiplier, False)",
                            "Call"
                        ],
                        [
                            "linear_classifier_forward_pass(embeddings, w_fc, b_fc, cosine_classifier, cosine_logits_multiplier, True)",
                            "Call"
                        ],
                        [
                            "linear_classifier_logits(embeddings, self.num_train_classes, self.cosine_classifier, self.cosine_logits_multiplier, self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self.forward_pass_fc(self.train_embeddings)",
                            "Call"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self.train_logits",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.forward_pass_fc(self.train_embeddings)",
                            "Call"
                        ],
                        [
                            "self._fc_layer(self.train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "self._fc_layer(train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self._fc_layer(train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "linear_classifier_logits(embedding, MAX_WAY, self.cosine_classifier, self.cosine_logits_multiplier, self.use_weight_norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1661": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.data.test_labels, self.test_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_1748": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_1845": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_1887": {
                "name_or_scope": {
                    "value": "fc_finetune",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_1898": {
                "name": {
                    "value": "finetuning_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_1909": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(embeddings, w_fc)",
                            "Call"
                        ],
                        [
                            "logits * cosine_logits_multiplier",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(embeddings, w_fc) + b_fc",
                            "BinOp"
                        ],
                        [
                            "linear_classifier_forward_pass(embeddings, w_fc, b_fc, cosine_classifier, cosine_logits_multiplier, False)",
                            "Call"
                        ],
                        [
                            "linear_classifier_forward_pass(embeddings, w_fc, b_fc, cosine_classifier, cosine_logits_multiplier, True)",
                            "Call"
                        ],
                        [
                            "linear_classifier_logits(embeddings, self.num_train_classes, self.cosine_classifier, self.cosine_logits_multiplier, self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self.forward_pass_fc(self.train_embeddings)",
                            "Call"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self.train_logits",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.forward_pass_fc(self.train_embeddings)",
                            "Call"
                        ],
                        [
                            "self._fc_layer(self.train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "self._fc_layer(train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "self.test_logits",
                            "Attribute"
                        ],
                        [
                            "self._fc_layer(train_embeddings)[:, 0:self.way]",
                            "Subscript"
                        ],
                        [
                            "linear_classifier_logits(embedding, MAX_WAY, self.cosine_classifier, self.cosine_logits_multiplier, self.use_weight_norm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_1911": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.data.test_labels, self.test_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_2016": {
                "x": {
                    "value": "tf.norm(prototypes, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_2036": {
                "name_or_scope": {
                    "value": "linear_classifier",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_2084": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "['step: ', step, updated_fc_bias[0], 'loss:', loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_2128": {
                "control_inputs": {
                    "value": "fc_vars_init_ops + embedding_vars_copy_ops",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_2171": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_2177": {
                "input": {
                    "value": "self.test_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_2179": {
                "x": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.episode.test_labels, self.test_predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(labels, predictions)",
                            "Call"
                        ],
                        [
                            "tf.equal(self.data.test_labels, self.test_predictions)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_210": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_323": {
                "name_or_scope": {
                    "value": "projection_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_369": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.layers.flatten(x),)",
                            "Tuple"
                        ],
                        [
                            "tf.nn.xw_plus_b(x, w, b)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "conv2d(x, w_conv, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "relu(x + h, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(x, size=[aligned_size, aligned_size], align_corners=True)",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, 3, 3, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis=[1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 512])",
                            "Call"
                        ],
                        [
                            "relu(x, use_bounded_activation=use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(x, ksize=[1, img_w, img_h, 1], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, widths[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_370": {
                "x": {
                    "value": "tf.ceil(size / 32.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_525": {
                "name_or_scope": {
                    "value": "projection_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_586": {
                "name_or_scope": {
                    "value": "wide_block_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_603": {
                "name_or_scope": {
                    "value": "wide_block_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_616": {
                "name_or_scope": {
                    "value": "wide_block_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_690": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_739": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_833": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ],
                        [
                            "tf.AUTO_REUSE",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_971": {
                "name_or_scope": {
                    "value": "weight_copy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_1007": {
                "shape": {
                    "value": "fc_weights.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1014": {
                "shape": {
                    "value": "fc_bias.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1416": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_1423": {
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_1437": {
                "x": {
                    "value": "var_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_1438": {
                "ref": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('g', dtype=tf.float32, initializer=tf.ones([num_classes]), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "g_init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / tf.sqrt(var_init + 1e-10)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_1445": {
                "ref": {
                    "value": "data_dependent_init_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('data_dependent_init_done', initializer=0, dtype=tf.int32, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_1455": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(w_fc), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_1618": {
                "variable": {
                    "value": "train_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.train_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_1619": {
                "variable": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.test_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_1638": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_1760": {
                "variable": {
                    "value": "fc_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "fc_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fc_weights, fc_bias]",
                            "List"
                        ],
                        [
                            "[pmaml_fc_weights, pmaml_fc_bias]",
                            "List"
                        ]
                    ]
                }
            },
            "no_op_1765": {
                "variable": {
                    "value": "adam_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_1826": {
                "control_inputs": {
                    "value": "[finetune_op] + vars_to_finetune",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "print_1847": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "['accuracy: ', self._compute_accuracy(logits, self.data.train_labels), 'test accuracy: ', self._compute_accuracy(test_logits, self.data.test_labels)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_1903": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_2016": {
                "tensor": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_sums / class_num_images",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(vectorized_prototypes, [n_classes] + feature_shape)",
                            "Call"
                        ],
                        [
                            "_compute_prototypes(embeddings, labels)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.prototypes, 0)",
                            "Call"
                        ],
                        [
                            "compute_prototypes(train_embeddings, onehot_train_labels)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_2076": {
                "a": {
                    "value": "train_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.train_images, self.is_training, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.train_images, self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.train_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.train_embeddings, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.train_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.train_embeddings",
                            "Attribute"
                        ],
                        [
                            "train_embeddings_['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "updated_fc_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_2086": {
                "control_inputs": {
                    "value": "[print_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_2104": {
                "input": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weights_copy",
                            "Name"
                        ],
                        [
                            "2 * prototypes",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(fc_weights)",
                            "Call"
                        ],
                        [
                            "tf.pad(fc_weights, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_depth, MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_2105": {
                "input": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_bias_copy",
                            "Name"
                        ],
                        [
                            "-tf.square(tf.norm(prototypes, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "tf.pad(fc_bias, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "bias_variable([MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_2164": {
                "a": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "self.test_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.nn.l2_normalize(test_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), moments=support_set_moments, reuse=True, backprop_through_moments=self.backprop_through_moments)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "updated_fc_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ceil_370": {
                "x": {
                    "value": "size / 32.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_406": {
                "name_or_scope": {
                    "value": "'bottleneck_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "'bottleneck_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "'bottleneck_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "'bottleneck_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_596": {
                "name_or_scope": {
                    "value": "'wide_block_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "'wide_block_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_622": {
                "name_or_scope": {
                    "value": "'wide_block_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_974": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1429": {
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_1442": {
                "ref": {
                    "value": "b_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_variable('b_fc', initializer=tf.zeros([num_classes]), trainable=True)",
                            "Call"
                        ],
                        [
                            "bias_variable([num_classes])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "b_fc_init_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-mean_init * g_init_value",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_1455": {
                "input_tensor": {
                    "value": "tf.square(w_fc)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_1643": {
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_1770": {
                "variable": {
                    "value": "adam_reset",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.finetune_opt.variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_1774": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_1799": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_1853": {
                "control_inputs": {
                    "value": "[print_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_1046": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "updated_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Name"
                        ],
                        [
                            "v - learning_rate * dv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_1455": {
                "x": {
                    "value": "w_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(w_fc, axis=0, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w_fc', [embedding_dims, num_classes], initializer=tf.random_normal_initializer(0, 0.05), trainable=True)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_dims, num_classes])",
                            "Call"
                        ],
                        [
                            "w_fc * (g / tf.sqrt(tf.reduce_sum(tf.square(w_fc), [0])))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_1620": {
                "a": {
                    "value": "test_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, 1)",
                            "Call"
                        ],
                        [
                            "self.test_embeddings",
                            "Attribute"
                        ],
                        [
                            "tf.nn.l2_normalize(test_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, moments=support_set_moments, backprop_through_moments=self.backprop_through_moments)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.test_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.test_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), moments=support_set_moments, reuse=True, backprop_through_moments=self.backprop_through_moments)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "train_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fn(self.episode.train_images, self.is_training, keep_spatial_dims=True)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.episode.train_images, self.is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.train_embeddings, 1, epsilon=0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(self.train_embeddings, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(self.train_embeddings, axis=1)",
                            "Call"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(self.embedding_vars_keys, self.embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.train_embeddings",
                            "Attribute"
                        ],
                        [
                            "train_embeddings_['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ],
                        [
                            "self.embedding_fn(self.data.train_images, self.is_training, params=collections.OrderedDict(zip(embedding_vars_keys, updated_embedding_vars)), reuse=True)['embeddings']",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_1771": {
                "control_inputs": {
                    "value": "[fc_reset, adam_reset, finetune_loss, embedding_vars_copy_op] + vars_to_finetune",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "print_1776": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "['step: %d' % i, vars_to_finetune[0][0, 0], 'loss:', finetune_loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_1797": {
                "control_inputs": {
                    "value": "[finetune_op, finetune_loss] + vars_to_finetune",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "print_1801": {
                "variable": {
                    "value": "print_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "['step: %d' % i, vars_to_finetune[0][0, 0], 'loss:', finetune_loss, 'accuracy:', self._compute_accuracy(logits, self.data.train_labels), 'test accuracy:', self._compute_accuracy(test_logits, self.data.test_labels)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1767": {
                "name_or_scope": {
                    "value": "adam_opt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_1781": {
                "control_inputs": {
                    "value": "[print_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_1809": {
                "control_inputs": {
                    "value": "[print_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_2001": {
                "input": {
                    "value": "fc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_weights_copy",
                            "Name"
                        ],
                        [
                            "2 * prototypes",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(fc_weights)",
                            "Call"
                        ],
                        [
                            "tf.pad(fc_weights, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "weight_variable([embedding_depth, MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_2018": {
                "input": {
                    "value": "fc_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_bias_copy",
                            "Name"
                        ],
                        [
                            "-tf.square(tf.norm(prototypes, axis=1))",
                            "UnaryOp"
                        ],
                        [
                            "tf.pad(fc_bias, paddings, 'CONSTANT', constant_values=0)",
                            "Call"
                        ],
                        [
                            "bias_variable([MAX_WAY])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "meta-dataset/meta_dataset/train.py": {
        "tensorflow": {
            "DEFINE_string_52": {
                "name": {
                    "value": "train_checkpoint_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.join(DEFAULT_SAVING_DIRECTORY, 'checkpoints')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory to save checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "summary_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.join(DEFAULT_SAVING_DIRECTORY, 'summaries')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory for writing summaries.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_58": {
                "name": {
                    "value": "reload_checkpoint_gin_config",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to reload an operative Gin configuration along with a checkpoint for evaluation or a pretrained checkpoint.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_63": {
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether we are in the training phase. Used to control whether to perform training or evaluation.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_multi_string_67": {
                "name": {
                    "value": "gin_config",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "List of paths to the config files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_multi_string_69": {
                "name": {
                    "value": "gin_bindings",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "List of Gin parameter bindings.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_72": {
                "name": {
                    "value": "eval_imbalance_dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "A dataset on which to perform evaluation for assessing how class imbalance affects performance in binary episodes. By default it is empty and no imbalance analysis is performed.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_77": {
                "name": {
                    "value": "eval_finegrainedness",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to perform only 2-way ImageNet evaluation for assessing performance as a function of how finegrained each task is. This differs from usual ImageNet eval in the sampling procedure used to get episodes, and therefore requires its own setting.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_enum_83": {
                "name": {
                    "value": "eval_finegrainedness_split",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "trainer.TRAIN_SPLIT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "[trainer.TRAIN_SPLIT, trainer.VALID_SPLIT, trainer.TEST_SPLIT]",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "The split whose results we want to use for the fine-grainedness analysis.Contrary to most analyses which are performed on the test split only, the fine-grainedness analysis may also be performed on the train or valid sub-graphs of ImageNet too, since the test sub-graph evidently does not exhibit enough variation in the fine-grainedness of its different tasks to allow for a meaningful analysis.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_multi_enum_115": {
                "name": {
                    "value": "omit_from_saving_and_reloading",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "['num_left_in_epoch', 'fc_finetune', 'linear_classifier', 'adam_opt', 'weight_copy']",
                    "type": "List",
                    "possible_values": []
                },
                "enum_values": {
                    "value": "['num_left_in_epoch', 'fc_finetune', 'linear_classifier', 'adam_opt', 'weight_copy', 'fc']",
                    "type": "List",
                    "possible_values": []
                },
                "help": {
                    "value": "A comma-separated list of substrings such that all variables containing them should not be saved and reloaded.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exists_156": {
                "path": {
                    "value": "gin_log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "operative_config_path(checkpoint_dir)",
                            "Call"
                        ],
                        [
                            "operative_config_path(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_270": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rename_157": {
                "src": {
                    "value": "gin_log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "operative_config_path(checkpoint_dir)",
                            "Call"
                        ],
                        [
                            "operative_config_path(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                },
                "dst": {
                    "value": "gin_log_file + '.old'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GFile_158": {
                "name": {
                    "value": "gin_log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "operative_config_path(checkpoint_dir)",
                            "Call"
                        ],
                        [
                            "operative_config_path(checkpoint_dir)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/trainer.py": {
        "tensorflow": {
            "Options_55": {
                "variable": {
                    "value": "TF_DATA_OPTIONS",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unique_167": {
                "variable": {
                    "value": "(class_ids, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "episode.train_class_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_less_172": {
                "variable": {
                    "value": "check_valid_inds_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(way), [way, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(num_images_per_class)[0]",
                            "Subscript"
                        ],
                        [
                            "data_spec.get_classes(get_split_enum(split))",
                            "Call"
                        ]
                    ]
                }
            },
            "truediv_178": {
                "variable": {
                    "value": "class_props",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(is_equal, tf.int32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_images_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dataset_spec.get_total_images_per_class(class_id) for class_id in range(num_dataset_classes)]",
                            "ListComp"
                        ],
                        [
                            "tf.gather(num_images_per_class, class_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_217": {
                "variable": {
                    "value": "(episode_classes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "episode.train_labels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "size_218": {
                "variable": {
                    "value": "way",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "episode_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(way)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[way, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "episode.train_labels",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_222": {
                "variable": {
                    "value": "is_equal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(way), [way, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "shots",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(is_equal, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_225": {
                "variable": {
                    "value": "(class_ids, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "episode.train_class_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_175": {
                "variable": {
                    "value": "num_images_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "num_images_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dataset_spec.get_total_images_per_class(class_id) for class_id in range(num_dataset_classes)]",
                            "ListComp"
                        ],
                        [
                            "tf.gather(num_images_per_class, class_ids)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "class_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(way), [way, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_545": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_617": {
                "variable": {
                    "value": "self.standard_summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "standard_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "merge_618": {
                "variable": {
                    "value": "self.evaluation_summaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "evaluation_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.add_eval_summaries()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_collection_1094": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_1185": {
                "variable": {
                    "value": "mean_acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_1187": {
                "variable": {
                    "value": "ci_acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_1195": {
                "variable": {
                    "value": "way_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_way' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.way[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_summary_1196": {
                "variable": {
                    "value": "shots_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_shots' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.shots[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_summary_1198": {
                "variable": {
                    "value": "classes_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_class_ids' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.class_ids[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_summary_1200": {
                "variable": {
                    "value": "logits_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_test_logits' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.test_logits[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_summary_1202": {
                "variable": {
                    "value": "targets_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_test_targets' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.test_targets[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_171": {
                "input": {
                    "value": "num_images_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dataset_spec.get_total_images_per_class(class_id) for class_id in range(num_dataset_classes)]",
                            "ListComp"
                        ],
                        [
                            "tf.gather(num_images_per_class, class_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_173": {
                "control_inputs": {
                    "value": "[check_valid_inds_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_223": {
                "x": {
                    "value": "is_equal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(class_labels, class_ids)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_517": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_527": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learner_config.learning_rate",
                            "Attribute"
                        ],
                        [
                            "tf.train.exponential_decay(self.learner_config.learning_rate, global_step, decay_steps=self.learner_config.decay_every, decay_rate=self.learner_config.decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_538": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_608": {
                "variable": {
                    "value": "loss_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_loss' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.losses[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_609": {
                "variable": {
                    "value": "acc_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_acc' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.accs[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FileWriter_623": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_783": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_785": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_797": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_855": {
                "variable": {
                    "value": "backbone_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "baselinelearner_embed_vars_to_reload",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_1102": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_summary_1205": {
                "variable": {
                    "value": "class_props_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s_class_props' % split",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.class_props[split]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exponential_decay_520": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learner_config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.identity(tf.train.get_global_step())",
                            "Call"
                        ],
                        [
                            "self.sess.run(tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "self.learner_config.decay_every",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.learner_config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_526": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learner_config.learning_rate",
                            "Attribute"
                        ],
                        [
                            "tf.train.exponential_decay(self.learner_config.learning_rate, global_step, decay_steps=self.learner_config.decay_every, decay_rate=self.learner_config.decay_rate, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_800": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_812": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_838": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_1095": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_1101": {
                "control_inputs": {
                    "value": "[self.train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_global_step_1107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exists_548": {
                "path": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_549": {
                "path": {
                    "value": "self.checkpoint_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_624": {
                "path": {
                    "value": "self.summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_625": {
                "path": {
                    "value": "self.summary_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_743": {
                "msg": {
                    "value": "'Restrictions for dataset {}:'.format(dataset_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_global_step_1102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_746": {
                "msg": {
                    "value": "'\\t split {} is restricted to {} classes'.format(split, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_818": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_819": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_825": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/meta_dataset/trainer_test.py": {
        "tensorflow": {
            "main_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/train_classifier.py": {
        "tensorflow": {
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_59": {
                "variable": {
                    "value": "model_sv",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(model_sv)",
                            "Call"
                        ],
                        [
                            "models.make(config['model'], **config['model_args'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_107": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_167": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-ex.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/train_meta.py": {
        "tensorflow": {
            "Session_58": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_65": {
                "variable": {
                    "value": "model_sv",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(model_sv)",
                            "Call"
                        ],
                        [
                            "models.make(config['model'], **config['model_args'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "e[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "e[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "e[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "e[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(e[ii])",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "trlog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'trlog.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_71": {
                "f": {
                    "value": "config['load_encoder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/train_multi_classifier.py": {
        "tensorflow": {
            "Session_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_68": {
                "variable": {
                    "value": "model_sv",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(model_sv)",
                            "Call"
                        ],
                        [
                            "models.make(config['model'], **config['model_args'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_123": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data, cfr_id=ds_id)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_183": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-ex.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/use_meta_dataset.py": {
        "tensorflow": {}
    },
    "datasets/image_folder.py": {
        "torch": {
            "tensor_56": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/mini_imagenet.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/samplers.py": {
        "torch": {
            "stack_34": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_32": {
                "variable": {
                    "value": "episode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "episode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(episode)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice(self.catlocs[c], self.n_per, replace=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/tiered_imagenet.py": {
        "torch": {
            "tensor_81": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_params['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "norm_params['std']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/models/classifier.py": {
        "torch": {
            "ModuleList_40": {
                "variable": {
                    "value": "self.classifiers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "classifiers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(n_classes, in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_64": {
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/models/convnet4.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block(x_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/models/meta_baseline.py": {
        "torch": {
            "cat_25": {
                "variable": {
                    "value": "x_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_shot, x_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(proto)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_40": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.compute_logits(x_query, proto, metric='cos', temp=self.temp)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_query",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(temp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "meta-dataset/models/models.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/models/resnet.py": {
        "torch": {
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_141": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/models/resnet12.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "meta-dataset/utils.py": {
        "torch": {
            "SGD_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_134": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(params, lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_81": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proto.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_144": {
                "tensors": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_83": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(feat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.normalize(proto, dim=-1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_91": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proto.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(feat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.normalize(proto, dim=-1).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(feat, proto.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(F.normalize(feat, dim=-1), F.normalize(proto, dim=-1).t())",
                            "Call"
                        ],
                        [
                            "torch.bmm(feat, proto.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "-(feat.unsqueeze(1) - proto.unsqueeze(0)).pow(2).sum(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.bmm(F.normalize(feat, dim=-1), F.normalize(proto, dim=-1).permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "-(feat.unsqueeze(2) - proto.unsqueeze(1)).pow(2).sum(dim=-1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_83": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_84": {
                "input": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_93": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_94": {
                "input": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_94": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/classifier.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.proto",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(n_classes, in_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_43": {
                "*size": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/convnet4.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block(x_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_9": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_11": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/meta_baseline.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.temp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(temp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_38": {
                "variable": {
                    "value": "x_shot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_shot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shot.view(-1, *img_shape)",
                            "Call"
                        ],
                        [
                            "x_shot.view(*shot_shape, -1)",
                            "Call"
                        ],
                        [
                            "x_shot.mean(dim=-2)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_shot, dim=-1)",
                            "Call"
                        ],
                        [
                            "x_shot.mean(dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_39": {
                "variable": {
                    "value": "x_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_query.view(-1, *img_shape)",
                            "Call"
                        ],
                        [
                            "x_query.view(*query_shape, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_query, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "[x_shot, x_query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_141": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet12.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_classifier.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['train_dataset'], **config['train_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['val_dataset'], **config['val_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "model_sv",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(model_sv)",
                            "Call"
                        ],
                        [
                            "models.make(config['model'], **config['model_args'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "fs_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "fs_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['fs_dataset'], **config['fs_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "fs_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(fs_dataset.label, 200, n_way, n_shot + n_query, ep_per_batch=4)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "fs_model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "fs_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.make('meta-baseline', encoder=None)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(fs_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['train_dataset'], **config['train_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_150": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "fs_model(x_shot, x_query).view(-1, n_way)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs.make_nk_label(n_way, n_query, ep_per_batch=4).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_250": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-ex.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_169": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "fs_model(x_shot, x_query).view(-1, n_way)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs.make_nk_label(n_way, n_query, ep_per_batch=4).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_253": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_258": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_meta.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['train_dataset'], **config['train_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(train_dataset.label, config['train_batches'], n_train_way, n_train_shot + n_query, ep_per_batch=ep_per_batch)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['val_dataset'], **config['val_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(val_dataset.label, 200, n_way, n_shot + n_query, ep_per_batch=4)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "tval_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make(config['tval_dataset'], **config['tval_dataset_args'])",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "tval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(tval_dataset.label, 200, n_way, n_shot + n_query, ep_per_batch=4)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_106": {
                "variable": {
                    "value": "model_sv",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config['load']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_116": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.load(model_sv)",
                            "Call"
                        ],
                        [
                            "models.make(config['model'], **config['model_args'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_156": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query).view(-1, n_train_way)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(x_shot, x_query).view(-1, n_way)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs.make_nk_label(n_train_way, n_query, ep_per_batch=ep_per_batch).cuda()",
                            "Call"
                        ],
                        [
                            "fs.make_nk_label(n_way, n_query, ep_per_batch=4).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_244": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-last.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_245": {
                "obj": {
                    "value": "trlog",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'trlog.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'epoch-{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "save_obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'file': __file__, 'config': config, 'model': config['model'], 'model_args': config['model_args'], 'model_sd': model_.state_dict(), 'training': training}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_path, 'max-va.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_188": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_shot, x_query).view(-1, n_train_way)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "model(x_shot, x_query).view(-1, n_way)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fs.make_nk_label(n_train_way, n_query, ep_per_batch=ep_per_batch).cuda()",
                            "Call"
                        ],
                        [
                            "fs.make_nk_label(n_way, n_query, ep_per_batch=4).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_112": {
                "f": {
                    "value": "config['load_encoder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/__init__.py": {
        "torch": {
            "SGD_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiStepLR_136": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SGD(params, lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "Adam(params, lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_83": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proto.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mm_85": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(feat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.normalize(proto, dim=-1).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "proto.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_95": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(feat, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "F.normalize(proto, dim=-1).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_105": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(feat, proto.t())",
                            "Call"
                        ],
                        [
                            "torch.mm(F.normalize(feat, dim=-1), F.normalize(proto, dim=-1).t())",
                            "Call"
                        ],
                        [
                            "torch.bmm(feat, proto.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "-(feat.unsqueeze(1) - proto.unsqueeze(0)).pow(2).sum(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.bmm(F.normalize(feat, dim=-1), F.normalize(proto, dim=-1).permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "-(feat.unsqueeze(2) - proto.unsqueeze(1)).pow(2).sum(dim=-1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_85": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_86": {
                "input": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "t_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_95": {
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_96": {
                "input": {
                    "value": "proto",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_96": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/few_shot.py": {
        "torch": {
            "arange_14": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_14": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}