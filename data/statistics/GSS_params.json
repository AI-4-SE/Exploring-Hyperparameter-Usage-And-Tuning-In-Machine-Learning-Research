{
    "model.py": {
        "tensorflow": {
            "convert_to_tensor_19": {
                "variable": {
                    "value": "constant_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(self.hidden_units, self.hidden_units) * self.init_weights",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "constant_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(init_w, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizer",
                            "Method Argument"
                        ],
                        [
                            "regularizer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_23": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_units]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_27": {
                "variable": {
                    "value": "pre_nonlinearity",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(Ax, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='b', shape=[self.hidden_units], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_28": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "pre_nonlinearity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(Ax, W), B)",
                            "Call"
                        ],
                        [
                            "self.gcn_layer(x, adj, i, regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_35": {
                "variable": {
                    "value": "self.hidden_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gcn_layer(x, adj, i, regularizer)",
                            "Call"
                        ],
                        [
                            "residual + self.layer_decay * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "adj_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.hidden_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self.hidden_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "adj_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "adj_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.hidden_emb, tf.transpose(self.hidden_emb))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(adj_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_59": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * self.alpha * (logits - self.beta) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "'GCN_{}'.format(i_layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "a": {
                    "value": "Ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(adj, x)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', dtype=tf.float32, initializer=constant_init, regularizer=regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_36": {
                "a": {
                    "value": "self.hidden_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "placeholder_81": {
                "variable": {
                    "value": "features_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_placeholder_82": {
                "variable": {
                    "value": "adj_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_93": {
                "variable": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_93": {
                "variable": {
                    "value": "training_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_94": {
                "variable": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "model.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "beta_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_109": {
                "variable": {
                    "value": "reg_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_119": {
                "variable": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_120": {
                "config": {
                    "value": "session_conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/helper.py": {
        "tensorflow": {
            "SparseTensorValue_85": {
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mat([coo.row, coo.col]).transpose()",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "coo.data.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "coo.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}