{
    "difflogic/dataset/graph/dataset.py": {
        "torch": {}
    },
    "difflogic/myutils.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_30": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/baselines/lstm.py": {
        "torch": {
            "LSTM_45": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_dim",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.zeros(binary_ids.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "binary_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "binary_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.binarize_code(ids)",
                            "Call"
                        ],
                        [
                            "torch.tensor(binary_ids, dtype=relations.dtype, device=relations.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "binary_ids2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meshgrid(binary_ids, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "rels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[binary_ids2, relations]",
                            "List"
                        ],
                        [
                            "[binary_ids2, padding, relations]",
                            "List"
                        ],
                        [
                            "torch.cat(rels, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "h0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "c0",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*binary_ids2.size()[:-1]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "attributes.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*binary_ids.size()[:-1]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "relations.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[binary_ids, zeros, attributes, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "input_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_seq, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[binary_ids, expanded_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "[binary_ids2, expanded_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/baselines/memory_net.py": {
        "torch": {
            "LSTMCell_49": {
                "variable": {
                    "value": "self.lstm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "value_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "binary_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "binary_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.binarize_code(ids)",
                            "Call"
                        ],
                        [
                            "torch.tensor(binary_ids, dtype=relations.dtype, device=relations.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "relations.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "relations.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "binary_ids2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "meshgrid(binary_ids, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "padded_binary_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[binary_ids, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "rels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rels",
                    "type": "List",
                    "possible_values": [
                        [
                            "[binary_ids2, relations]",
                            "List"
                        ],
                        [
                            "[binary_ids2, padding, relations]",
                            "List"
                        ],
                        [
                            "torch.cat(rels, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padded_binary_ids, attributes, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory, attributes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(query, keys)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_98": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(torch.bmm(query, keys), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed(self.value_embed, memory)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_97": {
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "padded_binary_ids if self.feature_dim == 1 else binary_ids2",
                            "IfExp"
                        ],
                        [
                            "embed(self.query_embed, query).view(batch_size, nr_items, -1)",
                            "Call"
                        ],
                        [
                            "self.to_query(h0).view(batch_size, nr_items, self.key_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "keys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed(self.key_embed, memory).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "difflogic/nn/critic.py": {
        "torch": {
            "GRU_31": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim_state",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.layers1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim_state, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.layers3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.layers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(output_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.layers3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "st",
                            "Name"
                        ],
                        [
                            "self.layers1(st)",
                            "Call"
                        ],
                        [
                            "self.layers2(f)",
                            "Call"
                        ],
                        [
                            "self.layers3(f)",
                            "Call"
                        ],
                        [
                            "self.nlm(inp, depth=None)",
                            "Call"
                        ],
                        [
                            "f[self.feature_axis]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(f, dim=1)",
                            "Call"
                        ],
                        [
                            "self.layers2(f)",
                            "Call"
                        ],
                        [
                            "self.layers3(f)",
                            "Call"
                        ],
                        [
                            "states.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.layer1(f)",
                            "Call"
                        ],
                        [
                            "self.layer2(f)",
                            "Call"
                        ],
                        [
                            "f.reshape(f.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(f)",
                            "Call"
                        ],
                        [
                            "self.fc2(f)",
                            "Call"
                        ],
                        [
                            "torch.cat(d1, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([allstates[0], f], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat(d1, dim=1)",
                            "Call"
                        ],
                        [
                            "self.fc1(f)",
                            "Call"
                        ],
                        [
                            "self.fc2(f)",
                            "Call"
                        ],
                        [
                            "states.reshape((states.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.layers1(f)",
                            "Call"
                        ],
                        [
                            "self.layers2(f)",
                            "Call"
                        ],
                        [
                            "self.layers3(f)",
                            "Call"
                        ],
                        [
                            "self.nlm(inp, depth=None)[2]",
                            "Subscript"
                        ],
                        [
                            "self.nlm(inp, depth=None)[self.feature_axis][2]",
                            "Subscript"
                        ],
                        [
                            "self.lastlayer(f)",
                            "Call"
                        ],
                        [
                            "states.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.layer1(f)",
                            "Call"
                        ],
                        [
                            "self.linear(f)",
                            "Call"
                        ],
                        [
                            "states.transpose(1, 3)",
                            "Call"
                        ],
                        [
                            "self.layer1(f)",
                            "Call"
                        ],
                        [
                            "self.linear(f)",
                            "Call"
                        ],
                        [
                            "self.mixed_part(states)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([states, f], -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(f)",
                            "Call"
                        ],
                        [
                            "self.fc2(f)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channel, 32, kernel_size=5, stride=1, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 64, kernel_size=5, stride=1, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.drop_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(64 * nbobject, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_185": {
                "variable": {
                    "value": "self.layer1DtoScalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inter_size",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inter_size * 3 + hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d1",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d1",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.layers1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim_state, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "self.layers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.layers3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "n_action_func(input_dim_state)",
                            "Call"
                        ],
                        [
                            "nbobject[0]",
                            "Subscript"
                        ],
                        [
                            "nbobject[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.lastlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nlm.output_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_action_func(input_dim_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*l",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_358": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_flatten",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.layer1(torch.zeros(size=nbobject).unsqueeze(0).transpose(1, 3)).shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.layer1(torch.zeros(size=nbobject).unsqueeze(0).transpose(1, 3)).shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_417": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*l",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_423": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_flatten",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.layer1(torch.zeros(size=nbobject).unsqueeze(0).transpose(1, 3)).shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.layer1(torch.zeros(size=nbobject).unsqueeze(0).transpose(1, 3)).shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_ac",
                    "type": "Name",
                    "possible_values": [
                        [
                            "n_action_func(nbobject)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_442": {
                "variable": {
                    "value": "self.mixed_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_channel",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_450": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inter_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_453": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_459": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states, f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.layer2Dto1D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.GRU(self.input_channel[2], hidden_size, num_layers, batch_first=True, bidirectional=False)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[allstates[0], f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_46": {
                "n": {
                    "value": "f.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "input_dim_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(input_dim_state).prod()",
                            "Call"
                        ],
                        [
                            "input_dim_state[0]",
                            "Subscript"
                        ],
                        [
                            "np.array(input_dim_state).prod()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "output_size + self.nlm.output_dims[i] * input_dim_state ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "nbobject[-1]",
                            "Subscript"
                        ],
                        [
                            "nbobject[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_137": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_142": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "64 * nbobject",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "inter_size * 3 + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_218": {
                "tensors": {
                    "value": "sd1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_219": {
                "tensors": {
                    "value": "sd2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_249": {
                "in_features": {
                    "value": "input_dim_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(input_dim_state).prod()",
                            "Call"
                        ],
                        [
                            "input_dim_state[0]",
                            "Subscript"
                        ],
                        [
                            "np.array(input_dim_state).prod()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_252": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "nbobject[-1]",
                            "Subscript"
                        ],
                        [
                            "nbobject[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_402": {
                "in_channels": {
                    "value": "input_channel",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "nbobject[-1]",
                            "Subscript"
                        ],
                        [
                            "nbobject[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel1",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_451": {
                "in_features": {
                    "value": "inter_size",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "hidden_size * 2 + 6 * self.input_channel[2] + self.input_channel[1]",
                            "BinOp"
                        ],
                        [
                            "hidden_size * 2 + input_channel",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel2",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel1 // 2",
                            "BinOp"
                        ],
                        [
                            "kernel2 // 2",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_356": {
                "size": {
                    "value": "nbobject",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(nbobject)[:2].prod()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_356": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_356": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_421": {
                "size": {
                    "value": "nbobject",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(nbobject)[:2].prod()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_421": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_421": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randperm_48": {
                "n": {
                    "value": "f.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "GRU_177": {
                "*args": {
                    "value": "self.input_channel[2]",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/dlm/layer.py": {
        "torch": {
            "cat_36": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_450": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_536": {
                "variable": {
                    "value": "f[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[nbatch] + [nobj for _ in range(i)] + [dim]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_255": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inputsSize[i - 1][:-1] + [n]",
                            "BinOp"
                        ],
                        [
                            "inputsSize[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "inputsSize[i + 1][:-2]",
                            "Subscript"
                        ],
                        [
                            "inputsSize[i - 1][:-1] + [n]",
                            "BinOp"
                        ],
                        [
                            "inputsSize[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "inputsSize[i + 1][:-2]",
                            "Subscript"
                        ],
                        [
                            "inputs[i - 1].size()[:-1] + (n,) + ((sizeExpand + sizeInput + sizeReduce) * np.math.factorial(i),)",
                            "BinOp"
                        ],
                        [
                            "inputs[i].size()[:-1] + ((sizeExpand + sizeInput + sizeReduce) * np.math.factorial(i),)",
                            "BinOp"
                        ],
                        [
                            "inputs[i + 1].size()[:-2] + ((sizeExpand + sizeInput + sizeReduce) * np.math.factorial(i),)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "input_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[i].device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool if useBooleanRepresentation else torch.float32",
                    "type": "IfExp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_323": {
                "variable": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*f.shape[:-1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "f.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool if useBooleanRepresentation else torch.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, f2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ffand, ffor, ffand2, ffor2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dim_perms[i](f)",
                            "Call"
                        ],
                        [
                            "torch.zeros(size, device=input_device, dtype=torch.bool if useBooleanRepresentation else torch.float32, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((f, f2), -1)",
                            "Call"
                        ],
                        [
                            "[None for i in range(self.breadth + 1)]",
                            "ListComp"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "out_prev[0]",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_396": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[i], output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_560": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_650": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs[j].shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs[j].device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "ffand2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[self.logic[i].dims[1] // 2:3 * self.logic[i].dims[1] // 4, 0].unsqueeze(1), ~output[self.logic[i].dims[1] // 2:3 * self.logic[i].dims[1] // 4, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "all_331": {
                "variable": {
                    "value": "ffand2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "ffor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[3 * self.logic[i].dims[1] // 4:, 0].unsqueeze(1), ~output[3 * self.logic[i].dims[1] // 4:, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "any_333": {
                "variable": {
                    "value": "ffor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "ffand2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[self.logic[i].dims[1] // 2:3 * self.logic[i].dims[1] // 4, 0].unsqueeze(1), 1.0 - output[self.logic[i].dims[1] // 2:3 * self.logic[i].dims[1] // 4, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "prod_338": {
                "variable": {
                    "value": "ffand2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[i], output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_820": {
                "variable": {
                    "value": "self.track_duplicates_record[d, breadth, index_module]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs[breadth].shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_301": {
                "input": {
                    "value": "mask_value(inputs[i + 1][..., [p // 2]], mask, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_307": {
                "input": {
                    "value": "mask_value(inputs[i + 1][..., [p // 2]], mask, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_340": {
                "tensors": {
                    "value": "[output[3 * self.logic[i].dims[1] // 4:, 0].unsqueeze(1), 1.0 - output[3 * self.logic[i].dims[1] // 4:, 1].unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/dlm/neural_logic.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "gumbels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_27": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.dims[-1], self.atoms_per_rule, self.dims[-2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_112": {
                "variable": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*f.shape[:-1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "f.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, f2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_16": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f2[:, 0, ...], f2prime[:, 0, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ffand, ffor, ffand2, ffor2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ffand, ffor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f2[:, 0, ...], f2prime[:, 0, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ffand, ffand2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "f2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f2, f2prime]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ffand, ffor, ffand2, ffor2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ffand, ffor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/neural_logic/layer.py": {
        "torch": {
            "ModuleList_244": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(f, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dim_perms[i](f)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "layer(f)",
                            "Call"
                        ],
                        [
                            "self._mask(f, i, None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[i], output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_292": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/neural_logic/modules/_utils.py": {
        "torch": {
            "arange_47": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.size(dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/neural_logic/modules/dimension.py": {
        "torch": {
            "cat_100": {
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "(exists, forall)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_68": {
                "input": {
                    "value": "inp0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_value(inputs, mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_69": {
                "input": {
                    "value": "inp1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_value(inputs, mask, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_73": {
                "input": {
                    "value": "inp0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask_value(inputs, mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/neural_logic/modules/input_transform.py": {
        "torch": {
            "cat_49": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x < y, x == y, x > y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "combined",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x < y, x == y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/neural_logic/modules/neural_logic.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLPModel(input_dim, output_dim, hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/rl/ppo.py": {
        "torch": {
            "clamp_40": {
                "input": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(policy.gather(1, action.unsqueeze(1)) / old_policy.gather(1, action.unsqueeze(1)))[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_41": {
                "input": {
                    "value": "loss1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "advantage * ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/nn/rl/reinforce.py": {
        "torch": {
            "NLLLoss_28": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NLLLoss_50": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "difflogic/thutils.py": {
        "torch": {
            "ones_39": {
                "variable": {
                    "value": "nr_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "label.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "label.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "nr_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.sigmoid(p)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "difflogic/train/accum_grad.py": {
        "torch": {
            "zeros_like_75": {
                "variable": {
                    "value": "self._base_optimizer.state[p][exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "self._base_optimizer.state[p][exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.preserve_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_82": {
                "tensors": {
                    "value": "buf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "param_state['grad_buffer']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/rl/learn-imitation-incr.py": {
        "torch": {
            "cat_946": {
                "variable": {
                    "value": "traj[old_policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['old_policy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_947": {
                "variable": {
                    "value": "traj[old_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['old_logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_699": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_700": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_944": {
                "variable": {
                    "value": "traj[states]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['states']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_430": {
                "input": {
                    "value": "Match",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 - SameWorldID) * SameID * SameX * SameY",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_434": {
                "input": {
                    "value": "Between",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandZ(Above, num_blocks) * expandX(Above, num_blocks)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_447": {
                "input": {
                    "value": "SameXAbove * (1 - expandX(Matched, num_blocks))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_458": {
                "input": {
                    "value": "UnderBlockTI3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandX(Target, num_blocks) * expandY(SameXDirectlyAbove, num_blocks)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_468": {
                "input": {
                    "value": "UnderBlock3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandY(Target, num_blocks) * expandX(UnderBlockTI, num_blocks).permute(0, 2, 1, 3)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_496": {
                "input": {
                    "value": "PlanA",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandY(ShouldMove, num_blocks) * ShouldMoveOn",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_519": {
                "input": {
                    "value": "source * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_540": {
                "input": {
                    "value": "expandedY * expandedX.permute(0, 1, 3, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_805": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_847": {
                "variable": {
                    "value": "saturation_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['saturation']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_412": {
                "input": {
                    "value": "Below",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_416": {
                "input": {
                    "value": "SmallerWorldID",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_428": {
                "input": {
                    "value": "SameXAbove",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SameWorldID * SameX * Above",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_482": {
                "input": {
                    "value": "ShouldMoveOn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandX(WellPlaced, num_blocks) * expandX(Clear, num_blocks) * UnderBlock",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_527": {
                "input": {
                    "value": "prev_P * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_821": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output_dict['logits']",
                            "Subscript"
                        ],
                        [
                            "as_numpy(output_dict['logits'].data[0])",
                            "Call"
                        ],
                        [
                            "f.squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "f[0].squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.pred(f).squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_821": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_914": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[:, :nr_objects], f[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_915": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[:, :nr_objects], states[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_918": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_transform(f), transformed_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_942": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1030": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1095": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1132": {
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_811": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / args.last_tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_811": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_814": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_533": {
                "input": {
                    "value": "voisin * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1207": {
                "variable": {
                    "value": "feed_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j[k] for j in mergedfc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_534": {
                "input": {
                    "value": "target * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_535": {
                "input": {
                    "value": "target * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1205": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/rl/learn-imitation.py": {
        "torch": {
            "cat_899": {
                "variable": {
                    "value": "traj[old_policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['old_policy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_900": {
                "variable": {
                    "value": "traj[old_logits]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['old_logits']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_677": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_678": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_897": {
                "variable": {
                    "value": "traj[states]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['states']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_408": {
                "input": {
                    "value": "Match",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 - SameWorldID) * SameID * SameX * SameY",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_412": {
                "input": {
                    "value": "Between",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandZ(Above, num_blocks) * expandX(Above, num_blocks)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_425": {
                "input": {
                    "value": "SameXAbove * (1 - expandX(Matched, num_blocks))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_436": {
                "input": {
                    "value": "UnderBlockTI3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandX(Target, num_blocks) * expandY(SameXDirectlyAbove, num_blocks)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_446": {
                "input": {
                    "value": "UnderBlock3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandY(Target, num_blocks) * expandX(UnderBlockTI, num_blocks).permute(0, 2, 1, 3)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_474": {
                "input": {
                    "value": "PlanA",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandY(ShouldMove, num_blocks) * ShouldMoveOn",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_497": {
                "input": {
                    "value": "source * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_518": {
                "input": {
                    "value": "expandedY * expandedX.permute(0, 1, 3, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_750": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_793": {
                "variable": {
                    "value": "saturation_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['saturation']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_390": {
                "input": {
                    "value": "Below",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_394": {
                "input": {
                    "value": "SmallerWorldID",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_406": {
                "input": {
                    "value": "SameXAbove",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SameWorldID * SameX * Above",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_460": {
                "input": {
                    "value": "ShouldMoveOn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "expandX(WellPlaced, num_blocks) * expandX(Clear, num_blocks) * UnderBlock",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_505": {
                "input": {
                    "value": "prev_P * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_766": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "output_dict['logits']",
                            "Subscript"
                        ],
                        [
                            "as_numpy(output_dict['logits'].data[0])",
                            "Call"
                        ],
                        [
                            "f.squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "f[0].squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.pred(f).squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_766": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_860": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[:, :nr_objects], f[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_861": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[:, :nr_objects], states[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_864": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_transform(f), transformed_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_895": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_981": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1046": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_756": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / args.last_tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_756": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_759": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_511": {
                "input": {
                    "value": "voisin * target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1156": {
                "variable": {
                    "value": "feed_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j[k] for j in mergedfc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_512": {
                "input": {
                    "value": "target * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_513": {
                "input": {
                    "value": "target * relation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1154": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/rl/learn-ppo-incr.py": {
        "torch": {
            "cat_872": {
                "variable": {
                    "value": "traj[values]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_873": {
                "variable": {
                    "value": "traj[old_policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['old_policy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_874": {
                "variable": {
                    "value": "traj[advantages]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "traj['values'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_523": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_575": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_871": {
                "variable": {
                    "value": "traj[states]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['states']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_705": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "as_numpy(output_dict['logits'].data[0])",
                            "Call"
                        ],
                        [
                            "f[0].squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "1e-05 + logits * (1.0 - 2e-05)",
                            "BinOp"
                        ],
                        [
                            "self.pred(f).squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_705": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_784": {
                "variable": {
                    "value": "saturation_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['saturation']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "where_683": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_792": {
                "variable": {
                    "value": "entropies",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['entropies']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_840": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[:, :nr_objects], f[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_841": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[:, :nr_objects], states[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_844": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_transform(f), transformed_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_869": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_975": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1038": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_1090": {
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_685": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / args.last_tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_685": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_721": {
                "variable": {
                    "value": "policy_previous_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits_previous_tail / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits_previous_tail + (1 - sigma) / logits_previous_tail.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_723": {
                "variable": {
                    "value": "policy_previous_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_previous_tail / args.last_tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_723": {
                "variable": {
                    "value": "policy_previous_tail",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_744": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_760": {
                "input": {
                    "value": "crit_preloss - previous_val",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-args.clip_vf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clip_vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_762": {
                "input": {
                    "value": "crit_preloss - feed_dict.values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-args.clip_vf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clip_vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1166": {
                "variable": {
                    "value": "feed_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j[k] for j in mergedfc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1164": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/rl/learn-ppo.py": {
        "torch": {
            "cat_781": {
                "variable": {
                    "value": "traj[values]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_782": {
                "variable": {
                    "value": "traj[old_policy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['old_policy']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_783": {
                "variable": {
                    "value": "traj[advantages]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "traj['values'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_498": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_546": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_780": {
                "variable": {
                    "value": "traj[states]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj['states']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_648": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "as_numpy(output_dict['logits'].data[0])",
                            "Call"
                        ],
                        [
                            "f[0].squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "1e-05 + logits * (1.0 - 2e-05)",
                            "BinOp"
                        ],
                        [
                            "self.pred(f).squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_648": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "saturation_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['saturation']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "where_626": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_701": {
                "variable": {
                    "value": "entropies",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['entropies']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_749": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[:, :nr_objects], f[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_750": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[:, :nr_objects], states[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_753": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_transform(f), transformed_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_778": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_882": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_945": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_628": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / args.last_tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_628": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_669": {
                "input": {
                    "value": "crit_preloss - previous_val",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-args.clip_vf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clip_vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_671": {
                "input": {
                    "value": "crit_preloss - feed_dict.values",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-args.clip_vf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "args.clip_vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1057": {
                "variable": {
                    "value": "feed_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j[k] for j in mergedfc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_1055": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/rl/learn-reinforce.py": {
        "torch": {
            "is_available_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_445": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_548": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "as_numpy(output_dict['logits'].data[0])",
                            "Call"
                        ],
                        [
                            "f[0].squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "1e-05 + logits * (1.0 - 2e-05)",
                            "BinOp"
                        ],
                        [
                            "self.pred(f).squeeze(dim=-1).view(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_548": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_572": {
                "variable": {
                    "value": "saturation_inside",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in more_info['saturation']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "where_525": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sigma > 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "logits / sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "logits + (1 - sigma) / logits.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f[:, :nr_objects], f[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_620": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[:, :nr_objects], states[:, nr_objects:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.final_transform(f), transformed_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_651": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_grad_enabled_731": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_527": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / args.last_tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_527": {
                "variable": {
                    "value": "policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_876": {
                "variable": {
                    "value": "feed_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[j[k] for j in mergedfc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_874": {
                "tensors": {
                    "value": "f2",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[f[1] for f in traj['states']]",
                            "ListComp"
                        ],
                        [
                            "[j[k][1] for j in mergedfc]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/supervised/learn-graph-tasks.py": {
        "torch": {
            "is_available_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_293": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_294": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_359": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_396": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "states",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feed_dict.states.float()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "states.view((-1,) + states_shape[2:])",
                            "Call"
                        ],
                        [
                            "self.lenet(states)",
                            "Call"
                        ],
                        [
                            "states.view(states_shape[:2] + (-1,))",
                            "Call"
                        ],
                        [
                            "F.sigmoid(states)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_454": {
                "variable": {
                    "value": "saturation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in other_outputs['saturation']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_462": {
                "variable": {
                    "value": "entropies",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.flatten() for a in other_outputs['entropies']]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    }
}