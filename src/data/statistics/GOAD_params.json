{
    "opt_tc.py": {
        "sklearn": {
            "roc_auc_score_95": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "-val_probs_rots",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "diagonal_14": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_17": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos + m - neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_17": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_26": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netWRN.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "celoss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diagflat_15": {
                "input": {
                    "value": "torch.ones(zs.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_15": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "all_zs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(x_train), ndf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "all_zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(x_train), ndf)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.reshape(all_zs, (N // n_rots, n_rots, ndf))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N // n_rots, n_rots, ndf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_train[rp[idx]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.tile(np.arange(n_rots), batch_range // n_rots)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zs_tc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_range // n_rots, n_rots, ndf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_test[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(zs_tc, (batch_range // n_rots, n_rots, ndf))",
                            "Call"
                        ],
                        [
                            "torch.reshape(zs, (batch_range // n_rots, n_rots, ndf))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_range // n_rots, n_rots, ndf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-((zs.unsqueeze(2).detach().cpu().numpy() - means.unsqueeze(1).detach().cpu().numpy()) ** 2).sum(-1)",
                            "UnaryOp"
                        ],
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_89": {
                "variable": {
                    "value": "logp_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-diffs",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_58": {
                "input": {
                    "value": "torch.tensor(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-((zs.unsqueeze(2).detach().cpu().numpy() - means.unsqueeze(1).detach().cpu().numpy()) ** 2).sum(-1)",
                            "UnaryOp"
                        ],
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_87": {
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-((zs.unsqueeze(2).detach().cpu().numpy() - means.unsqueeze(1).detach().cpu().numpy()) ** 2).sum(-1)",
                            "UnaryOp"
                        ],
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_15": {
                "*size": {
                    "value": "zs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_92": {
                "input": {
                    "value": "logp_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(-diffs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "opt_tc_tabular.py": {
        "sklearn": {},
        "torch": {
            "diagonal_11": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means.unsqueeze(1)) ** 2).sum(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_14": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos + m - neg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_14": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "self.optimizerC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netC.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_46": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_rots",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "celoss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diagflat_12": {
                "input": {
                    "value": "torch.ones(zs.size(1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "sum_zs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.ndf, self.n_rots)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_xs[rp[idx]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_60": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_rots",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_test[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_89": {
                "variable": {
                    "value": "logp_sz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-diffs",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_87": {
                "input": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((zs.unsqueeze(2) - means) ** 2).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.max(diffs, diffs_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_12": {
                "*size": {
                    "value": "zs.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagonal_91": {
                "input": {
                    "value": "logp_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(-diffs, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "fcnet.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(d, ndf, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LeakyReLU(0.2, inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(d, ndf, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LeakyReLU(0.2, inplace=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_24": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_26": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_50": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_14": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "wideresnet.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "self.conv1(out if self.equalInOut else x)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "self.conv1(out if self.equalInOut else x)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_35": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "self.conv1(out if self.equalInOut else x)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}