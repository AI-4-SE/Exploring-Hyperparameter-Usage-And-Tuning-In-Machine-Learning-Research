{
    "linear.py": {
        "torch": {
            "DataLoader_91": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='data', train=True, transform=utils.CifarPairTransform(train_transform=True, pair_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.STL10(root='data', split='train', transform=utils.StlPairTransform(train_transform=True, pair_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('data/tiny-imagenet-200/train', utils.TinyImageNetPairTransform(train_transform=True, pair_transform=False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CIFAR10(root='data', train=False, transform=utils.CifarPairTransform(train_transform=False, pair_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.STL10(root='data', split='test', transform=utils.StlPairTransform(train_transform=False, pair_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('data/tiny-imagenet-200/val', utils.TinyImageNetPairTransform(train_transform=False, pair_transform=False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.fc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_29": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.f(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_52": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net(data)",
                            "Call"
                        ],
                        [
                            "self.fc(feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "pretrained_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "(prediction[:, 0:1] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "(prediction[:, 0:5] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_99": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=True, transform=utils.CifarPairTransform(train_transform=True), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.STL10(root='data', split='train+unlabeled', transform=utils.StlPairTransform(train_transform=True), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('data/tiny-imagenet-200/train', utils.TinyImageNetPairTransform(train_transform=True))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "memory_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "memory_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=True, transform=utils.CifarPairTransform(train_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.STL10(root='data', split='train', transform=utils.StlPairTransform(train_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('data/tiny-imagenet-200/train', utils.TinyImageNetPairTransform(train_transform=False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_170": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='data', train=False, transform=utils.CifarPairTransform(train_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.STL10(root='data', split='test', transform=utils.StlPairTransform(train_transform=False), download=True)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder('data/tiny-imagenet-200/val', utils.TinyImageNetPairTransform(train_transform=False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "diagonal_44": {
                "variable": {
                    "value": "on_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(memory_data.classes)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out_1_norm.T, out_2_norm) / batch_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_44": {
                "variable": {
                    "value": "on_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(feature_bank, dim=0).t().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_83": {
                "variable": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "feature_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_bank",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_95": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "feature_bank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(feature_bank, dim=0).t().contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_99": {
                "variable": {
                    "value": "sim_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_labels.expand(data.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "sim_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.size(0) * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(memory_data.classes)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out_1_norm.T, out_2_norm) / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "sim_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "pred_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_label.view(data.size(0), -1, c) * sim_weight.unsqueeze(dim=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "out_1_norm.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "out_2_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(out_2 - out_2.mean(dim=0)) / out_2.std(dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_110": {
                "input": {
                    "value": "(pred_labels[:, :1] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_111": {
                "input": {
                    "value": "(pred_labels[:, :5] == target.unsqueeze(dim=-1)).any(dim=-1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_209": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'results/{}_model_{}.pth'.format(save_name_pre, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'results/{}_model.pth'.format(save_name_pre)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_175": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.f",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2048, 512, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_29": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.f(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feature_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_31": {
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(feature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}