{
    "denoising/benchmark.py": {
        "torch": {
            "load_89": {
                "f": {
                    "value": "run_dir + f'/checkpoints/model_epoch{args.epochs}.pth'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "fixed_test_noisy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_loader.dataset[i][0] for i in fixed_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "fixed_test_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_loader.dataset[i][1] for i in fixed_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_98": {
                "tensors": {
                    "value": "[fluore_to_tensor(crop) for crop in crops[:4]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/models/dncnn.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.dncnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "image_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/models/unet.py": {
        "torch": {
            "randn_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_6": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "variable": {
                    "value": "self.enc_relu0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "variable": {
                    "value": "self.enc_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "variable": {
                    "value": "self.enc_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "variable": {
                    "value": "self.enc_relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "variable": {
                    "value": "self.enc_relu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "variable": {
                    "value": "self.enc_relu5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "variable": {
                    "value": "self.enc_relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "variable": {
                    "value": "self.dec_relu5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "variable": {
                    "value": "self.dec_relu5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "variable": {
                    "value": "self.dec_relu4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "variable": {
                    "value": "self.dec_relu4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "variable": {
                    "value": "self.dec_relu3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_67": {
                "variable": {
                    "value": "self.dec_relu3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "variable": {
                    "value": "self.dec_relu2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_73": {
                "variable": {
                    "value": "self.dec_relu2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "variable": {
                    "value": "self.dec_relu1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "variable": {
                    "value": "self.dec_relu1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "variable": {
                    "value": "self.enc_relu0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.enc_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "variable": {
                    "value": "self.enc_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "variable": {
                    "value": "self.enc_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "variable": {
                    "value": "self.enc_relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.enc_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_121": {
                "variable": {
                    "value": "self.enc_relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "variable": {
                    "value": "self.enc_bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_126": {
                "variable": {
                    "value": "self.enc_relu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_127": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "variable": {
                    "value": "self.enc_bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_131": {
                "variable": {
                    "value": "self.enc_relu5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_132": {
                "variable": {
                    "value": "self.pool5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "variable": {
                    "value": "self.enc_bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_136": {
                "variable": {
                    "value": "self.enc_relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "variable": {
                    "value": "self.dec_bn5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_141": {
                "variable": {
                    "value": "self.dec_relu5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "variable": {
                    "value": "self.dec_bn5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_144": {
                "variable": {
                    "value": "self.dec_relu5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "variable": {
                    "value": "self.dec_bn4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_149": {
                "variable": {
                    "value": "self.dec_relu4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_151": {
                "variable": {
                    "value": "self.dec_bn4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_152": {
                "variable": {
                    "value": "self.dec_relu4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_156": {
                "variable": {
                    "value": "self.dec_bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_157": {
                "variable": {
                    "value": "self.dec_relu3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.dec_bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_160": {
                "variable": {
                    "value": "self.dec_relu3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "variable": {
                    "value": "self.dec_bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "variable": {
                    "value": "self.dec_relu2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.dec_bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_168": {
                "variable": {
                    "value": "self.dec_relu2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "variable": {
                    "value": "self.dec_bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "variable": {
                    "value": "self.dec_relu1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.dec_bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_176": {
                "variable": {
                    "value": "self.dec_relu1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Tanh_178": {
                "variable": {
                    "value": "self.dec_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(16, 3, 256, 256).to('cuda:2')",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(out, out_pool4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "(out, out_pool3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "(out, out_pool2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "(out, out_pool1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "(out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "(out, out_pool4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "tensors": {
                    "value": "(out, out_pool3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "(out, out_pool2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "(out, out_pool1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "(out, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/test_example.py": {
        "torch": {
            "load_74": {
                "f": {
                    "value": "run_dir + f'/checkpoints/model_epoch{args.epochs}.pth'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_83": {
                "tensors": {
                    "value": "[fluore_to_tensor(crop) for crop in crops[:4]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/train_dncnn.py": {
        "torch": {
            "device_95": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.9, 0.99]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "fixed_test_noisy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_loader.dataset[i][0] for i in fixed_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "fixed_test_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_loader.dataset[i][1] for i in fixed_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_197": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denoised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(noisy)",
                            "Call"
                        ],
                        [
                            "model(noisy)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "clean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean.view(-1, *clean.shape[2:])",
                            "Call"
                        ],
                        [
                            "clean.view(-1, *clean.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_289": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt_dir + '/model_epoch{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt_dir + '/model_epoch{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_245": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denoised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(noisy)",
                            "Call"
                        ],
                        [
                            "model(noisy)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "clean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean.view(-1, *clean.shape[2:])",
                            "Call"
                        ],
                        [
                            "clean.view(-1, *clean.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(noisy[:4], denoised[:4], clean[:4], denoised[:4] - clean[:4])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fixed_test_noisy[:4].cpu(), fixed_denoised[:4].cpu(), fixed_test_clean[:4], fixed_denoised[:4].cpu() - fixed_test_clean[:4])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fixed_test_noisy[4:8].cpu(), fixed_denoised[4:8].cpu(), fixed_test_clean[4:8], fixed_denoised[4:8].cpu() - fixed_test_clean[4:8])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_121": {
                "tensors": {
                    "value": "[fluore_to_tensor(crop) for crop in crops[:4]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/train_n2n.py": {
        "torch": {
            "device_94": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda}' if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[0.9, 0.99]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "fixed_test_noisy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_loader.dataset[i][0] for i in fixed_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "fixed_test_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_loader.dataset[i][1] for i in fixed_idx]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_188": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denoised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(noisy_input)",
                            "Call"
                        ],
                        [
                            "model(noisy)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "noisy_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_target.view(-1, *noisy_target.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt_dir + '/model_epoch{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_218": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt_dir + '/model_epoch{}.pth'.format(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_231": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "denoised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(noisy_input)",
                            "Call"
                        ],
                        [
                            "model(noisy)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "clean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean.view(-1, *clean.shape[2:])",
                            "Call"
                        ],
                        [
                            "clean.view(-1, *clean.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(noisy[:4], denoised[:4], clean[:4], denoised[:4] - clean[:4])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fixed_test_noisy[:4].cpu(), fixed_denoised[:4].cpu(), fixed_test_clean[:4], fixed_denoised[:4].cpu() - fixed_test_clean[:4])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fixed_test_noisy[4:8].cpu(), fixed_denoised[4:8].cpu(), fixed_test_clean[4:8], fixed_denoised[4:8].cpu() - fixed_test_clean[4:8])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_112": {
                "tensors": {
                    "value": "[fluore_to_tensor(crop) for crop in crops[:4]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/utils/data_loader.py": {
        "torch": {
            "DataLoader_415": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DenoisingFolder(root, train, noise_levels, types=types, test_fov=test_fov, captures=captures, transform=transform, target_transform=target_transform, loader=pil_loader)",
                            "Call"
                        ],
                        [
                            "DenoisingFolderN2N(root, noise_levels, types=types, test_fov=test_fov, transform=transform, target_transform=target_transform, loader=pil_loader)",
                            "Call"
                        ],
                        [
                            "DenoisingTestMixFolder(root, loader, noise_levels, transform, target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_451": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DenoisingFolder(root, train, noise_levels, types=types, test_fov=test_fov, captures=captures, transform=transform, target_transform=target_transform, loader=pil_loader)",
                            "Call"
                        ],
                        [
                            "DenoisingFolderN2N(root, noise_levels, types=types, test_fov=test_fov, transform=transform, target_transform=target_transform, loader=pil_loader)",
                            "Call"
                        ],
                        [
                            "DenoisingTestMixFolder(root, loader, noise_levels, transform, target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_482": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DenoisingFolder(root, train, noise_levels, types=types, test_fov=test_fov, captures=captures, transform=transform, target_transform=target_transform, loader=pil_loader)",
                            "Call"
                        ],
                        [
                            "DenoisingFolderN2N(root, noise_levels, types=types, test_fov=test_fov, transform=transform, target_transform=target_transform, loader=pil_loader)",
                            "Call"
                        ],
                        [
                            "DenoisingTestMixFolder(root, loader, noise_levels, transform, target_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "rgb_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.2989, 0.587, 0.114]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.float32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_526": {
                "tensors": {
                    "value": "[fluore_to_tensor(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "np.array(pic, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/utils/metrics.py": {
        "torch": {
            "mse_loss_20": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noisy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy.add(0.5).mul(255).clamp(0, 255)",
                            "Call"
                        ],
                        [
                            "noisy.add(0.5).mul(255).clamp(0, 255)",
                            "Call"
                        ],
                        [
                            "noisy.add(0.5).mul(255).clamp(0, 255)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "clean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clean.add(0.5).mul(255).clamp(0, 255)",
                            "Call"
                        ],
                        [
                            "clean.add(0.5).mul(255).clamp(0, 255)",
                            "Call"
                        ],
                        [
                            "clean.add(0.5).mul(255).clamp(0, 255)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_20": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_21": {
                "input": {
                    "value": "max_val ** 2 / mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "denoising/utils/misc.py": {
        "torch": {}
    },
    "denoising/utils/noise.py": {
        "torch": {
            "randn_46": {
                "variable": {
                    "value": "psnr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "image.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "poisson_49": {
                "input": {
                    "value": "image * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_50": {
                "input": {
                    "value": "noisy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.poisson(image * scale) / scale",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Constant"
                        ],
                        [
                            "32767 if image.max() > 4095 else 4095",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    }
}