{
    "SPRITES_utils.py": {
        "sklearn": {
            "PCA_250": {
                "variable": {
                    "value": "pca_GPLVM",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "L_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_255": {
                "variable": {
                    "value": "pca_global",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "L_character",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "TFRecordWriter_143": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TFRecordDataset_186": {
                "variable": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(sprites_path + 'train/*.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_187": {
                "variable": {
                    "value": "dataset_test_action",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames_test_action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(sprites_path + 'test_action/*.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordDataset_188": {
                "variable": {
                    "value": "dataset_test_char",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames_test_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob.glob(sprites_path + 'test_character/*.tfrecord')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_149": {
                "variable": {
                    "value": "feature[frame]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=arr_frames[i].flatten())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_150": {
                "variable": {
                    "value": "feature[character_ID]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=[arr_aux_data[i, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_151": {
                "variable": {
                    "value": "feature[action_ID]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=[arr_aux_data[i, 1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_154": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_195": {
                "variable": {
                    "value": "parsed_features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'frame': tf.FixedLenFeature((64, 64, 3), tf.float32), 'character_ID': tf.FixedLenFeature((), tf.int64, default_value=0), 'action_ID': tf.FixedLenFeature((), tf.int64, default_value=0)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "range_348": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "limit": {
                    "value": "tf.shape(frames)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_349": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.sample(list(range(len(arr))), nr_images)",
                            "Call"
                        ],
                        [
                            "list(range(nr_images))",
                            "Call"
                        ],
                        [
                            "tf.range(start=0, limit=tf.shape(frames)[0], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_350": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[ids].reshape(-1, 64, 64, 3)",
                            "Call"
                        ],
                        [
                            "X_test[ids].reshape(-1, 64, 64, 3)",
                            "Call"
                        ],
                        [
                            "tf.gather(frames, shuffled_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.shuffle(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_351": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(labels, shuffled_indices)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.shuffle(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_362": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification_layer(embeddings)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "accuracy_363": {
                "variable": {
                    "value": "(_, acc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(labels, shuffled_indices)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(logits, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_359": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(labels, shuffled_indices)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification_layer(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_192": {
                "shape": {
                    "value": "(64, 64, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_193": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_194": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FloatList_149": {
                "value": {
                    "value": "arr_frames[i].flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_150": {
                "value": {
                    "value": "[arr_aux_data[i, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_151": {
                "value": {
                    "value": "[arr_aux_data[i, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_154": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "shape_348": {
                "input": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train[ids].reshape(-1, 64, 64, 3)",
                            "Call"
                        ],
                        [
                            "X_test[ids].reshape(-1, 64, 64, 3)",
                            "Call"
                        ],
                        [
                            "tf.gather(frames, shuffled_indices)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "PCA_555": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "latent_dim_object_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "constant_151": {
                "variable": {
                    "value": "ilt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-0.5 / lt ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_153": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_161": {
                "variable": {
                    "value": "chol_K",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.linalg.cholesky(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_163": {
                "variable": {
                    "value": "ran_Z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tmax, 2 * batch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "chol_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.linalg.cholesky(K), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ran_Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal((tmax, 2 * batch))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(chol_K, ran_Z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(paths, (tmax, batch, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(paths, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "paths * 0.2 * px + 0.5 * px",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tmax, batch, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(chol_K, ran_Z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(paths, (tmax, batch, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(paths, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "paths * 0.2 * px + 0.5 * px",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_176": {
                "variable": {
                    "value": "tf_px",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_177": {
                "variable": {
                    "value": "tf_py",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_190": {
                "variable": {
                    "value": "vid_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "vid_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pixelate_series(traj_i) for traj_i in traj]",
                            "ListComp"
                        ],
                        [
                            "np.asarray(vid_batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tfmath_ops.cast(vid, dtype=dtype) for vid in vid_batch]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(vid_batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_499": {
                "variable": {
                    "value": "term1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_data_534": {
                "variable": {
                    "value": "((x_train, y_train), (_, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_763": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_764": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_765": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_766": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_848": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_851": {
                "variable": {
                    "value": "eval_batch_size_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_857": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "eval_batch_size_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(dtype=tf.int64, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_860": {
                "variable": {
                    "value": "test_batch_size_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_866": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_batch_size_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(dtype=tf.int64, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_969": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(qnet_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_989": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qnet_mu.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1002": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1003": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_1005": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(p_m)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_966": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_993": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_160": {
                "x": {
                    "value": "K * ilt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cholesky_161": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "(tf.reshape(K, (tmax, 1)) - tf.reshape(K, (1, tmax))) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.exp(K * ilt) + 1e-05 * tf.eye(tmax, dtype=dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "lx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "(tf_px - paths[b, t, 0]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(px, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_183": {
                "variable": {
                    "value": "ly",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "(tf_py - paths[b, t, 1]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, py)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_189": {
                "x": {
                    "value": "vid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "map(pixelate_frame, XY)",
                            "Call"
                        ],
                        [
                            "[v for v in vid]",
                            "ListComp"
                        ],
                        [
                            "np.array([(t + 4) * v for (t, v) in enumerate(vid)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_767": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xy[1]",
                            "Subscript"
                        ],
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "(tf.reshape(K, (tmax, 1)) - tf.reshape(K, (1, tmax))) ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.exp(K * ilt) + 1e-05 * tf.eye(tmax, dtype=dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, tmax)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_160": {
                "num_rows": {
                    "value": "tmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_186": {
                "values": {
                    "value": "frames_tmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_770": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(z, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.math.reduce_euclidean_norm(z, axis=1, keepdims=True), perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_969": {
                "input": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_970": {
                "x": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1005": {
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1006": {
                "x": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_185": {
                "tensor": {
                    "value": "frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lx + ly < rr",
                            "Compare"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, px, py)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_770": {
                "input_tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_771": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(z, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_771": {
                "input_tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BALL_experiment.py": {
        "tensorflow": {
            "Graph_77": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "e_elb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "e_pkl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pkl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "variable": {
                    "value": "e_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_123": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_125": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_144": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_200": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.ram",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "e_l3_elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l3_elbo",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "e_ce_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ce_term",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "variable": {
                    "value": "e_l3_elbo_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l3_elbo_recon",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "variable": {
                    "value": "e_l3_elbo_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l3_elbo_kl",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradients_128": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_mean(elbo)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_112": {
                "input_tensor": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_201": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_129": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-100000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_min_153": {
                "input_tensor": {
                    "value": "q_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_154": {
                "input_tensor": {
                    "value": "q_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_155": {
                "input_tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_156": {
                "input_tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_157": {
                "input_tensor": {
                    "value": "q_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_158": {
                "input_tensor": {
                    "value": "q_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_159": {
                "input_tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_160": {
                "input_tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConfigProto_201": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_205": {
                "checkpoint_dir": {
                    "value": "chkpnt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_checkpoint_folder(args.base_dir, args.expid, extra)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GPVAE_Casale_model.py": {
        "tensorflow": {
            "shape_18": {
                "variable": {
                    "value": "a_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(Z, perm=[1, 0]), K_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_19": {
                "variable": {
                    "value": "b_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_90": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(qnet_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_120": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qnet_mu.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_127": {
                "variable": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(qnet_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_130": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(qnet_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_134": {
                "variable": {
                    "value": "a_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(a, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(batch_idx, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_135": {
                "variable": {
                    "value": "B_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.transpose(B, perm=[1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(batch_idx, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_136": {
                "variable": {
                    "value": "V_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.cast(batch_idx, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images - recon_images_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inv_182": {
                "variable": {
                    "value": "inside_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "GP.alpha * tf.eye(H, dtype=tf.float64) + tf.matmul(tf.transpose(V, perm=[1, 0]), V)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "a": {
                    "value": "K_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / GP.alpha * tf.eye(N, dtype=tf.float64) - 1 / GP.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "1 / self.alpha * tf.eye(N, dtype=tf.float64) - 1 / self.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "latent_samples_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_201": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(test_images - recon_images_test) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, b_shape[0], 1, b_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_87": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 100)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_124": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 100)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_part_193": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_test_test - tf.linalg.matmul(K_test_train, tf.linalg.matmul(K_inv, tf.transpose(K_test_train, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "tf.diag_part(var)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(var, [L]), (-1, L))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_194": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(var, [L])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_196": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_295": {
                "variable": {
                    "value": "train_object_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.unique(aux_data_train[:, 0]).y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_296": {
                "variable": {
                    "value": "train_angles_unique",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sort(tf.unique(aux_data_train[:, 1]).y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_297": {
                "variable": {
                    "value": "object_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(train_object_ids, dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_302": {
                "variable": {
                    "value": "L_W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_view.matrix(train_angles_unique, train_angles_unique)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_307": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "train_ids_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([x in y for y in train_angles for x in train_angles_unique])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_325": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(V)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_326": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(V)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_330": {
                "variable": {
                    "value": "inside_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha * tf.eye(H, dtype=tf.float64) + tf.matmul(tf.transpose(V, perm=[1, 0]), V)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_335": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(Z, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / GP.alpha * tf.eye(N, dtype=tf.float64) - 1 / GP.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "1 / self.alpha * tf.eye(N, dtype=tf.float64) - 1 / self.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_338": {
                "variable": {
                    "value": "K_inv_V",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / GP.alpha * tf.eye(N, dtype=tf.float64) - 1 / GP.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "1 / self.alpha * tf.eye(N, dtype=tf.float64) - 1 / self.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_348": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(B, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_349": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.squeeze(c)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_116": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_127": {
                "x": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_134": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(Z, perm=[1, 0]), K_inv)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_134": {
                "x": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aux_data[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(B, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_135": {
                "x": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aux_data[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_136": {
                "x": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aux_data[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_175": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_176": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_227": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_228": {
                "variable": {
                    "value": "self.amplitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_231": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_length_scale",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_232": {
                "variable": {
                    "value": "self.amplitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_amplitude",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_alpha",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_237": {
                "variable": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "object_vectors_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_object_vectors",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_241": {
                "variable": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "object_vectors_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_object_vectors",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_263": {
                "variable": {
                    "value": "x_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(x[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_264": {
                "variable": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(y[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_343": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z[:, l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_344": {
                "variable": {
                    "value": "z_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(Z[:, l], 1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_90": {
                "input": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "x": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_130": {
                "input": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "x": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "B_batch[:, :, l] * V_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.squeeze(c)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_182": {
                "a": {
                    "value": "tf.transpose(V, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_183": {
                "num_rows": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(aux_data)",
                            "Call"
                        ],
                        [
                            "tf.shape(V)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(V)[0], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "inside_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(GP.alpha * tf.eye(H, dtype=tf.float64) + tf.matmul(tf.transpose(V, perm=[1, 0]), V))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(self.alpha * tf.eye(H, dtype=tf.float64) + tf.matmul(tf.transpose(V, perm=[1, 0]), V))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(V, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "a": {
                    "value": "K_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / GP.alpha * tf.eye(N, dtype=tf.float64) - 1 / GP.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "1 / self.alpha * tf.eye(N, dtype=tf.float64) - 1 / self.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(K_test_train, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_194": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_test_test - tf.linalg.matmul(K_test_train, tf.linalg.matmul(K_inv, tf.transpose(K_test_train, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "tf.diag_part(var)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(var, [L]), (-1, L))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_267": {
                "input": {
                    "value": "y_view",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_296": {
                "values": {
                    "value": "tf.unique(aux_data_train[:, 1]).y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_297": {
                "x": {
                    "value": "train_object_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(tf.unique(aux_data_train[:, 0]).y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_335": {
                "a": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_182": {
                "num_rows": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(V)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(V)[1], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_182": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(K_test_train, tf.linalg.matmul(K_inv, latent_samples_train))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_197": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_test_test - tf.linalg.matmul(K_test_train, tf.linalg.matmul(K_inv, tf.transpose(K_test_train, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "tf.diag_part(var)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(var, [L]), (-1, L))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_263": {
                "x": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_264": {
                "x": {
                    "value": "y[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_271": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(x_object, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.math.reduce_euclidean_norm(y_object, axis=1, keepdims=True), perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_295": {
                "x": {
                    "value": "aux_data_train[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_299": {
                "input_tensor": {
                    "value": "object_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.object_vectors, tf.cast(train_object_ids, dtype=tf.int64))",
                            "Call"
                        ],
                        [
                            "object_vectors / tf.math.reduce_euclidean_norm(object_vectors, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_325": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_326": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_330": {
                "a": {
                    "value": "tf.transpose(V, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_331": {
                "num_rows": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(aux_data)",
                            "Call"
                        ],
                        [
                            "tf.shape(V)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(V)[0], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_332": {
                "a": {
                    "value": "inside_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(GP.alpha * tf.eye(H, dtype=tf.float64) + tf.matmul(tf.transpose(V, perm=[1, 0]), V))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(self.alpha * tf.eye(H, dtype=tf.float64) + tf.matmul(tf.transpose(V, perm=[1, 0]), V))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(V, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "a": {
                    "value": "K_test_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GP.kernel_matrix(test_aux_data, train_aux_data[:, 1:])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_271": {
                "input_tensor": {
                    "value": "x_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.object_vectors, tf.cast(x[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(y_object, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_296": {
                "x": {
                    "value": "aux_data_train[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_330": {
                "num_rows": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(V)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(V)[1], dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_330": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_272": {
                "input_tensor": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.object_vectors, tf.cast(y[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_332": {
                "a": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(object_vectors, L_W)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(V, train_ids_mask)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_345": {
                "a": {
                    "value": "z_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(z, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_inv_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_inv, V)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_346": {
                "*args": {
                    "value": "K_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / GP.alpha * tf.eye(N, dtype=tf.float64) - 1 / GP.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "1 / self.alpha * tf.eye(N, dtype=tf.float64) - 1 / self.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_346": {
                "a": {
                    "value": "K_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / GP.alpha * tf.eye(N, dtype=tf.float64) - 1 / GP.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ],
                        [
                            "1 / self.alpha * tf.eye(N, dtype=tf.float64) - 1 / self.alpha * tf.matmul(V, tf.matmul(inside_inv, tf.transpose(V, perm=[1, 0])))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(Z[:, l], 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GPVAE_Pearce_model.py": {
        "tensorflow": {
            "cholesky_53": {
                "variable": {
                    "value": "chol_K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, (batch, n, 1)) - tf.reshape(X, (batch, 1, n))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(K ** 2 * ilt) + tf.matrix_diag(varY)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y, (batch, n, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch, n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cholesky_solve_60": {
                "variable": {
                    "value": "iKY",
                    "type": "variable",
                    "possible_values": []
                },
                "chol": {
                    "value": "chol_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y, (batch, n, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "lh_quad_term",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(Y, (batch, 1, n))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "iKY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cholesky_solve(chol_K, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "lh_quad_term",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lh_quad_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(Y, (batch, 1, n)), iKY)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lh_quad_term, [batch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_69": {
                "variable": {
                    "value": "Ks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Ks ** 2 * ilt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_70": {
                "variable": {
                    "value": "Ks_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, (batch, n, 1)) - tf.reshape(X_test, (batch, 1, ns))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(Ks ** 2 * ilt)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Ks_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Ks, (0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "iKY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cholesky_solve(chol_K, Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Ks_t, iKY)",
                            "Call"
                        ],
                        [
                            "tf.reshape(p_m, (batch, ns))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch, ns)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_118": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid_batch.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "concat_119": {
                "variable": {
                    "value": "batch_T",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(T, (1, tmax)) for i in range(batch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "full_p_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_mx, p_my]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "full_p_var",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_vx, p_vy]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "sin_elbo_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sin_elbo_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss_cross_entropy(full_p_mu, full_p_var, qnet_mu, qnet_var)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sin_elbo_ce, 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sin_elbo_ce, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_209": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, tmax, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_214": {
                "variable": {
                    "value": "pred_vid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_vid_batch_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_MLP_decoder_graph(latent_samples, px, py)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_215": {
                "variable": {
                    "value": "recon_err",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "vid_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_vid_batch_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_MLP_decoder_graph(latent_samples, px, py)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_217": {
                "variable": {
                    "value": "sin_elbo_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-recon_err",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "l_GP",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "GP_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "GP_length_scale",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "l_GP",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_solve_81": {
                "variable": {
                    "value": "iK_Ks",
                    "type": "variable",
                    "possible_values": []
                },
                "chol": {
                    "value": "chol_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(K)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "Ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, (batch, n, 1)) - tf.reshape(X_test, (batch, 1, ns))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(Ks ** 2 * ilt)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "Ks_iK_Ks",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Ks * iK_Ks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ks - tf.matmul(Ks, tf.matmul(tf.linalg.inv(K), Ks))",
                            "BinOp"
                        ],
                        [
                            "1 - Ks_iK_Ks",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(p_v, (batch, ns))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch, ns)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_126": {
                "variable": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mean": {
                    "value": "context_ratio * float(tmax)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stddev": {
                    "value": "np.sqrt(context_ratio * (1 - context_ratio) * float(tmax))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_129": {
                "variable": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=(), mean=context_ratio * float(tmax), stddev=np.sqrt(context_ratio * (1 - context_ratio) * float(tmax)))",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(con_tf, 2)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(con_tf, int(tmax) - 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.round(con_tf), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_130": {
                "variable": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=(), mean=context_ratio * float(tmax), stddev=np.sqrt(context_ratio * (1 - context_ratio) * float(tmax)))",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(con_tf, 2)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(con_tf, int(tmax) - 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.round(con_tf), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "int(tmax) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_131": {
                "variable": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.round(con_tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_138": {
                "variable": {
                    "value": "ran_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "ran_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "ran_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[tf.random.shuffle(ran_ind) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(r_i, (1, tmax)) for r_i in ran_ind]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(ran_ind, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "con_T",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "con_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(T, con_ind[i, :]) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(ct, (1, con_tf)) for ct in con_T]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(con_T, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "con_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "con_lm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(qnet_mu[i, :, :], con_ind[i, :], axis=0) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(cm, (1, con_tf, 2)) for cm in con_lm]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(con_lm, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "con_lv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "con_lv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(qnet_var[i, :, :], con_ind[i, :], axis=0) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(cv, (1, con_tf, 2)) for cv in con_lv]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(con_lv, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "np_elbo_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "np_elbo_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(sin_elbo_ce[i, :], tar_ind[i, :]) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reduce_sum(np_i) for np_i in np_elbo_ce]",
                            "ListComp"
                        ],
                        [
                            "tf.stack(np_elbo_ce)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_198": {
                "variable": {
                    "value": "sin_elbo_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sin_elbo_ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss_cross_entropy(full_p_mu, full_p_var, qnet_mu, qnet_var)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sin_elbo_ce, 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(sin_elbo_ce, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_225": {
                "variable": {
                    "value": "elbo_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sin_elbo_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(-recon_err, (2, 3))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(X)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "tensor": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, 1, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_51": {
                "x": {
                    "value": "K ** 2 * ilt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(chol_K))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y, (batch, n, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch, 1, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "tensor": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, 1, ns)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_227": {
                "variable": {
                    "value": "elbo_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "np_elbo_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.gather(sin_elbo_recon[i, :], tar_ind[i, :]) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reduce_sum(np_i) for np_i in np_elbo_recon]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_56": {
                "x": {
                    "value": "tf.matrix_diag_part(chol_K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_79": {
                "a": {
                    "value": "tf.linalg.inv(K)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "Ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, (batch, n, 1)) - tf.reshape(X_test, (batch, 1, ns))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(Ks ** 2 * ilt)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "tensor": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=dt)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, tmax)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_131": {
                "x": {
                    "value": "con_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=(), mean=context_ratio * float(tmax), stddev=np.sqrt(context_ratio * (1 - context_ratio) * float(tmax)))",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(con_tf, 2)",
                            "Call"
                        ],
                        [
                            "tf.math.minimum(con_tf, int(tmax) - 2)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.round(con_tf), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_139": {
                "value": {
                    "value": "ran_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "[tf.random.shuffle(ran_ind) for i in range(batch)]",
                            "ListComp"
                        ],
                        [
                            "[tf.reshape(r_i, (1, tmax)) for r_i in ran_ind]",
                            "ListComp"
                        ],
                        [
                            "tf.concat(ran_ind, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "r_i",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, tmax)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_147": {
                "params": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=dt)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "con_ind[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "tensor": {
                    "value": "ct",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, con_tf)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_152": {
                "params": {
                    "value": "qnet_mu[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "con_ind[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "tensor": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, con_tf, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_157": {
                "params": {
                    "value": "qnet_var[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "con_ind[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "tensor": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, con_tf, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_189": {
                "params": {
                    "value": "sin_elbo_ce[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "tar_ind[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_190": {
                "input_tensor": {
                    "value": "np_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_210": {
                "x": {
                    "value": "full_p_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([p_vx, p_vy], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_220": {
                "params": {
                    "value": "sin_elbo_recon[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "tar_ind[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_221": {
                "input_tensor": {
                    "value": "np_i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inv_79": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(X, (batch, n, 1)) - tf.reshape(X, (batch, 1, n))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(K ** 2 * ilt) + tf.matrix_diag(varY)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST_experiment.py": {
        "tensorflow": {
            "Graph_62": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_573": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_815": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "train_aux_data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2 + args.M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "train_images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "test_aux_data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2 + args.M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "test_images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_197": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_198": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_200": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_292": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_299": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.ram",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_593": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_632": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_633": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_634": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_635": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_638": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-elbo",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_677": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_684": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.ram",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_828": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_833": {
                "variable": {
                    "value": "train_aux_data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 3 + args.M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_834": {
                "variable": {
                    "value": "train_images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_835": {
                "variable": {
                    "value": "test_aux_data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 2 + args.M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_836": {
                "variable": {
                    "value": "test_images_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_844": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_886": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_887": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_888": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_889": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_892": {
                "variable": {
                    "value": "gradients_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_898": {
                "variable": {
                    "value": "gradients_GP",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "GP_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in train_vars if 'GP' in x.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_904": {
                "variable": {
                    "value": "gradients_VAE",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-elbo_VAE",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "VAE_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in train_vars if not 'GP' in x.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "global_variables_initializer_968": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_975": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.ram",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "C_ma_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "lagrange_mult_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "alpha_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "train_encodings_means_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, args.L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "train_encodings_vars_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, args.L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_203": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_205": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-elbo",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_297": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_682": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_973": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_308": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_690": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_913": {
                "variable": {
                    "value": "GP_ov",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_980": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_216": {
                "input_tensor": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_217": {
                "input_tensor": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_218": {
                "input_tensor": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_219": {
                "input_tensor": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_920": {
                "input_tensor": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_921": {
                "input_tensor": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_922": {
                "input_tensor": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_923": {
                "input_tensor": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_946": {
                "input_tensor": {
                    "value": "qnet_mu_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_947": {
                "input_tensor": {
                    "value": "qnet_mu_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_948": {
                "input_tensor": {
                    "value": "qnet_var_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_949": {
                "input_tensor": {
                    "value": "qnet_var_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_237": {
                "input_tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_238": {
                "input_tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_239": {
                "input_tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_240": {
                "input_tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_261": {
                "input_tensor": {
                    "value": "qnet_mu_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_262": {
                "input_tensor": {
                    "value": "qnet_mu_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_263": {
                "input_tensor": {
                    "value": "qnet_var_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_264": {
                "input_tensor": {
                    "value": "qnet_var_VAE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConfigProto_308": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_690": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_980": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "SPRITES_experiment.py": {
        "tensorflow": {
            "Graph_61": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "C_ma_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "lagrange_mult_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "alpha_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "segment_ids_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "repeats_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_210": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_211": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_213": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(dtype=tf.float64, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_301": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_312": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "args.ram",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "train_aux_data_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N_train, 1 + args.L_character)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "train_encodings_means_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N_train, args.L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "train_encodings_vars_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N_train, args.L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inv_178": {
                "variable": {
                    "value": "precomputed_K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "SVGP_.kernel_matrix(SVGP_.inducing_index_points, SVGP_.inducing_index_points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "mean_terms_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.L, M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_185": {
                "variable": {
                    "value": "var_terms_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(args.L, M, M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "K_mm_inv_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "VAE.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(M, M)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradients_222": {
                "variable": {
                    "value": "gradients_repr_NN",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss_pretrain_repr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_pass_pretraining_repr_NN(frames_repr_nn, char_IDs_repr_nn, repr_NN, classification_layer)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "repr_nn_train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for x in train_vars if 'repr_NN' in x.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_229": {
                "variable": {
                    "value": "gradients_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "[x for x in train_vars if 'repr_NN' not in x.name]",
                            "ListComp"
                        ],
                        [
                            "[x for x in train_vars if 'repr_NN_class' not in x.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_232": {
                "variable": {
                    "value": "gradients_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-elbo",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES)",
                            "Call"
                        ],
                        [
                            "[x for x in train_vars if 'repr_NN' not in x.name]",
                            "ListComp"
                        ],
                        [
                            "[x for x in train_vars if 'repr_NN_class' not in x.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "local_variables_initializer_304": {
                "variable": {
                    "value": "init_op_local",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_310": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "classification_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=args.L_character, dtype=tf.float32, name='repr_NN_class_1'), tf.keras.layers.Dense(1000, name='repr_NN_class_2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_321": {
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_235": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-args.clip_grad_thres",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "args.clip_grad_thres",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_247": {
                "input_tensor": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_248": {
                "input_tensor": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_249": {
                "input_tensor": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_250": {
                "input_tensor": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_268": {
                "input_tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_269": {
                "input_tensor": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_270": {
                "input_tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_max_271": {
                "input_tensor": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConfigProto_321": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=args.ram)",
                            "Call"
                        ]
                    ]
                }
            },
            "InputLayer_141": {
                "input_shape": {
                    "value": "args.L_character",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "repr_NN_class_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_144": {
                "units": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "repr_NN_class_2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "SVGPVAE_model.py": {
        "tensorflow": {
            "concat_664": {
                "variable": {
                    "value": "batch_T",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(T, (1, tmax)) for i in range(batch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_689": {
                "variable": {
                    "value": "gp_covariance_posterior_elemwise_mean_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_v_x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_690": {
                "variable": {
                    "value": "gp_covariance_posterior_elemwise_mean_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_v_y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_692": {
                "variable": {
                    "value": "full_p_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p_m_x, p_m_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_693": {
                "variable": {
                    "value": "full_p_var",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.linalg.diag_part(p_v_x), tf.linalg.diag_part(p_v_y)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_700": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, tmax, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_705": {
                "variable": {
                    "value": "pred_vid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_vid_batch_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_MLP_decoder_graph(latent_samples, px, py)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_706": {
                "variable": {
                    "value": "recon_term",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "vid_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred_vid_batch_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_MLP_decoder_graph(latent_samples, px, py)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_707": {
                "variable": {
                    "value": "recon_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-recon_term",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_753": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(qnet_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_766": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images - recon_images_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_802": {
                "variable": {
                    "value": "sin_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.math.sin(aux_data_train[:, 1]), tf.repeat(w * h, N_train))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N_train, w, h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_803": {
                "variable": {
                    "value": "cos_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.math.cos(aux_data_train[:, 1]), tf.repeat(w * h, N_train))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N_train, w, h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_804": {
                "variable": {
                    "value": "images_train",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images_train, sin_, cos_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_807": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(qnet_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_815": {
                "variable": {
                    "value": "mean_latent_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "mean_latent_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(mean_latent_samples, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_818": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images_test - recon_images_test) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_851": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(images)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_855": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qnet_mu.get_shape()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_880": {
                "variable": {
                    "value": "inside_elbo_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside_elbo_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inside_elbo_recon_x + inside_elbo_recon_y",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inside_elbo_recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_881": {
                "variable": {
                    "value": "inside_elbo_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside_elbo_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inside_elbo_kl_x + inside_elbo_kl_y",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(inside_elbo_kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_888": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_889": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_896": {
                "variable": {
                    "value": "ce_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ce_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss_cross_entropy(full_p_mu, full_p_var, qnet_mu, qnet_var)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(ce_term, (1, 2))",
                            "UnaryOp"
                        ],
                        [
                            "gauss_cross_entropy(p_m, p_v, qnet_mu, qnet_var)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ce_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_901": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(p_m)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1006": {
                "variable": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1020": {
                "variable": {
                    "value": "mean_terms",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "mean_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(mean_terms, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1021": {
                "variable": {
                    "value": "inv_Sigma_l_mats",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inv_Sigma_l_mats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(inv_Sigma_l_mats, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1054": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1055": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_1057": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(p_m)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1076": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images_test_batch - recon_images_test_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "segment_mean_1107": {
                "variable": {
                    "value": "character_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "character_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repr_nn.repr_nn(images)",
                            "Call"
                        ],
                        [
                            "tf.segment_mean(character_vectors, segment_ids=segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.repeat(character_vectors, repeats=repeats, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "repeat_1110": {
                "variable": {
                    "value": "character_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "repr_nn.repr_nn(images)",
                            "Call"
                        ],
                        [
                            "tf.segment_mean(character_vectors, segment_ids=segment_ids)",
                            "Call"
                        ],
                        [
                            "tf.repeat(character_vectors, repeats=repeats, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1113": {
                "variable": {
                    "value": "aux_data",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.cast(action_IDs, dtype=tf.float32), axis=1), character_vectors]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1172": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1173": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_1177": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_1179": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(p_m)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_1187": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images - recon_images_test_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_diag_14": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(matrix) + jitter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_75": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=dt) + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.cast(T, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inducing_index_points.get_shape()",
                            "Call"
                        ],
                        [
                            "tf.cast(m, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.inducing_index_points.get_shape()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(m, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_78": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "inv_83": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "inv_154": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "inv_161": {
                "variable": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(sigma_l, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "matvec_164": {
                "variable": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm_Sigma_l_K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_nm, tf.matmul(sigma_l_inv, K_mn))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.math.reciprocal_no_nan(noise) * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matvec_167": {
                "variable": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.math.reciprocal_no_nan(noise) * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(svgp.inducing_index_points, svgp.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(self.inducing_index_points, axis=1), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(self.inducing_index_points, axis=1), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_234": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(images)[0], dtype=vae.dtype)",
                            "Call"
                        ],
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(b, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(index_points_train)[0], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(index_points)[0], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_235": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inducing_index_points.get_shape()",
                            "Call"
                        ],
                        [
                            "tf.cast(m, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "self.inducing_index_points.get_shape()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(m, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_239": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_244": {
                "variable": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_316": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(index_points_train)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_319": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_323": {
                "variable": {
                    "value": "K_mx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_xm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(index_points_test, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_326": {
                "variable": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "inv_331": {
                "variable": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(sigma_l, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_336": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_xm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_341": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(svgp.inducing_index_points, svgp.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(self.inducing_index_points, axis=1), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(self.inducing_index_points, axis=1), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(self.inducing_index_points, self.inducing_index_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_355": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(index_points)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_360": {
                "variable": {
                    "value": "K_mb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_bm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "inv_367": {
                "variable": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(sigma_l, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_629": {
                "variable": {
                    "value": "K_mb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_bm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matvec_631": {
                "variable": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_bm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "mean_term",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_671": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_738": {
                "variable": {
                    "value": "sin_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.math.sin(aux_data[:, 1]), tf.repeat(w * h, b))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(b, w, h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_739": {
                "variable": {
                    "value": "cos_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(tf.math.cos(aux_data[:, 1]), tf.repeat(w * h, b))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(b, w, h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_740": {
                "variable": {
                    "value": "images_cvae",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[images, sin_, cos_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_750": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_813": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "aux_data_train[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "test_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_indices",
                            "Name"
                        ]
                    ]
                }
            },
            "clip_by_value_859": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_892": {
                "variable": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_909": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images - recon_images_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_910": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "recon_loss - kappa ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_918": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images - recon_images_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_933": {
                "variable": {
                    "value": "mean_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_962": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_984": {
                "variable": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inv_1014": {
                "variable": {
                    "value": "Sigma_l_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Sigma_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_mm + tf.matmul(K_mn, tf.multiply(K_nm, tf.math.reciprocal_no_nan(vars[:, l])[:, tf.newaxis]))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matvec_1015": {
                "a": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.math.multiply(tf.math.reciprocal_no_nan(vars[:, l]), means[:, l])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_47": {
                "variable": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_inducing_points_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(self.tmin, self.tmax, num_inducing_points, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "np.linspace(self.ip_min, self.ip_max, num_inducing_points, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_inducing_points_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(self.tmin, self.tmax, num_inducing_points, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "np.linspace(self.ip_min, self.ip_max, num_inducing_points, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'inducing_index_points_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_55": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "vidlt",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "GP_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_length_scale_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_92": {
                "variable": {
                    "value": "cov_mat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(cov_mat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_93": {
                "variable": {
                    "value": "cov_mat_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(cov_mat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matvec_106": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matvec(tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn)), tf.math.reciprocal_no_nan(noise) * y)",
                            "Call"
                        ],
                        [
                            "self.N_train / b * tf.linalg.matvec(tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn)), tf.math.reciprocal_no_nan(noise) * y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(K_nm, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(K_nm, axis=3), perm=[0, 1, 3, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_116": {
                "a": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=3), tf.transpose(tf.expand_dims(K_nm, axis=3), perm=[0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=2), tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "repeat_120": {
                "variable": {
                    "value": "A_hat_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(A_hat, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "[T]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_129": {
                "variable": {
                    "value": "K_mm_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_130": {
                "variable": {
                    "value": "S_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(A_hat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_201": {
                "variable": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_inducing_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_inducing_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'Sparse_GP_inducing_points_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_251": {
                "variable": {
                    "value": "cov_mat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(cov_mat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_252": {
                "variable": {
                    "value": "cov_mat_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(cov_mat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matvec_264": {
                "variable": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.linalg.matvec(K_mm_inv, mu_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_270": {
                "variable": {
                    "value": "K_mm_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_271": {
                "variable": {
                    "value": "S_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(A_hat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_282": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_287": {
                "variable": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(K_nm, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_291": {
                "a": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=3), tf.transpose(tf.expand_dims(K_nm, axis=3), perm=[0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=2), tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_409": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_410": {
                "variable": {
                    "value": "self.amplitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_412": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_length_scale_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_413": {
                "variable": {
                    "value": "self.amplitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_amplitude_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_421": {
                "variable": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "object_vectors_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_object_vectors_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_524": {
                "variable": {
                    "value": "self.GPLVM_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_GPLVM_action",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_526": {
                "variable": {
                    "value": "self.GPLVM_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_GPLVM_action",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_GPLVM_action_vectors_'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inv_625": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_663": {
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vid_batch.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_697": {
                "input_tensor": {
                    "value": "ce_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss_cross_entropy(full_p_mu, full_p_var, qnet_mu, qnet_var)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(ce_term, (1, 2))",
                            "UnaryOp"
                        ],
                        [
                            "gauss_cross_entropy(p_m, p_v, qnet_mu, qnet_var)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(ce_term)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_735": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_779": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_799": {
                "input": {
                    "value": "images_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([images_train, sin_, cos_], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_802": {
                "input": {
                    "value": "w * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "repeats": {
                    "value": "N_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(images_train)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "repeat_803": {
                "input": {
                    "value": "w * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "repeats": {
                    "value": "N_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(images_train)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_850": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_955": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_1079": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1192": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_14": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_82": {
                "input": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_152": {
                "input": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "input": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_155": {
                "input": {
                    "value": "index_points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "input": {
                    "value": "index_points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "input": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "a": {
                    "value": "tf.linalg.diag(tf.math.reciprocal_no_nan(noise))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_167": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_232": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matvec_332": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.linalg.matvec(K_mn, tf.math.reciprocal_no_nan(noise) * y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_337": {
                "input": {
                    "value": "-tf.matmul(K_xm, tf.matmul(K_mm_inv, K_mx)) + K_xm_Sigma_l_K_mx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matvec_339": {
                "a": {
                    "value": "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.math.reciprocal_no_nan(noise) * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matvec_368": {
                "a": {
                    "value": "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mb))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.math.reciprocal_no_nan(noise) * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_451": {
                "variable": {
                    "value": "x_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(x[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_455": {
                "variable": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(y[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_532": {
                "variable": {
                    "value": "self.l_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_533": {
                "variable": {
                    "value": "self.sigma_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_534": {
                "variable": {
                    "value": "self.l_character",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_535": {
                "variable": {
                    "value": "self.sigma_character",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_537": {
                "variable": {
                    "value": "self.l_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_length_scale_action",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_538": {
                "variable": {
                    "value": "self.sigma_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_amplitude_action",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_539": {
                "variable": {
                    "value": "self.l_character",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_length_scale_character",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_540": {
                "variable": {
                    "value": "self.sigma_character",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_amplitude_character",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_632": {
                "input": {
                    "value": "-tf.matmul(K_bm, tf.matmul(K_mm_inv, K_mb)) + tf.matmul(K_bm, tf.matmul(sigma_term, K_mb))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_664": {
                "tensor": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tmax, dtype=dt) + 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.cast(T, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, tmax)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_part_693": {
                "input": {
                    "value": "p_v_y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_701": {
                "x": {
                    "value": "tf.clip_by_value(full_p_var, 0.0001, 1000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_738": {
                "input": {
                    "value": "w * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "repeats": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(images)[0], dtype=vae.dtype)",
                            "Call"
                        ],
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(b, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(index_points_train)[0], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(index_points)[0], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_739": {
                "input": {
                    "value": "w * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "repeats": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.shape(images)[0], dtype=vae.dtype)",
                            "Call"
                        ],
                        [
                            "tf.shape(images)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(b, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(index_points_train)[0], dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.shape(index_points)[0], dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_753": {
                "input": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_754": {
                "x": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_802": {
                "x": {
                    "value": "aux_data_train[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_803": {
                "x": {
                    "value": "aux_data_train[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_807": {
                "input": {
                    "value": "qnet_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_808": {
                "x": {
                    "value": "qnet_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(qnet_var, 1e-06, 1000.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(qnet_var, 0.001, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_814": {
                "input": {
                    "value": "tf.reduce_mean(tf.boolean_mask(latent_samples, mask=mask), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_851": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_901": {
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_902": {
                "x": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_915": {
                "x": {
                    "value": "C_ma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * C_ma + (1 - alpha) * recon_loss / b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_1013": {
                "a": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.multiply(K_nm, tf.math.reciprocal_no_nan(vars[:, l])[:, tf.newaxis])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1057": {
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1058": {
                "x": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1113": {
                "input": {
                    "value": "tf.cast(action_IDs, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1155": {
                "params": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([x for x in range(batch_size_test) if x not in list(context)])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_1156": {
                "params": {
                    "value": "aux_data_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aux_data_SVGPVAE_sprites(data_batch=(images_context, aux_data_target), repr_nn=repr_NN, segment_ids=segment_ids, repeats=repeats)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([x for x in range(batch_size_test) if x not in list(context)])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1179": {
                "input": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1180": {
                "x": {
                    "value": "p_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack(p_v, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(p_v, 0.0001, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_91": {
                "diagonal": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_91": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(cov_mat_chol))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_part_95": {
                "input": {
                    "value": "K_nn - tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_109": {
                "input": {
                    "value": "K_nn - tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_112": {
                "input": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "a": {
                    "value": "tf.expand_dims(K_nm, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_120": {
                "input": {
                    "value": "A_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_121": {
                "*args": {
                    "value": "tf.matmul(A_hat_, lambda_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(K_mm_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_132": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(S_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_164": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_165": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_168": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_248": {
                "diagonal": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_248": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_249": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(cov_mat_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_259": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matvec_265": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matvec(tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn)), tf.math.reciprocal_no_nan(noise) * y)",
                            "Call"
                        ],
                        [
                            "self.N_train / b * tf.linalg.matvec(tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn)), tf.math.reciprocal_no_nan(noise) * y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(K_mm_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(S_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_287": {
                "input": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "a": {
                    "value": "tf.expand_dims(K_nm, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trace_294": {
                "*args": {
                    "value": "tf.matmul(S, lambda_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_316": {
                "input": {
                    "value": "index_points_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_328": {
                "a": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.multiply(K_nm, tf.math.reciprocal_no_nan(noise)[:, tf.newaxis])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_339": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_355": {
                "input": {
                    "value": "index_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_363": {
                "a": {
                    "value": "K_mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.matmul(tf.linalg.diag(tf.math.reciprocal_no_nan(noise)), K_bm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_368": {
                "a": {
                    "value": "sigma_l_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(sigma_l, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_459": {
                "input": {
                    "value": "y_view",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_461": {
                "input": {
                    "value": "y_view",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_565": {
                "params": {
                    "value": "self.GPLVM_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(x[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_570": {
                "params": {
                    "value": "self.GPLVM_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(y[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_701": {
                "t": {
                    "value": "full_p_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.linalg.diag_part(p_v_x), tf.linalg.diag_part(p_v_y)], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_738": {
                "x": {
                    "value": "aux_data[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_739": {
                "x": {
                    "value": "aux_data[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_814": {
                "input_tensor": {
                    "value": "tf.boolean_mask(latent_samples, mask=mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_1013": {
                "x": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reciprocal_no_nan(vars[:, l])[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_1016": {
                "x": {
                    "value": "tf.math.reciprocal_no_nan(vars[:, l])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "means[:, l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_1113": {
                "x": {
                    "value": "action_IDs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_94": {
                "x": {
                    "value": "tf.linalg.diag_part(cov_mat_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "input_tensor": {
                    "value": "trace_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision * tf.linalg.diag_part(K_nn - tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn)))",
                            "BinOp"
                        ],
                        [
                            "tf.math.reciprocal_no_nan(noise) * (K_nn - tf.linalg.diag_part(tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "input": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "A_hat_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.repeat(tf.expand_dims(A_hat, axis=1), repeats=[T], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=3), tf.transpose(tf.expand_dims(K_nm, axis=3), perm=[0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=2), tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "precision * (y - mean_vector) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_131": {
                "x": {
                    "value": "tf.linalg.diag_part(K_mm_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_132": {
                "x": {
                    "value": "tf.linalg.diag_part(S_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "A_hat * tf.linalg.matvec(K_mm_inv, A_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_160": {
                "diagonal": {
                    "value": "tf.math.reciprocal_no_nan(noise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_250": {
                "input": {
                    "value": "tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_253": {
                "x": {
                    "value": "tf.linalg.diag_part(cov_mat_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_257": {
                "input_tensor": {
                    "value": "trace_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision * tf.linalg.diag_part(K_nn - tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn)))",
                            "BinOp"
                        ],
                        [
                            "tf.math.reciprocal_no_nan(noise) * (K_nn - tf.linalg.diag_part(tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_273": {
                "x": {
                    "value": "tf.linalg.diag_part(K_mm_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_274": {
                "x": {
                    "value": "tf.linalg.diag_part(S_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_278": {
                "input_tensor": {
                    "value": "mu_hat * tf.linalg.matvec(K_mm_inv, mu_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_284": {
                "input": {
                    "value": "tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_288": {
                "input": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_294": {
                "a": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A_hat",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=3), tf.transpose(tf.expand_dims(K_nm, axis=3), perm=[0, 1, 3, 2]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ],
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=2), tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_299": {
                "input_tensor": {
                    "value": "precision * (y - mean_vector) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_329": {
                "x": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "svgp.kernel_matrix(aux_data, svgp.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(x, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel.matrix(tf.expand_dims(index_points, axis=2), tf.expand_dims(self.inducing_index_points, axis=1))",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points_train, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reciprocal_no_nan(noise)[:, tf.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matvec_333": {
                "a": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.math.reciprocal_no_nan(noise) * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_340": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_364": {
                "a": {
                    "value": "tf.linalg.diag(tf.math.reciprocal_no_nan(noise))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K_bm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ],
                        [
                            "self.kernel_matrix(index_points, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_369": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_451": {
                "x": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_455": {
                "x": {
                    "value": "y[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_466": {
                "input_tensor": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(self.object_vectors, tf.cast(y[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_471": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(x_object, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.math.reduce_euclidean_norm(y_object, axis=1, keepdims=True), perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_565": {
                "x": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_570": {
                "x": {
                    "value": "y[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_577": {
                "input_tensor": {
                    "value": "x_action",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_578": {
                "input_tensor": {
                    "value": "y_action",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_581": {
                "input_tensor": {
                    "value": "x_character",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_582": {
                "input_tensor": {
                    "value": "y_character",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_590": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(x_action, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.math.reduce_euclidean_norm(y_action, axis=1, keepdims=True), perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_595": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(x_character, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.math.reduce_euclidean_norm(y_character, axis=1, keepdims=True), perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_633": {
                "a": {
                    "value": "sigma_term",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "K_mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_814": {
                "tensor": {
                    "value": "latent_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "full_p_mu + epsilon * tf.sqrt(tf.clip_by_value(full_p_var, 0.0001, 1000))",
                            "BinOp"
                        ],
                        [
                            "qnet_mu + epsilon * tf.sqrt(qnet_var)",
                            "BinOp"
                        ],
                        [
                            "qnet_mu + epsilon * tf.sqrt(qnet_var)",
                            "BinOp"
                        ],
                        [
                            "p_m + epsilon * tf.sqrt(p_v)",
                            "BinOp"
                        ],
                        [
                            "p_m + epsilon * tf.sqrt(p_v)",
                            "BinOp"
                        ],
                        [
                            "p_m + epsilon * tf.sqrt(p_v)",
                            "BinOp"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.equal(aux_data_train[:, 0], test_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_913": {
                "input": {
                    "value": "C_ma - recon_loss / b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_1016": {
                "x": {
                    "value": "vars[:, l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_part_94": {
                "input": {
                    "value": "cov_mat_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "y * tf.linalg.matvec(cov_mat_inv, y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_131": {
                "input": {
                    "value": "K_mm_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_132": {
                "input": {
                    "value": "S_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(A_hat, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(A_hat, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_135": {
                "*args": {
                    "value": "tf.matmul(K_mm_inv, A_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_160": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_250": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_253": {
                "input": {
                    "value": "cov_mat_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_256": {
                "input_tensor": {
                    "value": "y * tf.linalg.matvec(cov_mat_inv, y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_273": {
                "input": {
                    "value": "K_mm_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_274": {
                "input": {
                    "value": "S_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(A_hat, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(A_hat, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_277": {
                "*args": {
                    "value": "tf.matmul(K_mm_inv, A_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_337": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_xm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_365": {
                "diagonal": {
                    "value": "tf.math.reciprocal_no_nan(noise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_471": {
                "input_tensor": {
                    "value": "x_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(self.object_vectors, tf.cast(x[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_472": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(y_object, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_590": {
                "input_tensor": {
                    "value": "x_action",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_591": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(y_action, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_595": {
                "input_tensor": {
                    "value": "x_character",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_596": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(y_character, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_632": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(K_bm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_1013": {
                "x": {
                    "value": "vars[:, l]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "tf.log(noise)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_125": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_135": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "A_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ]
                    ]
                }
            },
            "matvec_137": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "A_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_277": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "A_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mm))",
                            "Call"
                        ]
                    ]
                }
            },
            "matvec_279": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "b": {
                    "value": "mu_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matvec(tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn)), tf.math.reciprocal_no_nan(noise) * y)",
                            "Call"
                        ],
                        [
                            "self.N_train / b * tf.linalg.matvec(tf.matmul(K_mm, tf.matmul(sigma_l_inv, K_mn)), tf.math.reciprocal_no_nan(noise) * y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_298": {
                "input_tensor": {
                    "value": "tf.log(noise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_298": {
                "x": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reciprocal_no_nan_330": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_333": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reciprocal_no_nan_365": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_euclidean_norm_472": {
                "input_tensor": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(self.object_vectors, tf.cast(y[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_591": {
                "input_tensor": {
                    "value": "y_action",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_596": {
                "input_tensor": {
                    "value": "y_character",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matvec_98": {
                "a": {
                    "value": "cov_mat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "trace_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision * tf.trace(tf.matmul(A_hat_, lambda_mat))",
                            "BinOp"
                        ],
                        [
                            "precision * tf.trace(tf.matmul(S, lambda_mat))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_255": {
                "x": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matvec_256": {
                "a": {
                    "value": "cov_mat_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(cov_mat, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_297": {
                "input_tensor": {
                    "value": "trace_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision * tf.trace(tf.matmul(A_hat_, lambda_mat))",
                            "BinOp"
                        ],
                        [
                            "precision * tf.trace(tf.matmul(S, lambda_mat))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_298": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_255": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SVIGP_Hensman_model.py": {
        "tensorflow": {
            "cast_252": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(images)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_263": {
                "variable": {
                    "value": "inside_elbo_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside_elbo_recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(inside_elbo_recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_264": {
                "variable": {
                    "value": "inside_elbo_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside_elbo_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(inside_elbo_kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_269": {
                "variable": {
                    "value": "mean_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "mean_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(mean_vectors, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images - recon_images_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_312": {
                "variable": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(p_m, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_332": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(images_test_batch - recon_images_test_logits) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_diag_11": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(matrix) + jitter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "Hensman_likelihood_noise",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(images)[0], dtype=vae.dtype)",
                            "Call"
                        ],
                        [
                            "tf.shape(x)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(b, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_148": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inducing_index_points.get_shape()[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(m, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inv_152": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_157": {
                "variable": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matvec_163": {
                "variable": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.linalg.matvec(K_mm_inv, variational_inducing_observations_loc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_169": {
                "variable": {
                    "value": "K_mm_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_170": {
                "variable": {
                    "value": "S_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(variational_inducing_observations_cov_mat, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(K_nm, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "a": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=2), tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "inv_215": {
                "variable": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_add_diagonal_jitter(K_mm, self.jitter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_220": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K_xm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(index_points_test, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "matvec_222": {
                "variable": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_xm, K_mm_inv)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "variational_inducing_observations_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variational_inducing_observations_loc[lat_channel]",
                            "Subscript"
                        ],
                        [
                            "self.variational_inducing_observations_loc[lat_channel]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_42": {
                "variable": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "initial_inducing_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.inducing_index_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_inducing_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'Sparse_GP_inducing_points_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "self.amplitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "self.l_GP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_length_scale_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "self.amplitude",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_amplitude_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "object_vectors_init",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_object_vectors_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_251": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vae.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_335": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_11": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "initial_value": {
                    "value": "np.zeros([self.nr_inducing], dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_var_params_mu_{}'.format(l + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "initial_value": {
                    "value": "np.eye(self.nr_inducing, dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'GP_var_params_A_{}'.format(l + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_99": {
                "variable": {
                    "value": "x_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(x[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_103": {
                "variable": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.object_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(y[:, 0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matvec_164": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "variational_inducing_observations_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variational_inducing_observations_loc[lat_channel]",
                            "Subscript"
                        ],
                        [
                            "self.variational_inducing_observations_loc[lat_channel]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(K_mm_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "input_tensor": {
                    "value": "tf.log(tf.linalg.diag_part(S_chol))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "a": {
                    "value": "tf.expand_dims(K_nm, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trace_193": {
                "*args": {
                    "value": "tf.matmul(S, lambda_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "a": {
                    "value": "mid_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K_mm - variational_inducing_observations_cov_mat",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(A, perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_252": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_107": {
                "input": {
                    "value": "y_view",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "input": {
                    "value": "y_view",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_172": {
                "x": {
                    "value": "tf.linalg.diag_part(K_mm_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_173": {
                "x": {
                    "value": "tf.linalg.diag_part(S_chol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_177": {
                "input_tensor": {
                    "value": "variational_inducing_observations_loc * tf.linalg.matvec(K_mm_inv, variational_inducing_observations_loc)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_part_183": {
                "input": {
                    "value": "tf.matmul(K_nm, tf.matmul(K_mm_inv, K_mn))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_187": {
                "input": {
                    "value": "K_nm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel_matrix(x, self.inducing_index_points, x_inducing=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_193": {
                "a": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variational_inducing_observations_cov_mat",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "lambda_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(K_nm, axis=2), tf.transpose(tf.expand_dims(K_nm, axis=2), perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matmul(K_mm_inv, tf.matmul(lambda_mat, K_mm_inv))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_196": {
                "input_tensor": {
                    "value": "trace_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision * tf.trace(tf.matmul(S, lambda_mat))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_99": {
                "x": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_103": {
                "x": {
                    "value": "y[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_114": {
                "input_tensor": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(self.object_vectors, tf.cast(y[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(x_object, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.math.reduce_euclidean_norm(y_object, axis=1, keepdims=True), perm=[1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_part_172": {
                "input": {
                    "value": "K_mm_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_173": {
                "input": {
                    "value": "S_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.cholesky(_add_diagonal_jitter(variational_inducing_observations_cov_mat, self.jitter))",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_176": {
                "*args": {
                    "value": "tf.matmul(K_mm_inv, variational_inducing_observations_cov_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_183": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "K_mn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(K_nm, perm=[1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_225": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(K_xm, K_mm_inv)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_285": {
                "x": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_285": {
                "x": {
                    "value": "tf.log(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "svgp.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_euclidean_norm_120": {
                "input_tensor": {
                    "value": "x_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(self.object_vectors, tf.cast(x[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_121": {
                "a": {
                    "value": "tf.math.reduce_euclidean_norm(y_object, axis=1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "variational_inducing_observations_cov_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variational_inducing_observations_cov_mat[lat_channel]",
                            "Subscript"
                        ],
                        [
                            "self.variational_inducing_observations_cov_mat[lat_channel]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matvec_178": {
                "a": {
                    "value": "K_mm_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ],
                        [
                            "tf.linalg.inv(_add_diagonal_jitter(K_mm, self.jitter))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "variational_inducing_observations_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.variational_inducing_observations_loc[lat_channel]",
                            "Subscript"
                        ],
                        [
                            "self.variational_inducing_observations_loc[lat_channel]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_euclidean_norm_121": {
                "input_tensor": {
                    "value": "y_object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(self.object_vectors, tf.cast(y[:, 0], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "VAE_utils.py": {
        "tensorflow": {
            "reshape_28": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vid_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch * tmax, px * py)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([i_dims, output_dim], stddev=1.0 / np.sqrt(float(i_dims)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, output_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch, tmax, output_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_53": {
                "variable": {
                    "value": "q_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h0[:, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "latent_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([latent_samples, tf.expand_dims(sin_, axis=1), tf.expand_dims(cos_, axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch * tmax, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, l])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "pred_vid_batch_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch, tmax, px, py)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_diag_6": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.linalg.diag_part(matrix) + jitter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, l])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "encB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, l])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "decB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(im_width, im_height, 1), dtype=self.dtype), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(2, 2), activation='elu', dtype=self.dtype), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(2, 2), activation='elu', dtype=self.dtype), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(2, 2), activation='elu', dtype=self.dtype), tf.keras.layers.Flatten(), tf.keras.layers.Dense(2 * self.L)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(128, dtype=self.dtype), tf.keras.layers.Reshape(target_shape=(4, 4, 8)), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(1, 1), activation='elu', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=1, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.encoder_first_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(im_width, im_height, 3), dtype=self.dtype), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(2, 2), activation='elu', dtype=self.dtype), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(2, 2), activation='elu', dtype=self.dtype), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(2, 2), activation='elu', dtype=self.dtype), tf.keras.layers.Flatten()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.encoder_last_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(dim_last_layer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.decoder_first_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(128, dtype=self.dtype), tf.keras.layers.Reshape(target_shape=(4, 4, 8))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_205": {
                "variable": {
                    "value": "self.decoder_last_part",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(1, 1), activation='elu', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=1, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encodings, tf.expand_dims(tf.math.sin(angles), axis=1), tf.expand_dims(tf.math.cos(angles), axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_245": {
                "variable": {
                    "value": "sin_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_246": {
                "variable": {
                    "value": "cos_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "latent_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[latent_samples, tf.expand_dims(sin_, axis=1), tf.expand_dims(cos_, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "sin_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(sin_, tf.repeat(4 * 4, b))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(b, 4, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_253": {
                "variable": {
                    "value": "cos_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.repeat(cos_, tf.repeat(4 * 4, b))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(b, 4, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_254": {
                "variable": {
                    "value": "recon_images",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[recon_images, sin_, cos_]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(im_width, im_height, n_channels), dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(2, 2), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(2, 2), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(2, 2), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Flatten(), tf.keras.layers.Dense(2 * L)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(1024, dtype=self.dtype), tf.keras.layers.Reshape(target_shape=(8, 8, 16)), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=16, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.Conv2D(filters=3, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_375": {
                "variable": {
                    "value": "self.repr_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.InputLayer(input_shape=(im_width, im_height, n_channels), dtype=self.dtype, name='GP_repr_NN_1'), tf.keras.layers.Conv2D(filters=L, kernel_size=2, strides=(2, 2), activation='elu', padding='same', dtype=self.dtype, name='GP_repr_NN_2'), tf.keras.layers.Conv2D(filters=L, kernel_size=2, strides=(2, 2), activation='elu', padding='same', dtype=self.dtype, name='GP_repr_NN_3'), tf.keras.layers.Conv2D(filters=L, kernel_size=2, strides=(2, 2), activation='elu', padding='same', dtype=self.dtype, name='GP_repr_NN_4'), tf.keras.layers.AveragePooling2D(pool_size=(8, 8), padding='same', name='GP_repr_NN_5'), tf.keras.layers.Flatten(name='GP_repr_NN_6')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.Dense(128, dtype=self.dtype), tf.keras.layers.Reshape(target_shape=(4, 4, 8)), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=8, kernel_size=3, strides=(1, 1), activation='elu', dtype=self.dtype), tf.keras.layers.UpSampling2D(size=(2, 2)), tf.keras.layers.Conv2D(filters=1, kernel_size=3, strides=(1, 1), activation='elu', padding='same', dtype=self.dtype)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_45": {
                "shape": {
                    "value": "[i_dims, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(float(i_dims))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "shape": {
                    "value": "[1, output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "a": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, output_dim], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_89": {
                "shape": {
                    "value": "[i_dims, l]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(float(i_dims))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[1, l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, output_dim], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_6": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_33": {
                "shape": {
                    "value": "[i_dims, l]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(float(i_dims))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "shape": {
                    "value": "[1, l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "a": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, output_dim], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_80": {
                "shape": {
                    "value": "[i_dims, l]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / np.sqrt(float(i_dims))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "shape": {
                    "value": "[1, l]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "a": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vid_batch, (batch * tmax, px * py))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(h0, (batch, tmax, output_dim))",
                            "Call"
                        ],
                        [
                            "tf.reshape(latent_samples, (batch * tmax, 2))",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ],
                        [
                            "tf.nn.tanh(h0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h0, W) + B",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, output_dim], stddev=1.0 / np.sqrt(float(i_dims))), name='encW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([i_dims, l], stddev=1.0 / np.sqrt(float(i_dims))), name='decW')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_151": {
                "x": {
                    "value": "encodings[:, self.L:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_231": {
                "x": {
                    "value": "encodings[:, self.L:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_242": {
                "input": {
                    "value": "latent_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([latent_samples, tf.expand_dims(sin_, axis=1), tf.expand_dims(cos_, axis=1)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_252": {
                "input": {
                    "value": "4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "repeats": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(latent_samples)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "repeat_253": {
                "input": {
                    "value": "4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "repeats": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(latent_samples)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_272": {
                "input_tensor": {
                    "value": "mean_vector ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_348": {
                "x": {
                    "value": "encodings[:, self.L:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InputLayer_116": {
                "input_shape": {
                    "value": "(im_width, im_height, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_117": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_119": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_121": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_125": {
                "units": {
                    "value": "2 * self.L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_130": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_131": {
                "target_shape": {
                    "value": "(4, 4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling2D_132": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_133": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_135": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_136": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_138": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_139": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InputLayer_184": {
                "input_shape": {
                    "value": "(im_width, im_height, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_185": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_187": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_189": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_196": {
                "units": {
                    "value": "dim_last_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * self.L",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_201": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_202": {
                "target_shape": {
                    "value": "(4, 4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling2D_207": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_208": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_210": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_211": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_213": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_214": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_227": {
                "input": {
                    "value": "tf.math.sin(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_228": {
                "input": {
                    "value": "tf.math.cos(angles)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_247": {
                "input": {
                    "value": "sin_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.sin(angles)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.repeat(sin_, tf.repeat(4 * 4, b)), shape=(b, 4, 4, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_248": {
                "input": {
                    "value": "cos_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.cos(angles)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.repeat(cos_, tf.repeat(4 * 4, b)), shape=(b, 4, 4, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "var_vector",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InputLayer_296": {
                "input_shape": {
                    "value": "(im_width, im_height, n_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_297": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_299": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_301": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_303": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_305": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_307": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Flatten_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_314": {
                "units": {
                    "value": "2 * L",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_319": {
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_320": {
                "target_shape": {
                    "value": "(8, 8, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling2D_321": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_322": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_324": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_326": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_327": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_329": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_331": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_332": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_334": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_336": {
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InputLayer_377": {
                "input_shape": {
                    "value": "(im_width, im_height, n_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_repr_NN_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_379": {
                "filters": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_repr_NN_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_382": {
                "filters": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_repr_NN_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_385": {
                "filters": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_repr_NN_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AveragePooling2D_388": {
                "pool_size": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "GP_repr_NN_5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_390": {
                "name": {
                    "value": "GP_repr_NN_6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_410": {
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Reshape_411": {
                "target_shape": {
                    "value": "(4, 4, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling2D_412": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_413": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_415": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_416": {
                "filters": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "UpSampling2D_418": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_419": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "elu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_227": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_228": {
                "x": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_269": {
                "x": {
                    "value": "tf.reduce_prod(tf.shape(mean_vector))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_270": {
                "input_tensor": {
                    "value": "tf.log(tf.sqrt(var_vector))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_269": {
                "input_tensor": {
                    "value": "tf.shape(mean_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_270": {
                "x": {
                    "value": "tf.sqrt(var_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_269": {
                "input": {
                    "value": "mean_vector",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_270": {
                "x": {
                    "value": "var_vector",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}