{
    "RRN/Gaussian_downsample.py": {
        "torch": {
            "pad_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(-1, 1, H, W)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w, pad_w + r_w, pad_h, pad_h + r_h], 'reflect')",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, gaussian_filter, stride=scale)",
                            "Call"
                        ],
                        [
                            "x[:, :, 2:-2, 2:-2]",
                            "Subscript"
                        ],
                        [
                            "x.view(C, T, x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w, pad_w + r_w, pad_h, pad_h + r_h]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "gaussian_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gkern(13, 0.4 * scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "gaussian_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(-1, 1, H, W)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w, pad_w + r_w, pad_h, pad_h + r_h], 'reflect')",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, gaussian_filter, stride=scale)",
                            "Call"
                        ],
                        [
                            "x[:, :, 2:-2, 2:-2]",
                            "Subscript"
                        ],
                        [
                            "x.view(C, T, x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "gaussian_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(gkern(13, 0.4 * scale)).type_as(x).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RRN/arch.py": {
        "torch": {
            "Sequential_15": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "scale ** 2 * 3 + n_c + 3 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_c",
                            "Method Argument"
                        ],
                        [
                            "n_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_c",
                            "Method Argument"
                        ],
                        [
                            "n_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_c",
                            "Method Argument"
                        ],
                        [
                            "n_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_c",
                            "Method Argument"
                        ],
                        [
                            "n_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "scale ** 2 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, 1)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, h, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_h(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f1, f2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pixel_shuffle_73": {
                "input": {
                    "value": "x_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "self.neuro(x_input, x_h, x_o)",
                            "Call"
                        ],
                        [
                            "self.down(x_o)",
                            "Call"
                        ],
                        [
                            "self.neuro(x_input, x_h, x_o)",
                            "Call"
                        ],
                        [
                            "F.pixel_shuffle(x_o, self.scale) + F.interpolate(f2, scale_factor=self.scale, mode='bilinear', align_corners=False)",
                            "BinOp"
                        ],
                        [
                            "x_o",
                            "Method Argument"
                        ]
                    ]
                },
                "upscale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_73": {
                "input": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, 1, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "RRN/bicubic.py": {
        "torch": {
            "abs_12": {
                "variable": {
                    "value": "absx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(1, out_length, out_length)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_45": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_50": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sym_patch.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "out_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_length",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "out_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_101": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u - kernel_width / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_123": {
                "variable": {
                    "value": "weights_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale * cubic(distance_to_center * scale)",
                            "BinOp"
                        ],
                        [
                            "cubic(distance_to_center)",
                            "Call"
                        ],
                        [
                            "weights / weights_sum.expand(out_length, P)",
                            "BinOp"
                        ],
                        [
                            "weights.narrow(1, 1, P - 2)",
                            "Call"
                        ],
                        [
                            "weights.narrow(1, 0, P - 2)",
                            "Call"
                        ],
                        [
                            "weights.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_127": {
                "variable": {
                    "value": "weights_zero_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_111": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "P - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(kernel_width) + 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "RRN/load_test.py": {
        "torch": {
            "cat_41": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LR[:, 1:2, :, :], LR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "RRN/load_train.py": {
        "torch": {
            "cat_55": {
                "variable": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(LR[:, 1:2, :, :], LR)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "RRN/loss.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(diff * diff + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "input": {
                    "value": "diff * diff + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "RRN/main.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_training_set(opt.data_dir, opt.scale, opt.data_augmentation, opt.file_list)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opt.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "rrn",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rrn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RRN(opt.scale, n_c, n_b)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(rrn)",
                            "Call"
                        ],
                        [
                            "rrn.cuda()",
                            "Call"
                        ],
                        [
                            "rrn",
                            "Method Argument"
                        ],
                        [
                            "rrn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "L1Loss_79": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rrn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_85": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(rrn.parameters(), lr=opt.lr, betas=(0.9, 0.999), eps=1e-08, weight_decay=opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.stepsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opt.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "rrn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_model_path, model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_138": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_139": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_109": {
                "variable": {
                    "value": "init_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input[:, 0:1, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "RRN/test.py": {
        "torch": {
            "DataParallel_57": {
                "variable": {
                    "value": "rrn",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "rrn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RRN(opt.scale, n_c, n_b)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(rrn, device_ids=gpus_list)",
                            "Call"
                        ],
                        [
                            "rrn.cuda(gpus_list[0])",
                            "Call"
                        ],
                        [
                            "rrn",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpus_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus_list in range(opt.gpus)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_test_set(opt.test_dir, opt.scale, scene_name)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opt.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.testbatchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "opt.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "variable": {
                    "value": "init_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_input[:, 0:1, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "RRN/utils.py": {
        "torch": {
            "abs_69": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_70": {
                "condition": {
                    "value": "t <= delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * t - 0.5 * delta ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_tensors_86": {
                "variable": {
                    "value": "(expanded_input, expanded_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_87": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.broadcast_tensors(input, target)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expanded_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.broadcast_tensors(input, target)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "get_enum(reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_84": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_smooth_l1_loss(input, target)",
                            "Call"
                        ],
                        [
                            "torch._C._nn.smooth_l1_loss(expanded_input, expanded_target, get_enum(reduction))",
                            "Call"
                        ],
                        [
                            "torch.mean(ret) if reduction == 'mean' else torch.sum(ret)",
                            "IfExp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "'mean'",
                            "str"
                        ],
                        [
                            "'sum'",
                            "str"
                        ],
                        [
                            "'none'",
                            "str"
                        ]
                    ]
                }
            },
            "sum_84": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_smooth_l1_loss(input, target)",
                            "Call"
                        ],
                        [
                            "torch._C._nn.smooth_l1_loss(expanded_input, expanded_target, get_enum(reduction))",
                            "Call"
                        ],
                        [
                            "torch.mean(ret) if reduction == 'mean' else torch.sum(ret)",
                            "IfExp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "'mean'",
                            "str"
                        ],
                        [
                            "'sum'",
                            "str"
                        ],
                        [
                            "'none'",
                            "str"
                        ]
                    ]
                }
            }
        }
    }
}