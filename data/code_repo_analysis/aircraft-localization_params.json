{
    "aircraft_localization_round2.py": {
        "sklearn": {}
    },
    "winning-entries/round1/1st Place/learnfilter.py": {
        "sklearn": {
            "PredefinedSplit_123": {
                "variable": {
                    "value": "ps",
                    "type": "variable",
                    "possible_values": []
                },
                "test_fold": {
                    "value": "test_fold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.repeat(i // 30, smo.trajff.shape[0]) for (i, smo) in enumerate(ltraj)])",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomizedSearchCV_129": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyLGBMClassifier(lsensors, feature_fraction=1, num_leaves=7, learning_rate=0.1, min_child_samples=10, subsample=1.0, reg_lambda=0.0) if args.classif else lgb.LGBMRegressor(n_estimators=4000, subsample_freq=10, random_state=0, n_jobs=1, objective='l2', importance_type='gain', max_bin=511)",
                            "IfExp"
                        ],
                        [
                            "RandomizedSearchCV(model, parameters, cv=ps, n_jobs=args.n_jobs, verbose=1, n_iter=args.n_iter, random_state=0)",
                            "Call"
                        ]
                    ]
                },
                "param_distributions": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'num_leaves': scipy.stats.randint(2, 11), 'learning_rate': scipy.stats.loguniform(0.0001, 0.01), 'min_child_samples': scipy.stats.randint(10, 60), 'subsample': scipy.stats.uniform(loc=0.3, scale=0.4), 'reg_lambda': scipy.stats.loguniform(1e-14, 1e-10), 'feature_fraction': scipy.stats.uniform(loc=0.7, scale=0.3)}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "ps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PredefinedSplit(test_fold)",
                            "Call"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "args.n_jobs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "args.n_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/3rd Place/bancroft_interpolation_validation.py": {
        "sklearn": {
            "train_test_split_50": {
                "variable": {
                    "value": "(train_aircrafts, val_aicrafts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "known_aircrafts",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/3rd Place/calc_sensor_shift2_params.py": {
        "sklearn": {
            "Ridge_66": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "alpha": {
                    "value": "ridge_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ridge_alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "svd",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/5th Place/src/main/full_prediction_pipeline.py": {
        "sklearn": {
            "MinMaxScaler_74": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round2/1st Place/src/solvers.py": {
        "sklearn": {
            "RANSACRegressor_459": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RANSACRegressor_527": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round2/1st Place/src/track.py": {
        "sklearn": {
            "PolynomialFeatures_32": {
                "variable": {
                    "value": "poly",
                    "type": "variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "HuberRegressor_39": {
                "variable": {
                    "value": "hr_lat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "HuberRegressor_40": {
                "variable": {
                    "value": "hr_lon",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round2/2nd Place/libs/preprocessing.py": {
        "sklearn": {
            "train_test_split_176": {
                "*arrays_0": {
                    "value": "aircrafts",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round2/2nd Place/round2_mlat/find_good_sensors_and_filter.py": {
        "sklearn": {
            "RANSACRegressor_10": {
                "variable": {
                    "value": "ransac",
                    "type": "variable",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "DummyRegressor()",
                    "type": "Call",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DummyRegressor_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round2/5th Place/src/main/modelsensordrift.py": {
        "sklearn": {
            "LinearRegression_41": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round2/5th Place/src/main/test.py": {
        "sklearn": {
            "MinMaxScaler_66": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/1st Place/aircraftpos.py": {
        "torch": {
            "Embedding_83": {
                "variable": {
                    "value": "self.latlon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "int(self.nfts.id.max()) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "sensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.sensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_137": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyzloc - xyzpos.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "samesensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch.samesensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_176": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': self.latlon.parameters(), 'lr': self.hparams.lr}]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_152": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[timeAtServer[s:, 0] - timeAtServer[:-s, 0] for timeAtServer in batch.timeAtServer]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "dxy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ldxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "norm_154": {
                "variable": {
                    "value": "dxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(ldxy)",
                            "Call"
                        ],
                        [
                            "torch.norm(dxy, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_117": {
                "tensors": {
                    "value": "batch.id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_134": {
                "tensors": {
                    "value": "batch.baroalt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "batch.times",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_155": {
                "input": {
                    "value": "dxy - self.hparams.speed_limit * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_178": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-80",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "input": {
                    "value": "latlon[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/1st Place/common.py": {
        "torch": {
            "set_num_threads_15": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_114": {
                "variable": {
                    "value": "loc_sensors",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "maxemb + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_115": {
                "variable": {
                    "value": "alt_sensors",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "maxemb + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "shift_sensors",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "maxemb + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_104": {
                "input": {
                    "value": "loc.weight[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_123": {
                "variable": {
                    "value": "alt_sensors.weight[line.serial, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "data": {
                    "value": "torch.Tensor([C])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "1 - e ** 2 * torch.sin(lat) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_143": {
                "input": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slat(t)",
                            "Call"
                        ],
                        [
                            "deg2rad * lat",
                            "BinOp"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_144": {
                "input": {
                    "value": "lon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slon(t)",
                            "Call"
                        ],
                        [
                            "deg2rad * lon",
                            "BinOp"
                        ],
                        [
                            "rad(lon)",
                            "Call"
                        ],
                        [
                            "rad(lon)",
                            "Call"
                        ],
                        [
                            "lon",
                            "Method Argument"
                        ],
                        [
                            "lon",
                            "Method Argument"
                        ],
                        [
                            "lon",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_145": {
                "input": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slat(t)",
                            "Call"
                        ],
                        [
                            "deg2rad * lat",
                            "BinOp"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_124": {},
            "cos_144": {
                "input": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slat(t)",
                            "Call"
                        ],
                        [
                            "deg2rad * lat",
                            "BinOp"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_68": {
                "input": {
                    "value": "dxyz - c * dtime",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_142": {
                "input": {
                    "value": "lat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slat(t)",
                            "Call"
                        ],
                        [
                            "deg2rad * lat",
                            "BinOp"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "rad(lat)",
                            "Call"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ],
                        [
                            "lat",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "winning-entries/round1/1st Place/datautils.py": {
        "torch": {
            "get_rng_state_31": {
                "variable": {
                    "value": "rng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_33": {
                "variable": {
                    "value": "cudarng_state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_40": {
                "new_state": {
                    "value": "state[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchSampler_184": {
                "variable": {
                    "value": "self.batch_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler(range(len(dataset)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchSampler_215": {
                "variable": {
                    "value": "self.batch_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler(range(len(dataset)))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_27": {
                "input": {
                    "value": "x - a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_rng_state_42": {
                "new_state": {
                    "value": "state[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/1st Place/sensorsparams.py": {
        "torch": {
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.loc_sensors.parameters(), 'lr': lr}, {'params': self.shift_sensors.parameters(), 'lr': lrs}, {'params': self.alt_sensors.parameters(), 'lr': lralt}, {'params': self.C, 'lr': lrC}]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_74": {
                "input": {
                    "value": "xyzloc[:, i] - batch.xyz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "StepLR_108": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam([{'params': self.loc_sensors.parameters(), 'lr': lr}, {'params': self.shift_sensors.parameters(), 'lr': lrs}, {'params': self.alt_sensors.parameters(), 'lr': lralt}, {'params': self.C, 'lr': lrC}])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.hparams.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "dsave",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'loc': self.loc_sensors, 'alt': self.alt_sensors, 'shift': self.shift_sensors, 'C': self.C}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.hparams.save_sensorsparams",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "winning-entries/round1/1st Place/splineaircraftpos.py": {
        "torch": {}
    },
    "winning-entries/round1/1st Place/trainpytorchlightning.py": {
        "torch": {}
    },
    "winning-entries/round1/3rd Place/libs/piecewise_torch_filter.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((k,), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.intercept",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1,), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_19": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(xs - self.min_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_22": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.intercept",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[pos]",
                            "Subscript"
                        ],
                        [
                            "ys[pos]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pos.view(-1, 1) - torch.arange(0, self.k).view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp((xs.view(-1, 1) - cuts1.view(1, -1)) / length.view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.cuts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.min_x + torch.arange(1, k, dtype=torch.float) * self.step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((k,), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.intercept",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1,), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_49": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(xs - self.min_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.intercept",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "intercept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[pos]",
                            "Subscript"
                        ],
                        [
                            "ys[pos]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pos.view(-1, 1) - torch.arange(0, self.k).view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp((xs.view(-1, 1) - cuts1.view(1, -1)) / length.view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "cuts1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.min_x.view(1), self.cuts]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "cuts2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.cuts, self.max_x.view(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_79": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.regressor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_90": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.regressor.parameters(), lr=0.0003)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "iterations + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmin_24": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(xs - self.min_x - float(self.max_x - self.min_x) * (i + 1) / self.k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmin_54": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(xs - self.min_x - float(self.max_x - self.min_x) * (i + 1) / self.k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_72": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "(k,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "xs - self.min_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_32": {
                "input": {
                    "value": "pos.view(-1, 1) - torch.arange(0, self.k).view(1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pos.view(-1, 1) - torch.arange(0, self.k).view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp((xs.view(-1, 1) - cuts1.view(1, -1)) / length.view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "(k,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "xs - self.min_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "input": {
                    "value": "(xs.view(-1, 1) - cuts1.view(1, -1)) / length.view(1, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp(pos.view(-1, 1) - torch.arange(0, self.k).view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(self.t)",
                            "Call"
                        ],
                        [
                            "torch.clamp((xs.view(-1, 1) - cuts1.view(1, -1)) / length.view(1, -1), 0, 1) * self.t.view(1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_24": {
                "input": {
                    "value": "xs - self.min_x - float(self.max_x - self.min_x) * (i + 1) / self.k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_54": {
                "input": {
                    "value": "xs - self.min_x - float(self.max_x - self.min_x) * (i + 1) / self.k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_73": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_116": {},
            "arange_32": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_42": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}