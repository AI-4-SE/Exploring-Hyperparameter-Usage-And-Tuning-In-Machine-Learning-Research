{
    "models/modeling.py": {
        "torch": {
            "normalize_366": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(features)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_368": {
                "variable": {
                    "value": "pos_label_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels == labels[i] for i in range(B)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.transpose([3, 2, 0, 1])",
                            "Call"
                        ],
                        [
                            "attention_probs",
                            "variable"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "layer(hidden_states)",
                            "Call"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.hybrid_model(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embeddings(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention_norm(x)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "x + h",
                            "BinOp"
                        ],
                        [
                            "self.ffn_norm(x)",
                            "Call"
                        ],
                        [
                            "self.ffn(x)",
                            "Call"
                        ],
                        [
                            "x + h",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.transformer['attention_dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.proj_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.transformer['attention_dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_82": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.transformer['mlp_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.transformer['mlp_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.transformer['dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, n_patches + 1, config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, config.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.transformer['dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_181": {
                "variable": {
                    "value": "self.attention_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_182": {
                "variable": {
                    "value": "self.ffn_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_258": {
                "variable": {
                    "value": "self.part_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_271": {
                "variable": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(parts).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_271": {
                "variable": {
                    "value": "parts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden_states[:, 0].unsqueeze(1), parts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.part_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21843",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act_fn(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.hybrid_model(x)",
                            "Call"
                        ],
                        [
                            "self.patch_embeddings(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, -2)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.attention_norm(x)",
                            "Call"
                        ],
                        [
                            "self.attn(x)",
                            "Call"
                        ],
                        [
                            "x + h",
                            "BinOp"
                        ],
                        [
                            "self.ffn_norm(x)",
                            "Call"
                        ],
                        [
                            "self.ffn(x)",
                            "Call"
                        ],
                        [
                            "x + h",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.patch_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(config.patches['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(config.patches['size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "last_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "last_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "torch.matmul(x[i], last_map)",
                            "Call"
                        ],
                        [
                            "last_map[:, :, 0, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.patch_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(config.patches['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "(config.slide_step, config.slide_step)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_305": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "CrossEntropyLoss_126": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simple_accuracy(all_preds, all_label)",
                            "Call"
                        ],
                        [
                            "torch.tensor(accuracy).to(args.device)",
                            "Call"
                        ],
                        [
                            "simple_accuracy(all_preds, all_label)",
                            "Call"
                        ],
                        [
                            "torch.tensor(accuracy).to(args.device)",
                            "Call"
                        ],
                        [
                            "valid(args, model, writer, test_loader, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_172": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join('logs', args.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_377": {
                "variable": {
                    "value": "args.nprocs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_to_save.state_dict(), 'amp': amp.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'model': model_to_save.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, '%s_checkpoint.bin' % args.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simple_accuracy(all_preds, all_label)",
                            "Call"
                        ],
                        [
                            "torch.tensor(accuracy).to(args.device)",
                            "Call"
                        ],
                        [
                            "simple_accuracy(all_preds, all_label)",
                            "Call"
                        ],
                        [
                            "torch.tensor(accuracy).to(args.device)",
                            "Call"
                        ],
                        [
                            "valid(args, model, writer, test_loader, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_368": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_369": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_372": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_109": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_137": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x, y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_229": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x, y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_371": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "args.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__253": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__255": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_utils.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CUB(root=args.data_root, is_train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "CarsDataset(os.path.join(args.data_root, 'devkit/cars_train_annos.mat'), os.path.join(args.data_root, 'cars_train'), os.path.join(args.data_root, 'devkit/cars_meta.mat'), transform=transforms.Compose([transforms.Resize((600, 600), Image.BILINEAR), transforms.RandomCrop((448, 448)), transforms.RandomHorizontalFlip(), AutoAugImageNetPolicy(), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]))",
                            "Call"
                        ],
                        [
                            "dogs(root=args.data_root, train=True, cropped=False, transform=train_transform, download=False)",
                            "Call"
                        ],
                        [
                            "NABirds(root=args.data_root, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "INat2017(args.data_root, 'train', train_transform)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(trainset) if args.local_rank == -1 else DistributedSampler(trainset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_106": {
                "data_source": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CUB(root=args.data_root, is_train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "CarsDataset(os.path.join(args.data_root, 'devkit/cars_train_annos.mat'), os.path.join(args.data_root, 'cars_train'), os.path.join(args.data_root, 'devkit/cars_meta.mat'), transform=transforms.Compose([transforms.Resize((600, 600), Image.BILINEAR), transforms.RandomCrop((448, 448)), transforms.RandomHorizontalFlip(), AutoAugImageNetPolicy(), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]))",
                            "Call"
                        ],
                        [
                            "dogs(root=args.data_root, train=True, cropped=False, transform=train_transform, download=False)",
                            "Call"
                        ],
                        [
                            "NABirds(root=args.data_root, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "INat2017(args.data_root, 'train', train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_106": {
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CUB(root=args.data_root, is_train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "CarsDataset(os.path.join(args.data_root, 'devkit/cars_train_annos.mat'), os.path.join(args.data_root, 'cars_train'), os.path.join(args.data_root, 'devkit/cars_meta.mat'), transform=transforms.Compose([transforms.Resize((600, 600), Image.BILINEAR), transforms.RandomCrop((448, 448)), transforms.RandomHorizontalFlip(), AutoAugImageNetPolicy(), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]))",
                            "Call"
                        ],
                        [
                            "dogs(root=args.data_root, train=True, cropped=False, transform=train_transform, download=False)",
                            "Call"
                        ],
                        [
                            "NABirds(root=args.data_root, train=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "INat2017(args.data_root, 'train', train_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_107": {
                "data_source": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CUB(root=args.data_root, is_train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "CarsDataset(os.path.join(args.data_root, 'cars_test_annos_withlabels.mat'), os.path.join(args.data_root, 'cars_test'), os.path.join(args.data_root, 'devkit/cars_meta.mat'), transform=transforms.Compose([transforms.Resize((600, 600), Image.BILINEAR), transforms.CenterCrop((448, 448)), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]))",
                            "Call"
                        ],
                        [
                            "dogs(root=args.data_root, train=False, cropped=False, transform=test_transform, download=False)",
                            "Call"
                        ],
                        [
                            "NABirds(root=args.data_root, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "INat2017(args.data_root, 'val', test_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_107": {
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CUB(root=args.data_root, is_train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "CarsDataset(os.path.join(args.data_root, 'cars_test_annos_withlabels.mat'), os.path.join(args.data_root, 'cars_test'), os.path.join(args.data_root, 'devkit/cars_meta.mat'), transform=transforms.Compose([transforms.Resize((600, 600), Image.BILINEAR), transforms.CenterCrop((448, 448)), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]))",
                            "Call"
                        ],
                        [
                            "dogs(root=args.data_root, train=False, cropped=False, transform=test_transform, download=False)",
                            "Call"
                        ],
                        [
                            "NABirds(root=args.data_root, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "INat2017(args.data_root, 'val', test_transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CUB(root=args.data_root, is_train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "CarsDataset(os.path.join(args.data_root, 'cars_test_annos_withlabels.mat'), os.path.join(args.data_root, 'cars_test'), os.path.join(args.data_root, 'devkit/cars_meta.mat'), transform=transforms.Compose([transforms.Resize((600, 600), Image.BILINEAR), transforms.CenterCrop((448, 448)), transforms.ToTensor(), transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]))",
                            "Call"
                        ],
                        [
                            "dogs(root=args.data_root, train=False, cropped=False, transform=test_transform, download=False)",
                            "Call"
                        ],
                        [
                            "NABirds(root=args.data_root, train=False, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "INat2017(args.data_root, 'val', test_transform)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(testset) if args.local_rank == -1 else DistributedSampler(testset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "torch": {
            "from_numpy_109": {
                "ndarray": {
                    "value": "np.array(car_class.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dist_util.py": {
        "torch": {
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/scheduler.py": {
        "torch": {}
    }
}