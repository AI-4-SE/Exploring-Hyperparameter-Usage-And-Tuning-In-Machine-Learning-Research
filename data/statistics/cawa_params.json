{
    "Code/scripts/logisticRegression.py": {
        "sklearn": {
            "TfidfVectorizer_20": {
                "variable": {
                    "value": "tfidf_transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "binary": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "min_df": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "\\\\S+",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_35": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf[1].predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegression_22": {
                "random_state": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Code/scripts/myAUC.py": {
        "sklearn": {
            "auc_27": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(TH))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(TH))",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_34": {
                "variable": {
                    "value": "roc_macro[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr_macro[:, c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr_macro[:, c]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Code/scripts/myF1.py": {
        "sklearn": {
            "precision_score_10": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_11": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_12": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_14": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_15": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_16": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_18": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_19": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_20": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_22": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_23": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_24": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/scripts/myF1optimal.py": {
        "sklearn": {
            "f1_score_19": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_29": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_30": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_31": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_33": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_34": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_35": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_37": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_38": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_39": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_41": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_42": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_43": {
                "y_true": {
                    "value": "tlbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tlbl",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_float.copy()",
                            "Call"
                        ],
                        [
                            "b_float",
                            "variable"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Code/scripts/twoLayerNN.py": {
        "sklearn": {
            "TfidfVectorizer_52": {
                "variable": {
                    "value": "tfidf_transformer",
                    "type": "variable",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "binary": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "min_df": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "token_pattern": {
                    "value": "\\\\S+",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_90": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs.data.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "1194",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_60": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout_utility",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.input2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tfidf_transformer.get_feature_names())",
                            "Call"
                        ],
                        [
                            "len(clf[0].get_feature_names())",
                            "Call"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.hidden2label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input2hidden(docs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden2label(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "X_train.toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "X_test.toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "X_test.toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "X_test.toarray()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Code/cawa.py": {
        "torch": {
            "Adam_642": {
                "variable": {
                    "value": "s_encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, s_encoder.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "args.learning",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_643": {
                "variable": {
                    "value": "attention_model_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, attention_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "args.learning",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_647": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.FloatTensor(pos_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "seed0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_610": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + EPSILON - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_612": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size(1)",
                            "Call"
                        ],
                        [
                            "kq_prod.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_612": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "batch_words",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_loader_train.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_words)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_420": {
                "variable": {
                    "value": "batch_projection_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_projection_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_loader_train.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_projection_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_423": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_loader_train.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "batch_loader.get_next_batch()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(batch_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_446": {
                "variable": {
                    "value": "self.x_cord",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_455": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier",
                            "variable"
                        ],
                        [
                            "classifier_optimizer",
                            "variable"
                        ],
                        [
                            "classifier",
                            "variable"
                        ],
                        [
                            "classifier_optimizer",
                            "variable"
                        ],
                        [
                            "classifier",
                            "variable"
                        ],
                        [
                            "classifier_optimizer",
                            "variable"
                        ],
                        [
                            "torch.tanh(self.input2hidden(self.dropout(input_ftr)))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_472": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "args.dropout",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_474": {
                "variable": {
                    "value": "self.key_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_475": {
                "variable": {
                    "value": "self.value_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_494": {
                "variable": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "key_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.key_embedding(docs))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_495": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proj_mat",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "value_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.value_embedding(docs))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_508": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "args.dropout",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_511": {
                "variable": {
                    "value": "self.query_embedding_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_512": {
                "variable": {
                    "value": "self.query_embedding_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_513": {
                "variable": {
                    "value": "self.query_embedding_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_539": {
                "variable": {
                    "value": "break_kq_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kq_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p3",
                            "variable"
                        ],
                        [
                            "torch.where(mask, kq_prod, break_kq_prod)",
                            "Call"
                        ],
                        [
                            "kq_prod.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "kq_prod.contiguous().view(-1, 1, init_size[2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "padding_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_lens.unsqueeze(1).unsqueeze(2).expand(kq_prod.size()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "arange_542": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size(1)",
                            "Call"
                        ],
                        [
                            "kq_prod.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_542": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_547": {
                "variable": {
                    "value": "kq_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx < len_expanded",
                            "Compare"
                        ],
                        [
                            "mask.unsqueeze(2).expand(logits.size())",
                            "Call"
                        ],
                        [
                            "mask * ~mask2",
                            "BinOp"
                        ],
                        [
                            "idx < len_expanded",
                            "Compare"
                        ],
                        [
                            "mask.unsqueeze(2).expand(kq_prod.size())",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "kq_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p3",
                            "variable"
                        ],
                        [
                            "torch.where(mask, kq_prod, break_kq_prod)",
                            "Call"
                        ],
                        [
                            "kq_prod.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "kq_prod.contiguous().view(-1, 1, init_size[2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "break_kq_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(kq_prod, 1, padding_indices, out=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_555": {
                "variable": {
                    "value": "attention_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "smoothened_kq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.avgpool(kq_prod)",
                            "Call"
                        ],
                        [
                            "smoothened_kq.squeeze(1).view(init_size)",
                            "Call"
                        ],
                        [
                            "smoothened_kq.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_560": {
                "variable": {
                    "value": "class_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_values.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sent_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_values",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_572": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "args.dropout",
                            "Attribute"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_573": {
                "variable": {
                    "value": "self.input2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_574": {
                "variable": {
                    "value": "self.hidden2hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_575": {
                "variable": {
                    "value": "self.hidden2label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_585": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input2hidden(self.dropout(input_ftr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_586": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hidden2hidden(self.dropout(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__706": {
                "parameters": {
                    "value": "s_encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clipping_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ],
                        [
                            "args.clipping",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_grad_norm__707": {
                "parameters": {
                    "value": "attention_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clipping_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ],
                        [
                            "args.clipping",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AvgPool1d_515": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "args.kernel_size",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((kernel_size - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_646": {
                "params": {
                    "value": "filter(lambda p: p.requires_grad, classifier[i].parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "args.learning",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_grad_norm__710": {
                "parameters": {
                    "value": "x.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clipping_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "float"
                        ],
                        [
                            "args.clipping",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sigmoid_767": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "autograd.Variable(torch.FloatTensor(labels.size()[0], labels.size()[1]))",
                            "Call"
                        ],
                        [
                            "autograd.Variable(torch.FloatTensor(labels.size()[0], labels.size()[1]))",
                            "Call"
                        ],
                        [
                            "evaluate(batch_words, batch_projection_matrix, batch_num_words, batch_num_sentences, batch_labels)",
                            "Call"
                        ],
                        [
                            "evaluate(batch_words, batch_projection_matrix, batch_num_words, batch_num_sentences, batch_labels)",
                            "Call"
                        ],
                        [
                            "evaluate(batch_words, batch_projection_matrix, batch_num_words, batch_num_sentences, batch_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_452": {
                "input": {
                    "value": "-((self.x_cord - self.avg) / self.sig) ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_453": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (self.sig * math.sqrt(2 * math.pi)) * torch.exp(-((self.x_cord - self.avg) / self.sig) ** 2 / 2)",
                            "BinOp"
                        ],
                        [
                            "conv / torch.sum(conv)",
                            "BinOp"
                        ],
                        [
                            "conv.view(1, 1, 1, -1)",
                            "Call"
                        ],
                        [
                            "conv.expand(y.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_531": {
                "input": {
                    "value": "self.query_embedding_1(sent_keys)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_532": {
                "input": {
                    "value": "self.query_embedding_2(p1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_414": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_415": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_416": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}