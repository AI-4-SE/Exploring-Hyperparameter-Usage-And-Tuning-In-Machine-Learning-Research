{
    "tools/evaluation/retrieval.py": {
        "sklearn": {
            "cosine_distances_130": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "euclidean_distances_133": {
                "X": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "bagoftricks.py": {
        "torch": {
            "is_available_86": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.train, seq_len=args.seq_len, sample='random', transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, num_instances=args.num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "queryloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.query, seq_len=args.seq_len, sample='dense', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "galleryloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.gallery, seq_len=args.seq_len, sample='dense', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_184": {
                "variable": {
                    "value": "optimizer_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "criterion_center_loss.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_89": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_188": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.init_model(name=args.arch, num_classes=dataset.num_train_pids, loss={'xent', 'htri'})",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_255": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_277": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_250": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_270": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_272": {
                "variable": {
                    "value": "(features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_283": {
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_283": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_284": {
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_284": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_352": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.save_dir, args.arch + '_checkpoint_ep' + str(epoch + 1) + '.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "config_trainer.py": {
        "torch": {
            "is_available_91": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "queryloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.query, seq_len=args.seq_len, sample='dense', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "galleryloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.gallery, seq_len=args.seq_len, sample='dense', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_231": {
                "variable": {
                    "value": "optimizer_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "criterion_center_loss.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset_inderase(dataset.train, seq_len=args.seq_len, sample=args.sampling, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, num_instances=args.num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.train, seq_len=args.seq_len, sample='random', transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, num_instances=args.num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_235": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.init_model(name=args.arch, num_classes=dataset.num_train_pids, loss={'xent', 'htri'})",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_344": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_366": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_410": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.pretrained_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_339": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_359": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_361": {
                "variable": {
                    "value": "(features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_372": {
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_372": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_373": {
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_373": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_467": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.save_dir, args.arch + '_checkpoint_ep' + str(epoch + 1) + '.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "hyper_supervise_validation.py": {
        "torch": {
            "is_available_117": {
                "variable": {
                    "value": "use_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.train, seq_len=args.seq_len, sample='random', transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(dataset.train, num_instances=args.num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(parameters.get('batch_size', 32)))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_196": {
                "variable": {
                    "value": "optimizer_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "criterion_center_loss.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_276": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_337": {
                "variable": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_359": {
                "variable": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_119": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "validation_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.val, seq_len=8, sample='random', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "queryloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.val_query, seq_len=args.seq_len, sample='dense_subset', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "galleryloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "VideoDataset(dataset.val_gallery, seq_len=args.seq_len, sample='dense_subset', transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True if use_gpu else False",
                            "IfExp"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_185": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.init_model(name=args.arch, num_classes=dataset.num_train_pids, loss={'xent', 'htri'})",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_248": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_332": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_269": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_271": {
                "variable": {
                    "value": "(features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_283": {
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_283": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_284": {
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_284": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_352": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_354": {
                "variable": {
                    "value": "(features, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ],
                        [
                            "model(imgs)",
                            "Call"
                        ],
                        [
                            "features.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(features, 0)",
                            "Call"
                        ],
                        [
                            "features.data.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_365": {
                "input": {
                    "value": "qf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(qf)",
                            "Call"
                        ],
                        [
                            "qf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_365": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_366": {
                "input": {
                    "value": "gf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(gf)",
                            "Call"
                        ],
                        [
                            "gf.numpy()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_366": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss/loss.py": {
        "torch": {
            "manual_seed_all_9": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_10": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_31": {
                "variable": {
                    "value": "self.logsoftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_96": {
                "variable": {
                    "value": "self.margin_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_167": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_196": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_198": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_198": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_202": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 * torch.pow(dist, 2) / (self.osm_sigma * self.osm_sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_203": {
                "variable": {
                    "value": "S_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha - dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "embd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(embd, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_210": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(x, embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "atten_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.min(atten_class.expand(n, n), atten_class.view(-1, 1).expand(n, n))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_216": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_class.expand(n, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_250": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_261": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_261": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_273": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_274": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_69": {
                "variable": {
                    "value": "(sorted_mat_distance, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_distance + -9999999.0 * (1 - mat_similarity)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_71": {
                "variable": {
                    "value": "(sorted_mat_distance, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_distance + 9999999.0 * mat_similarity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_76": {
                "variable": {
                    "value": "(sorted_mat_distance, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_distance + 9999999.0 * (1 - mat_similarity)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_78": {
                "variable": {
                    "value": "(sorted_mat_distance, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mat_distance + -9999999.0 * mat_similarity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "variable": {
                    "value": "margin_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hard_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted_mat_distance[:, 0]",
                            "Subscript"
                        ],
                        [
                            "sorted_mat_distance[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_163": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_164": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_164": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_210": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(embd, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_226": {
                "input": {
                    "value": "W_P * torch.pow(dist, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_227": {
                "input": {
                    "value": "W_N * torch.pow(S_, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_118": {
                "input": {
                    "value": "hard_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted_mat_distance[:, 0]",
                            "Subscript"
                        ],
                        [
                            "sorted_mat_distance[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_152": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_154": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "denominator[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_202": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distmat * mask.float()",
                            "BinOp"
                        ],
                        [
                            "torch.pow(x, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ],
                        [
                            "torch.pow(inputs, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_221": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_222": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_224": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_225": {
                "n": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "m": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_226": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distmat * mask.float()",
                            "BinOp"
                        ],
                        [
                            "torch.pow(x, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ],
                        [
                            "torch.pow(inputs, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_227": {
                "input": {
                    "value": "S_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.alpha - dist, min=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/ResNet.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool1d_35": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.attention_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_62": {
                "variable": {
                    "value": "self.attention_tconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_tconv(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_84": {
                "variable": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_85": {
                "variable": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_112": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.attention_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[14, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_123": {
                "variable": {
                    "value": "self.attention_tconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_tconv(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_147": {
                "variable": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_148": {
                "variable": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_167": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.attention_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[14, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_178": {
                "variable": {
                    "value": "self.attention_tconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.middle_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_192": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_195": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_tconv(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_199": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_201": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_203": {
                "variable": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ],
                        [
                            "x.view(b * t, x.size(2), x.size(3), x.size(4))",
                            "Call"
                        ],
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "self.gap(x)",
                            "Call"
                        ],
                        [
                            "x.view(b, t, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_204": {
                "variable": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, a)",
                            "Call"
                        ],
                        [
                            "torch.sum(att_x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(a)",
                            "Call"
                        ],
                        [
                            "F.normalize(a, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_conv(x))",
                            "Call"
                        ],
                        [
                            "a.view(b, t, self.middle_dim)",
                            "Call"
                        ],
                        [
                            "a.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.attention_tconv(a))",
                            "Call"
                        ],
                        [
                            "a.view(b, t)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(a, -1)",
                            "Call"
                        ],
                        [
                            "a.expand(b, t, self.feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/helplayer.py": {
        "torch": {
            "BatchNorm1d_44": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.class_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_95": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tools/metric.py": {
        "torch": {
            "matmul_14": {
                "variable": {
                    "value": "frac_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_31": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_32": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_32": {
                "variable": {
                    "value": "yy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_15": {
                "input": {
                    "value": "torch.sum(torch.pow(x, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_16": {
                "input": {
                    "value": "torch.sum(torch.pow(y, 2), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_15": {
                "input": {
                    "value": "torch.pow(x, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.pow(y, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_15": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_16": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/samplers.py": {
        "torch": {
            "randperm_31": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_identities",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tools/scheduler.py": {
        "torch": {}
    },
    "tools/transforms2.py": {
        "torch": {}
    },
    "tools/utils.py": {
        "torch": {
            "save_46": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_105": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(save_dir, f)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tools/video_loader.py": {
        "torch": {
            "cat_309": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_377": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "imgs_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_121": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "imgs_array",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}