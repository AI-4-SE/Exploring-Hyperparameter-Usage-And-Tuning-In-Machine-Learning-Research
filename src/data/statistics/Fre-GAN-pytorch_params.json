{
    "discriminator.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[norm_f(nn.Conv2d(1, 32, kernel_size=(3, 9), padding=(1, 4))), norm_f(nn.Conv2d(32, 32, kernel_size=(3, 9), stride=(1, 2), padding=(1, 4))), norm_f(nn.Conv2d(32, 32, kernel_size=(3, 9), stride=(1, 2), padding=(1, 4))), norm_f(nn.Conv2d(32, 32, kernel_size=(3, 9), stride=(1, 2), padding=(1, 4))), norm_f(nn.Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SpecDiscriminator(fft_sizes[0], hop_sizes[0], win_lengths[0], window), SpecDiscriminator(fft_sizes[1], hop_sizes[1], win_lengths[1], window), SpecDiscriminator(fft_sizes[2], hop_sizes[2], win_lengths[2], window)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[norm_f(Conv2d(1, 32, (kernel_size, 1), (stride, 1), padding=(get_padding(5, 1), 0))), norm_f(Conv2d(32, 128, (kernel_size, 1), (stride, 1), padding=(get_padding(5, 1), 0))), norm_f(Conv2d(128, 512, (kernel_size, 1), (stride, 1), padding=(get_padding(5, 1), 0))), norm_f(Conv2d(512, 1024, (kernel_size, 1), (stride, 1), padding=(get_padding(5, 1), 0))), norm_f(Conv2d(1024, 1024, (kernel_size, 1), 1, padding=(2, 0)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_175": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d3], dim=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DiscriminatorP(2), DiscriminatorP(3), DiscriminatorP(5), DiscriminatorP(7), DiscriminatorP(11)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[norm_f(Conv1d(1, 128, 15, 1, padding=7)), norm_f(Conv1d(128, 128, 41, 2, groups=4, padding=20)), norm_f(Conv1d(128, 256, 41, 2, groups=16, padding=20)), norm_f(Conv1d(256, 512, 41, 4, groups=16, padding=20)), norm_f(Conv1d(512, 1024, 41, 4, groups=16, padding=20)), norm_f(Conv1d(1024, 1024, 41, 1, groups=16, padding=20)), norm_f(Conv1d(1024, 1024, 5, 1, padding=2))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_249": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d3], dim=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_261": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DiscriminatorS(use_spectral_norm=True), DiscriminatorS(), DiscriminatorS()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_42": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.squeeze(1)",
                            "Call"
                        ],
                        [
                            "stft(y, self.fft_size, self.shift_size, self.win_length, self.window.to(y.get_device()))",
                            "Call"
                        ],
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "d(y)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(y, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.out(y)",
                            "Call"
                        ],
                        [
                            "y_1",
                            "Name"
                        ],
                        [
                            "y_2",
                            "Name"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "pad_112": {
                "variable": {
                    "value": "x_d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dwt_conv1(torch.cat([x_d1_high1, x_d1_low1], dim=1))",
                            "Call"
                        ],
                        [
                            "F.pad(x_d1, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x_d1.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "self.dwt_proj1(x_d1)",
                            "Call"
                        ],
                        [
                            "self.dwt_conv1(torch.cat([x_d1_high1, x_d1_low1], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, n_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_126": {
                "variable": {
                    "value": "x_d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dwt_conv2(torch.cat([x_d2_high1, x_d2_low1, x_d2_high2, x_d2_low2], dim=1))",
                            "Call"
                        ],
                        [
                            "F.pad(x_d2, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x_d2.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "self.dwt_proj2(x_d2)",
                            "Call"
                        ],
                        [
                            "self.dwt_conv2(torch.cat([x_d2_high1, x_d2_low1, x_d2_high2, x_d2_low2], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, n_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_145": {
                "variable": {
                    "value": "x_d3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_d3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dwt_conv3(torch.cat([x_d3_high1, x_d3_low1, x_d3_high2, x_d3_low2, x_d3_high3, x_d3_low3, x_d3_high4, x_d3_low4], dim=1))",
                            "Call"
                        ],
                        [
                            "F.pad(x_d3, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x_d3.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "self.dwt_proj3(x_d3)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, n_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d3], dim=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, n_pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_161": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d3], dim=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "leaky_relu_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, n_pad), 'reflect')",
                            "Call"
                        ],
                        [
                            "x.view(b, c, t // self.period, self.period)",
                            "Call"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d3], dim=2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "l(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d1], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_d2], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_48": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.squeeze(1)",
                            "Call"
                        ],
                        [
                            "stft(y, self.fft_size, self.shift_size, self.win_length, self.window.to(y.get_device()))",
                            "Call"
                        ],
                        [
                            "y.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "d(y)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(y, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.out(y)",
                            "Call"
                        ],
                        [
                            "y_1",
                            "Name"
                        ],
                        [
                            "y_2",
                            "Name"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_87": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_89": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_91": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "[x_d1_high1, x_d1_low1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "tensors": {
                    "value": "[x_d2_high1, x_d2_low1, x_d2_high2, x_d2_low2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "[x_d3_high1, x_d3_low1, x_d3_high2, x_d3_low2, x_d3_high3, x_d3_low3, x_d3_high4, x_d3_low4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_d1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_212": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_213": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_223": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "[x_d1_high1, x_d1_low1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "tensors": {
                    "value": "[x_d2_high1, x_d2_low1, x_d2_high2, x_d2_low2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_d1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_d2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_259": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_260": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "[y_hi, y_lo]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "[x_d1_high1, x_d1_low1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "[x_d2_high1, x_d2_low1, x_d2_high2, x_d2_low2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "tensors": {
                    "value": "[x_d2_high1, x_d2_low1, x_d2_high2, x_d2_low2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_d2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(get_padding(5, 1), 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_d3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_215": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_216": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_217": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_218": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_219": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_220": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "41",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_221": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dwt.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "band_low",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wavelet.rec_lo",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "band_high",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wavelet.rec_hi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "self.filt_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "self.filt_high",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_74": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, pad=self.pad_sizes, mode=self.pad_type)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.pad_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.pad_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.filter_low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.filter_low",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.filter_high",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.filter_high",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, pad=self.pad_sizes, mode=self.pad_type)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter_low.to(input.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_76": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, pad=self.pad_sizes, mode=self.pad_type)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.filter_high.to(input.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "export_torchscript.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "h.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(args.input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_47": {
                "variable": {
                    "value": "hifigan_trace",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FreGAN(h).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generator.py": {
        "torch": {
            "randn_197": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0], padding=get_padding(kernel_size, dilation[0]))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1], padding=get_padding(kernel_size, dilation[1]))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[2], padding=get_padding(kernel_size, dilation[2]))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[3], padding=get_padding(kernel_size, dilation[3])))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.convs2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0], padding=get_padding(kernel_size, dilation[0]))), weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1], padding=get_padding(kernel_size, dilation[1])))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "weight_norm_87": {
                "variable": {
                    "value": "self.conv_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Conv1d(80, h.upsample_initial_channel, 7, 1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.ups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.cond_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.res_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.resblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_126": {
                "variable": {
                    "value": "self.conv_post",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Conv1d(ch, 1, 7, 1, padding=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.res_output[i - self.cond_level - 1](x)",
                            "Call"
                        ],
                        [
                            "self.res_output[i - self.cond_level - 1](output)",
                            "Call"
                        ],
                        [
                            "output + x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x + mel",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                }
            },
            "leaky_relu_40": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x + mel",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "leaky_relu_42": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "c1(xt)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(xt, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "c2(xt)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "c(xt)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "leaky_relu_68": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x + mel",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "xt + x",
                            "BinOp"
                        ],
                        [
                            "self.conv_pre(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv_post(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "x + mel",
                            "BinOp"
                        ],
                        [
                            "F.leaky_relu(x, LRELU_SLOPE)",
                            "Call"
                        ],
                        [
                            "self.ups[i](x)",
                            "Call"
                        ],
                        [
                            "xs / self.num_kernels",
                            "BinOp"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "LRELU_SLOPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "remove_weight_norm_173": {
                "module": {
                    "value": "self.conv_pre",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_174": {
                "module": {
                    "value": "self.conv_post",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_49": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.convs",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ],
                        [
                            "self.cond_up",
                            "Attribute"
                        ],
                        [
                            "self.res_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "remove_weight_norm_51": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.convs",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ],
                        [
                            "self.cond_up",
                            "Attribute"
                        ],
                        [
                            "self.res_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "remove_weight_norm_75": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.convs",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ],
                        [
                            "self.cond_up",
                            "Attribute"
                        ],
                        [
                            "self.res_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv1d_87": {
                "in_channels": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h.upsample_initial_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_126": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.upsample_initial_channel // 2 ** (i + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remove_weight_norm_166": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.convs",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ],
                        [
                            "self.cond_up",
                            "Attribute"
                        ],
                        [
                            "self.res_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "remove_weight_norm_170": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs1",
                            "Attribute"
                        ],
                        [
                            "self.convs2",
                            "Attribute"
                        ],
                        [
                            "self.convs",
                            "Attribute"
                        ],
                        [
                            "self.ups",
                            "Attribute"
                        ],
                        [
                            "self.resblocks",
                            "Attribute"
                        ],
                        [
                            "self.cond_up",
                            "Attribute"
                        ],
                        [
                            "self.res_output",
                            "Attribute"
                        ]
                    ]
                }
            },
            "remove_weight_norm_172": {
                "module": {
                    "value": "l[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "weight_norm_15": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0], padding=get_padding(kernel_size, dilation[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_17": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1], padding=get_padding(kernel_size, dilation[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_19": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[2], padding=get_padding(kernel_size, dilation[2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_21": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[3], padding=get_padding(kernel_size, dilation[3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_27": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_29": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_31": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_33": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=1, padding=get_padding(kernel_size, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_59": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0], padding=get_padding(kernel_size, dilation[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_61": {
                "module": {
                    "value": "Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1], padding=get_padding(kernel_size, dilation[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_97": {
                "module": {
                    "value": "ConvTranspose1d(h.upsample_initial_channel // 2 ** i, h.upsample_initial_channel // 2 ** (i + 1), k, u, padding=(k - u) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_15": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_17": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[3]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_31": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "get_padding(kernel_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_59": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_61": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "get_padding(kernel_size, dilation[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_98": {
                "in_channels": {
                    "value": "h.upsample_initial_channel // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h.upsample_initial_channel // 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(k - u) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "nn.Upsample(scale_factor=u, mode='nearest')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_111": {
                "module": {
                    "value": "ConvTranspose1d(kr, h.upsample_initial_channel // 2 ** i, self.up_kernels[i - 1], self.upsample_rates[i - 1], padding=(self.up_kernels[i - 1] - self.upsample_rates[i - 1]) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_104": {
                "scale_factor": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "weight_norm_105": {
                "module": {
                    "value": "nn.Conv1d(h.upsample_initial_channel // 2 ** i, h.upsample_initial_channel // 2 ** (i + 1), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_112": {
                "in_channels": {
                    "value": "kr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "Constant"
                        ],
                        [
                            "h.upsample_initial_channel // 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "h.upsample_initial_channel // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.up_kernels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_rates[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.up_kernels[i - 1] - self.upsample_rates[i - 1]) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_105": {
                "in_channels": {
                    "value": "h.upsample_initial_channel // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "h.upsample_initial_channel // 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "mean_18": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dr) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_19": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dg ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_31": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - dg) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_8": {
                "input": {
                    "value": "torch.abs(rl - gl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_8": {
                "input": {
                    "value": "rl - gl",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "meldataset.py": {
        "torch": {
            "pad_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stft_64": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)), mode='reflect')",
                            "Call"
                        ],
                        [
                            "y.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "hop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "win_length": {
                    "value": "win_size",
                    "type": "variable",
                    "possible_values": []
                },
                "window": {
                    "value": "hann_window[str(y.device)]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "center": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad_mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec.pow(2).sum(-1) + 1e-09",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_basis[str(fmax) + '_' + str(y.device)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stft(y, n_fft, hop_length=hop_size, win_length=win_size, window=hann_window[str(y.device)], center=center, pad_mode='reflect', normalized=False, onesided=True)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(spec.pow(2).sum(-1) + 1e-09)",
                            "Call"
                        ],
                        [
                            "torch.matmul(mel_basis[str(fmax) + '_' + str(y.device)], spec)",
                            "Call"
                        ],
                        [
                            "spectral_normalize_torch(spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_28": {
                "input": {
                    "value": "torch.clamp(x, min=clip_val) * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "mel_basis[str(fmax) + _ + str(y.device)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa_mel_fn(sampling_rate, n_fft, num_mels, fmin, fmax)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(self.base_mels_path, os.path.splitext(os.path.split(filename)[-1])[0] + '.npy'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel)",
                            "Call"
                        ],
                        [
                            "mel_spectrogram(audio, self.n_fft, self.num_mels, self.sampling_rate, self.hop_size, self.win_size, self.fmin, self.fmax, center=False)",
                            "Call"
                        ],
                        [
                            "mel.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mel[:, :, mel_start:mel_start + frames_per_seg]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(mel, (0, frames_per_seg - mel.size(2)), 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "hann_window_59": {
                "variable": {
                    "value": "hann_window[str(y.device)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "window_length": {
                    "value": "win_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_50": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)), mode='reflect')",
                            "Call"
                        ],
                        [
                            "y.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_52": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)), mode='reflect')",
                            "Call"
                        ],
                        [
                            "y.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa_mel_fn(sampling_rate, n_fft, num_mels, fmin, fmax)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(self.base_mels_path, os.path.splitext(os.path.split(filename)[-1])[0] + '.npy'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel)",
                            "Call"
                        ],
                        [
                            "mel_spectrogram(audio, self.n_fft, self.num_mels, self.sampling_rate, self.hop_size, self.win_size, self.fmin, self.fmax, center=False)",
                            "Call"
                        ],
                        [
                            "mel.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mel[:, :, mel_start:mel_start + frames_per_seg]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(mel, (0, frames_per_seg - mel.size(2)), 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "clip_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_51": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)), mode='reflect')",
                            "Call"
                        ],
                        [
                            "y.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_53": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)), mode='reflect')",
                            "Call"
                        ],
                        [
                            "y.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_137": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio / MAX_WAV_VALUE",
                            "BinOp"
                        ],
                        [
                            "self.cached_wav",
                            "Attribute"
                        ],
                        [
                            "normalize(audio) * 0.95",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(audio)",
                            "Call"
                        ],
                        [
                            "audio.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "audio[:, audio_start:audio_start + self.segment_size]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(audio, (0, self.segment_size - audio.size(1)), 'constant')",
                            "Call"
                        ],
                        [
                            "audio[:, mel_start * self.hop_size:(mel_start + frames_per_seg) * self.hop_size]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(audio, (0, self.segment_size - audio.size(1)), 'constant')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.segment_size - audio.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_158": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa_mel_fn(sampling_rate, n_fft, num_mels, fmin, fmax)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(self.base_mels_path, os.path.splitext(os.path.split(filename)[-1])[0] + '.npy'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel)",
                            "Call"
                        ],
                        [
                            "mel_spectrogram(audio, self.n_fft, self.num_mels, self.sampling_rate, self.hop_size, self.win_size, self.fmin, self.fmax, center=False)",
                            "Call"
                        ],
                        [
                            "mel.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mel[:, :, mel_start:mel_start + frames_per_seg]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(mel, (0, frames_per_seg - mel.size(2)), 'constant')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, frames_per_seg - mel.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_159": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio / MAX_WAV_VALUE",
                            "BinOp"
                        ],
                        [
                            "self.cached_wav",
                            "Attribute"
                        ],
                        [
                            "normalize(audio) * 0.95",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(audio)",
                            "Call"
                        ],
                        [
                            "audio.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "audio[:, audio_start:audio_start + self.segment_size]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(audio, (0, self.segment_size - audio.size(1)), 'constant')",
                            "Call"
                        ],
                        [
                            "audio[:, mel_start * self.hop_size:(mel_start + frames_per_seg) * self.hop_size]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.pad(audio, (0, self.segment_size - audio.size(1)), 'constant')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.segment_size - audio.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "modules.py": {
        "torch": {
            "Sequential_39": {
                "variable": {
                    "value": "self.input_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv1d(cond_channels, kpnet_hidden_channels, 5, padding=(5 - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.residual_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(kpnet_dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_62": {
                "variable": {
                    "value": "self.kernel_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_in_channels * conv_out_channels * conv_kernel_size * conv_layers",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "variable": {
                    "value": "self.bias_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "l_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_out_channels * conv_layers",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose1d_115": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_ratio * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "upsample_ratio // 2 + upsample_ratio % 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "upsample_ratio % 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x + torch.sigmoid(y[:, :in_channels, :]) * torch.tanh(y[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x + torch.sigmoid(y[:, :in_channels, :]) * torch.tanh(y[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_198": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bildsk,biokl->bolsd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x + torch.sigmoid(y[:, :in_channels, :]) * torch.tanh(y[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_135": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dilation": {
                    "value": "3 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_158": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x + torch.sigmoid(y[:, :in_channels, :]) * torch.tanh(y[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_160": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.convs[i](y)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(y, 0.2)",
                            "Call"
                        ],
                        [
                            "self.location_variable_convolution(y, k, b, 1, self.cond_hop_length)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_191": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "x + torch.sigmoid(y[:, :in_channels, :]) * torch.tanh(y[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, dilation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_40": {
                "in_channels": {
                    "value": "cond_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(5 - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "kpnet_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "kpnet_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_51": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "p": {
                    "value": "kpnet_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_56": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_58": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "3 ** i * int((conv_kernel_size - 1) / 2)",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_165": {
                "input": {
                    "value": "y[:, :in_channels, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_165": {
                "input": {
                    "value": "y[:, in_channels:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "stft_loss.py": {
        "torch": {
            "stft_23": {
                "variable": {
                    "value": "x_stft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n_fft": {
                    "value": "fft_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "hop_length": {
                    "value": "hop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "win_length": {
                    "value": "win_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                },
                "window": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hann_window'",
                            "MethodArgument"
                        ],
                        [
                            "'hann_window'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_28": {
                "input": {
                    "value": "torch.clamp(real ** 2 + imag ** 2, min=1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_28": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.stft_losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_64": {
                "input": {
                    "value": "torch.log(y_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.log(x_mag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_46": {
                "input": {
                    "value": "y_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(y, self.fft_size, self.shift_size, self.win_length, self.window.to(x.get_device()))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "x_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(x, self.fft_size, self.shift_size, self.win_length, self.window.to(x.get_device()))",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_28": {
                "input": {
                    "value": "real ** 2 + imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{:d}'.format(rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamW_66": {
                "variable": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "h.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[h.adam_b1, h.adam_b2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamW_67": {
                "variable": {
                    "value": "optim_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(msd.parameters(), mpd.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "h.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[h.adam_b1, h.adam_b2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ExponentialLR_74": {
                "variable": {
                    "value": "scheduler_g",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(generator.parameters(), h.learning_rate, betas=[h.adam_b1, h.adam_b2])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "h.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "state_dict_do['epoch']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ExponentialLR_75": {
                "variable": {
                    "value": "scheduler_d",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(itertools.chain(msd.parameters(), mpd.parameters()), h.learning_rate, betas=[h.adam_b1, h.adam_b2])",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "h.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "state_dict_do['epoch']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelDataset(training_filelist, h.segment_size, h.n_fft, h.num_mels, h.hop_size, h.win_size, h.sampling_rate, h.fmin, h.fmax, n_cache_reuse=0, shuffle=False if h.num_gpus > 1 else True, fmax_loss=h.fmax_for_loss, device=device, fine_tuning=a.fine_tuning, base_mels_path=a.input_mels_dir)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "h.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(trainset) if h.num_gpus > 1 else None",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "h.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "h.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_62": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FreGAN(h).to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(generator, device_ids=[rank]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_63": {
                "variable": {
                    "value": "mpd",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "mpd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResWiseMultiPeriodDiscriminator().to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(mpd, device_ids=[rank]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_64": {
                "variable": {
                    "value": "msd",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "msd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResWiseMultiScaleDiscriminator().to(device)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(msd, device_ids=[rank]).to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelDataset(validation_filelist, h.segment_size, h.n_fft, h.num_mels, h.hop_size, h.win_size, h.sampling_rate, h.fmin, h.fmax, False, False, n_cache_reuse=0, fmax_loss=h.fmax_for_loss, device=device, fine_tuning=a.fine_tuning, base_mels_path=a.input_mels_dir)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_103": {
                "variable": {
                    "value": "sw",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(a.checkpoint_path, 'logs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_269": {
                "seed": {
                    "value": "h.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_272": {
                "variable": {
                    "value": "h.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_84": {
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MelDataset(training_filelist, h.segment_size, h.n_fft, h.num_mels, h.hop_size, h.win_size, h.sampling_rate, h.fmin, h.fmax, n_cache_reuse=0, shuffle=False if h.num_gpus > 1 else True, fmax_loss=h.fmax_for_loss, device=device, fine_tuning=a.fine_tuning, base_mels_path=a.input_mels_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_271": {
                "seed": {
                    "value": "h.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l1_loss_153": {
                "input": {
                    "value": "y_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(y_mel.to(device, non_blocking=True))",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(y_mel.to(device, non_blocking=True))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_g_hat_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram(y_g_hat.squeeze(1), h.n_fft, h.num_mels, h.sampling_rate, h.hop_size, h.win_size, h.fmin, h.fmax_for_loss)",
                            "Call"
                        ],
                        [
                            "mel_spectrogram(y_g_hat.squeeze(1), h.n_fft, h.num_mels, h.sampling_rate, h.hop_size, h.win_size, h.fmin, h.fmax_for_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_176": {
                "variable": {
                    "value": "mel_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(y_mel.to(device, non_blocking=True))",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(y_mel.to(device, non_blocking=True))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_g_hat_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram(y_g_hat.squeeze(1), h.n_fft, h.num_mels, h.sampling_rate, h.hop_size, h.win_size, h.fmin, h.fmax_for_loss)",
                            "Call"
                        ],
                        [
                            "mel_spectrogram(y_g_hat.squeeze(1), h.n_fft, h.num_mels, h.sampling_rate, h.hop_size, h.win_size, h.fmin, h.fmax_for_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_213": {
                "input": {
                    "value": "y_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(y_mel.to(device, non_blocking=True))",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(y_mel.to(device, non_blocking=True))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_g_hat_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_spectrogram(y_g_hat.squeeze(1), h.n_fft, h.num_mels, h.sampling_rate, h.hop_size, h.win_size, h.fmin, h.fmax_for_loss)",
                            "Call"
                        ],
                        [
                            "mel_spectrogram(y_g_hat.squeeze(1), h.n_fft, h.num_mels, h.sampling_rate, h.hop_size, h.win_size, h.fmin, h.fmax_for_loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "load_55": {
                "variable": {
                    "value": "checkpoint_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_45": {
                "module": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}