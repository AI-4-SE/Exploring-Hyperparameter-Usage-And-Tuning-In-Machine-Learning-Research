{
    "core/main.py": {
        "tensorflow": {
            "reduce_sum_40": {
                "variable": {
                    "value": "curr_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_42": {
                "variable": {
                    "value": "keep_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "curr_num + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "uniform_44": {
                "variable": {
                    "value": "rand_select",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "less_48": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rand_select",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=tf.shape(mask), minval=0, maxval=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "keep_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(num_keep, curr_num + 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_49": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(mask, keep)",
                            "Call"
                        ],
                        [
                            "tf.greater(scores_init, 0.9 if self.is_training else 0.8)",
                            "Call"
                        ],
                        [
                            "self.random_keep(mask, self.mini_batch_size[0])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(rand_select, keep_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_57": {
                "variable": {
                    "value": "all_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "pos_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_60": {
                "variable": {
                    "value": "all_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "neg_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logical_or_63": {
                "variable": {
                    "value": "select",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "select_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_keep(all_pos, num_keep_pos)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "select_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_keep(all_neg, num_keep_neg)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "placeholder[sphere_map]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[64, 512, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "placeholder[input_image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[384, 1248, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "placeholder[image_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "placeholder[plane]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "placeholder[velo_to_cam]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "placeholder[cam_to_img]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "placeholder[cam_to_velo]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_97": {
                "variable": {
                    "value": "(xyz, ranges, density)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "placeholder['sphere_map']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "greater_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scores_init",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.9 if self.is_training else 0.8",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_291": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_292": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=(), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "120000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_300": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate_init, global_step, 120000, 0.2, staircase=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_ref_301": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_312": {
                "variable": {
                    "value": "(clipped_grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_grads_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_315": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_320": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(learning_rate_init, global_step, 120000, 0.2, staircase=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_327": {
                "variable": {
                    "value": "saver_image",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in all_vars if 'lidar' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "[var for var in all_vars if 'lidar' not in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_328": {
                "variable": {
                    "value": "saver_lidar",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_lidar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in all_vars if 'lidar' in var.name]",
                            "ListComp"
                        ],
                        [
                            "[var for var in all_vars if 'lidar' in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_ref_405": {
                "variable": {
                    "value": "all_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(mask, keep)",
                            "Call"
                        ],
                        [
                            "tf.greater(scores_init, 0.9 if self.is_training else 0.8)",
                            "Call"
                        ],
                        [
                            "self.random_keep(mask, self.mini_batch_size[0])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "boolean_mask_67": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(mask, keep)",
                            "Call"
                        ],
                        [
                            "tf.greater(scores_init, 0.9 if self.is_training else 0.8)",
                            "Call"
                        ],
                        [
                            "self.random_keep(mask, self.mini_batch_size[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_213": {
                "x": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "full_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "minimum_229": {
                "x": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "full_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_295": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_297": {
                "input_tensor": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(var) for var in tf.trainable_variables()]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_sum(weight_loss) * l2_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_414": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in all_vars if 'lidar' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "[var for var in all_vars if 'lidar' not in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "minimum_420": {
                "variable": {
                    "value": "scores_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.endpoint['class_prob']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.endpoint['full_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(mask, keep)",
                            "Call"
                        ],
                        [
                            "tf.greater(scores_init, 0.9 if self.is_training else 0.8)",
                            "Call"
                        ],
                        [
                            "self.random_keep(mask, self.mini_batch_size[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_317": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_428": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_lidar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in all_vars if 'lidar' in var.name]",
                            "ListComp"
                        ],
                        [
                            "[var for var in all_vars if 'lidar' in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_441": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in all_vars if 'lidar' not in var.name]",
                            "ListComp"
                        ],
                        [
                            "[var for var in all_vars if 'lidar' not in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_443": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list_lidar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in all_vars if 'lidar' in var.name]",
                            "ListComp"
                        ],
                        [
                            "[var for var in all_vars if 'lidar' in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_collection_362": {
                "key": {
                    "value": "debug",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "core/source/anchor_filter.py": {
        "tensorflow": {
            "constant_23": {
                "variable": {
                    "value": "self.x_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "x_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x_grid",
                            "Attribute"
                        ],
                        [
                            "self.x_grid",
                            "Attribute"
                        ],
                        [
                            "self.x_grid",
                            "Attribute"
                        ],
                        [
                            "self.x_grid",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_25": {
                "variable": {
                    "value": "self.z_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "z_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z_grid",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "xyz_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(x_grid, (1, num_xz)), tf.reshape(y_grid, (1, num_xz)) + y_offset, tf.reshape(z_grid, (1, num_xz)), tf.ones(shape=(1, num_xz), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(h, w, l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(dimensions, (-1, 1, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_65": {
                "values": {
                    "value": "[l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-(1 - miu) / sigma) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_73": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros(tf.shape(alpha_r), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "x_rot_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([tf.cos(alpha_r), tf.sin(alpha_r)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "x_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "unrot * x_rot_vect",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "z_rot_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat([-tf.sin(alpha_r), tf.cos(alpha_r)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "z_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "unrot * z_rot_vect",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_90": {
                "variable": {
                    "value": "minus_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.zeros(tf.shape(alpha_r), dtype=tf.float32), 2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-tf.reshape(h, (-1, 1, 1))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "y_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, zeros, zeros, zeros, minus_h, minus_h, minus_h, minus_h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "corners_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_rot, y_rot, z_rot]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "global_corners_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "global_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz + corners",
                            "BinOp"
                        ],
                        [
                            "xyz + corners",
                            "BinOp"
                        ],
                        [
                            "xyz + corners",
                            "BinOp"
                        ],
                        [
                            "xyz + corners",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 3, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clip_by_value_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "xz / (z * image_size[1] + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_118": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "yz / (z * image_size[0] + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_119": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(xz / (z * image_size[1] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "delta_x + tf.squeeze(x_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 0, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "x + tf.reshape(cam_to_velo[:, 0, 3], (1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.divide(alpha, tf.exp(-(x - miu) / sigma) + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_120": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(xz / (z * image_size[1] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "delta_x + tf.squeeze(x_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 0, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "x + tf.reshape(cam_to_velo[:, 0, 3], (1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.divide(alpha, tf.exp(-(x - miu) / sigma) + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_121": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(yz / (z * image_size[0] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_ori, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 1, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "y + tf.reshape(cam_to_velo[:, 1, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_122": {
                "variable": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(yz / (z * image_size[0] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_ori, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 1, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "y + tf.reshape(cam_to_velo[:, 1, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "variable": {
                    "value": "xyz_velo",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "cam_to_velo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cam_to_velo, (1, 4, 4))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "xyz_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(x_grid, (1, num_xz)), tf.reshape(y_grid, (1, num_xz)) + y_offset, tf.reshape(z_grid, (1, num_xz)), tf.ones(shape=(1, num_xz), dtype=tf.float32)], axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_147": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[phi - 0.5, theta - 0.5, phi + 0.5, theta + 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_149": {
                "variable": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.zeros(num_xz)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 64, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "crop_and_resize_153": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([phi - 0.5, theta - 0.5, phi + 0.5, theta + 0.5], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(num_xz), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(bbox[:, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.multiply(bbox[:, 0], 0.0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_158": {
                "variable": {
                    "value": "range_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_velo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(cam_to_velo, xyz_flatten)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_162": {
                "variable": {
                    "value": "range_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=boxes, box_ind=box_indices, crop_size=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "range_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(xyz_crop, axis=3, keepdims=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_crops)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_168": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-range_diff ** 2 / (2 * dr_std ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "anchor_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(x_grid, (1, num_xz)), tf.reshape(y_grid, (1, num_xz)) + y_offset, tf.reshape(z_grid, (1, num_xz)), tf.ones(shape=(1, num_xz), dtype=tf.float32)], axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_199": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(scores_up, scores_down)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scores_ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(xyz_flatten, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_228": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_236": {
                "variable": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.squeeze(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_239": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.squeeze(image), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(image, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "crop_and_resize_241": {
                "variable": {
                    "value": "image_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.squeeze(image), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(image, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, top, right, bottom], axis=1)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(kept_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(global_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(num_xz), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(bbox[:, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.multiply(bbox[:, 0], 0.0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_254": {
                "variable": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_274": {
                "variable": {
                    "value": "image_crops_second",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.squeeze(image), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(image, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bbox_second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.corners_to_bbox(kept_corners_second, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(num_xz), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(bbox[:, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.multiply(bbox[:, 0], 0.0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_314": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "non_max_suppression_321": {
                "variable": {
                    "value": "nms_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, top, right, bottom], axis=1)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(kept_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(global_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "scores": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_prob_image",
                            "Name"
                        ],
                        [
                            "class_prob[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "max_output_size": {
                    "value": "max_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "iou_threshold": {
                    "value": "iou_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_332": {
                "variable": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_335": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "points_centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points - bottom_centers",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "xz",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_local + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ],
                        [
                            "rotation_local_second + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_340": {
                "variable": {
                    "value": "center_to_front_unit_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.cos(rot), -tf.math.sin(rot)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_343": {
                "variable": {
                    "value": "center_to_side_unit_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.sin(rot), tf.math.cos(rot)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_345": {
                "variable": {
                    "value": "proj_front",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xz * center_to_front_unit_vect",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_348": {
                "variable": {
                    "value": "proj_side",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xz * center_to_side_unit_vect",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_351": {
                "variable": {
                    "value": "inside_front",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.abs(proj_front), cube_size[2] * 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_354": {
                "variable": {
                    "value": "inside_side",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.abs(proj_side), cube_size[1] * 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_357": {
                "variable": {
                    "value": "inside_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(y, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_376": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_380": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_384": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_393": {
                "variable": {
                    "value": "(xyz_map, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_394": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, top, right, bottom], axis=1)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(kept_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(global_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(num_xz), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(bbox[:, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.multiply(bbox[:, 0], 0.0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_399": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=boxes, box_ind=box_indices, crop_size=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, crop_size[0] * crop_size[1], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_401": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=boxes, box_ind=box_indices, crop_size=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_427": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_431": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_444": {
                "variable": {
                    "value": "(xyz_map, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_446": {
                "variable": {
                    "value": "xyz_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz_map, normal_map]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_448": {
                "variable": {
                    "value": "xyz_normal_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "xyz_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([xyz_map, normal_map], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, top, right, bottom], axis=1)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(kept_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(global_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(num_xz), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(bbox[:, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.multiply(bbox[:, 0], 0.0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_453": {
                "variable": {
                    "value": "xyz_normal_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_normal_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_normal, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_normal_crop, (-1, crop_size[0] * crop_size[1], 6))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_normal_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, crop_size[0] * crop_size[1], 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_455": {
                "variable": {
                    "value": "xyz_normal_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_normal_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_normal, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_normal_crop, (-1, crop_size[0] * crop_size[1], 6))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_normal_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_462": {
                "variable": {
                    "value": "(_, _, _, nx, ny, nz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz_normal_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_normal, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_normal_crop, (-1, crop_size[0] * crop_size[1], 6))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_normal_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_469": {
                "variable": {
                    "value": "delta_rot_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "delta_rot_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tf.cast(tf.range(delta_rot_num), tf.float32) - (delta_rot_num - 1) / 2) * delta_rot",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(delta_rot_proposals, [1, delta_rot_num, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, delta_rot_num, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_471": {
                "variable": {
                    "value": "rotation_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_local + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ],
                        [
                            "rotation_local_second + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_478": {
                "variable": {
                    "value": "(nx, nz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(nxnz, [-1, 1, 2, crop_size[0] * crop_size[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_482": {
                "variable": {
                    "value": "front",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(tf.cos(rot_prop) * nx - tf.sin(rot_prop) * nz, cos_thres), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_486": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(tf.sin(rot_prop) * nx + tf.cos(rot_prop) * nz, cos_thres), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_490": {
                "variable": {
                    "value": "back",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(-tf.cos(rot_prop) * nx + tf.sin(rot_prop) * nz, cos_thres), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(-tf.sin(rot_prop) * nx - tf.cos(rot_prop) * nz, cos_thres), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_498": {
                "variable": {
                    "value": "max_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat([front, left, back, right], axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_506": {
                "variable": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_507": {
                "variable": {
                    "value": "rotation_aligned",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rot_prop * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_524": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_528": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_532": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_541": {
                "variable": {
                    "value": "(xyz_map, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_542": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, top, right, bottom], axis=1)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(kept_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(global_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.zeros(num_xz), dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(bbox[:, 0], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.multiply(bbox[:, 0], 0.0), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "crop_size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[64",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_547": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=boxes, box_ind=box_indices, crop_size=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, crop_size[0] * crop_size[1], 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_549": {
                "variable": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=boxes, box_ind=box_indices, crop_size=[1, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_and_resize(image=xyz_map, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz_crop, (-1, crop_size[0] * crop_size[1], 3))",
                            "Call"
                        ],
                        [
                            "tf.transpose(xyz_crop, [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_555": {
                "variable": {
                    "value": "front_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside * pj_front",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_557": {
                "variable": {
                    "value": "front_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside * pj_front",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_559": {
                "variable": {
                    "value": "side_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside * pj_side",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_561": {
                "variable": {
                    "value": "side_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inside * pj_side",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_564": {
                "variable": {
                    "value": "delta_front",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(tf.abs(+cube_size[2] / 2 - front_max), tf.abs(-cube_size[2] / 2 - front_min))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cube_size[2] / 2 - front_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-cube_size[2] / 2 - front_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_569": {
                "variable": {
                    "value": "delta_side",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(tf.abs(+cube_size[1] / 2 - side_max), tf.abs(-cube_size[1] / 2 - side_min))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cube_size[1] / 2 - side_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-cube_size[1] / 2 - side_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_576": {
                "variable": {
                    "value": "delta_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "delta_front * tf.math.cos(rotation)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta_side * tf.math.sin(rotation)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_578": {
                "variable": {
                    "value": "delta_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-delta_front * tf.math.sin(rotation)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta_side * tf.math.cos(rotation)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_580": {
                "variable": {
                    "value": "(x_ori, y_ori, z_ori)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(xyz, 2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_584": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_ori",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_585": {
                "variable": {
                    "value": "bottom_centers_aligned",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(x, 1), tf.expand_dims(y, 1), tf.expand_dims(z, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_589": {
                "variable": {
                    "value": "point_cloud_density",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(inside, [1, 2], keepdims=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_size[0] * crop_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_599": {
                "variable": {
                    "value": "cam_to_velo",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_to_velo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cam_to_velo, (1, 4, 4))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_600": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(cam_to_velo[:, 0, :3], (1, 3, 1)) * corners_cam",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_605": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(cam_to_velo[:, 1, :3], (1, 3, 1)) * corners_cam",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_610": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(cam_to_velo[:, 2, :3], (1, 3, 1)) * corners_cam",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_618": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.get_phi(points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_619": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.get_theta(points)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_min_623": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_phi(xyz_velo)",
                            "Call"
                        ],
                        [
                            "tf.reshape(-phi * 400 / 3 + 8, (-1, 1)) / 64",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(self.get_phi(points), tf.shape(z))",
                            "Call"
                        ],
                        [
                            "(-phi * 400 / 3 + 8) / 64",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_624": {
                "variable": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_phi(xyz_velo)",
                            "Call"
                        ],
                        [
                            "tf.reshape(-phi * 400 / 3 + 8, (-1, 1)) / 64",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(self.get_phi(points), tf.shape(z))",
                            "Call"
                        ],
                        [
                            "(-phi * 400 / 3 + 8) / 64",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_min_625": {
                "variable": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_theta(xyz_velo)",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta * 400 + 256, (-1, 1)) / 512",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(self.get_theta(points), tf.shape(z))",
                            "Call"
                        ],
                        [
                            "(theta * 400 + 256) / 512",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_626": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_theta(xyz_velo)",
                            "Call"
                        ],
                        [
                            "tf.reshape(theta * 400 + 256, (-1, 1)) / 512",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(self.get_theta(points), tf.shape(z))",
                            "Call"
                        ],
                        [
                            "(theta * 400 + 256) / 512",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_628": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[top, left, bottom, right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_629": {
                "variable": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(bbox[:, 0], 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_641": {
                "variable": {
                    "value": "(xyz_map, range_density)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "sphere_map",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_643": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_647": {
                "variable": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_655": {
                "variable": {
                    "value": "(xyz_map, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_656": {
                "variable": {
                    "value": "range_density",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "range_density",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(range_density, [1, 64, 512, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 64, 512, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_658": {
                "variable": {
                    "value": "sphere_map_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz_map, range_density]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_665": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(xyz_flatten, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "boolean_mask_674": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_698": {
                "variable": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bottom_centers, 2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(xyz_flatten, [1, 0]), 2)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(xyz, mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_702": {
                "variable": {
                    "value": "mask_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask_prob[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, num_points]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_710": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rotation, (-1, 1, 1))",
                            "Call"
                        ],
                        [
                            "rotation",
                            "Name"
                        ],
                        [
                            "tf.reshape(rot, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_711": {
                "variable": {
                    "value": "rot_bins",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(rot_bins, [1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_714": {
                "x": {
                    "value": "np.abs(rot - rot_bins)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(rot - rot_bins - 2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_718": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.square(distance) / var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_724": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-(1 - miu) / sigma) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.exp(-(x - miu) / sigma) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_753": {
                "variable": {
                    "value": "mask_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.cross_entropy(mask_true, mask_pred)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mask_cross_entropy, [1, 2])",
                            "Call"
                        ],
                        [
                            "mask_cross_entropy * pos_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_757": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cls_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.cross_entropy(pos_mask, class_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_758": {
                "variable": {
                    "value": "rot_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rot_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(utils.cross_entropy(rot_vect_true, rot_vect_pred), axis=1) * pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_759": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mask_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.cross_entropy(mask_true, mask_pred)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(mask_cross_entropy, [1, 2])",
                            "Call"
                        ],
                        [
                            "mask_cross_entropy * pos_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "asin_33": {
                "x": {
                    "value": "sine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[2] / tf.math.sqrt(points[0] ** 2 + points[1] ** 2 + points[2] ** 2)",
                            "BinOp"
                        ],
                        [
                            "points[1] / tf.math.sqrt(points[0] ** 2 + points[1] ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "asin_38": {
                "x": {
                    "value": "sine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[2] / tf.math.sqrt(points[0] ** 2 + points[1] ** 2 + points[2] ** 2)",
                            "BinOp"
                        ],
                        [
                            "points[1] / tf.math.sqrt(points[0] ** 2 + points[1] ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_94": {
                "input": {
                    "value": "corners_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x_rot, y_rot, z_rot], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_124": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[top, left, bottom, right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[left, top, right, bottom]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "x": {
                    "value": "points[0] ** 2 + points[1] ** 2 + points[2] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "x": {
                    "value": "points[0] ** 2 + points[1] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "tensor": {
                    "value": "dimensions",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "shape": {
                    "value": "tf.shape(alpha_r)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_77": {
                "values": {
                    "value": "[tf.cos(alpha_r), tf.sin(alpha_r)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "values": {
                    "value": "[-tf.sin(alpha_r), tf.cos(alpha_r)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "tf.reshape(calib[0, :3], (1, 3, 1)) * global_corners_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "tf.reshape(calib[1, :3], (1, 3, 1)) * global_corners_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "tf.reshape(calib[2, :3], (1, 3, 1)) * global_corners_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "-phi * 400 / 3 + 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "tensor": {
                    "value": "theta * 400 + 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_200": {
                "x": {
                    "value": "scores_up",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "scores_down",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "a": {
                    "value": "xyz_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(x_grid, (1, num_xz)), tf.reshape(y_grid, (1, num_xz)) + y_offset, tf.reshape(z_grid, (1, num_xz)), tf.ones(shape=(1, num_xz), dtype=tf.float32)], axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_238": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.squeeze(image), 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(image, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_257": {
                "y": {
                    "value": "bottom_centers[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "bottom_centers[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_289": {
                "y": {
                    "value": "bottom_centers[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "bottom_centers[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_351": {
                "x": {
                    "value": "tf.abs(proj_front)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cube_size[2] * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_354": {
                "x": {
                    "value": "tf.abs(proj_side)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cube_size[1] * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_357": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(yz / (z * image_size[0] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_ori, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 1, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "y + tf.reshape(cam_to_velo[:, 1, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tile_386": {
                "input": {
                    "value": "tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 64, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_437": {
                "input": {
                    "value": "tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 64, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_474": {
                "values": {
                    "value": "[nx, nz]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_479": {
                "tensor": {
                    "value": "nxnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([nx, nz], axis=1) * inside",
                            "BinOp"
                        ],
                        [
                            "nxnz / (1e-06 + tf.norm(nxnz, axis=1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 2, crop_size[0] * crop_size[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_482": {
                "x": {
                    "value": "tf.greater(tf.cos(rot_prop) * nx - tf.sin(rot_prop) * nz, cos_thres)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_486": {
                "x": {
                    "value": "tf.greater(tf.sin(rot_prop) * nx + tf.cos(rot_prop) * nz, cos_thres)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_490": {
                "x": {
                    "value": "tf.greater(-tf.cos(rot_prop) * nx + tf.sin(rot_prop) * nz, cos_thres)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_494": {
                "x": {
                    "value": "tf.greater(-tf.sin(rot_prop) * nx - tf.cos(rot_prop) * nz, cos_thres)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_498": {
                "values": {
                    "value": "[front, left, back, right]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_506": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_count / (1e-06 + tf.reduce_sum(max_count, axis=1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(-tf.square(distance) / var)",
                            "Call"
                        ],
                        [
                            "prob / tf.reduce_sum(prob, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_534": {
                "input": {
                    "value": "tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 64, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_564": {
                "x": {
                    "value": "tf.abs(+cube_size[2] / 2 - front_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(-cube_size[2] / 2 - front_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_569": {
                "x": {
                    "value": "tf.abs(+cube_size[1] / 2 - side_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(-cube_size[1] / 2 - side_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_582": {
                "input": {
                    "value": "x_ori",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_583": {
                "input": {
                    "value": "z_ori",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_590": {
                "input_tensor": {
                    "value": "inside",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_603": {
                "tensor": {
                    "value": "cam_to_velo[:, 0, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_608": {
                "tensor": {
                    "value": "cam_to_velo[:, 1, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_613": {
                "tensor": {
                    "value": "cam_to_velo[:, 2, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_615": {
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(xz / (z * image_size[1] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "delta_x + tf.squeeze(x_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 0, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "x + tf.reshape(cam_to_velo[:, 0, 3], (1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.divide(alpha, tf.exp(-(x - miu) / sigma) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_616": {
                "structure": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(yz / (z * image_size[0] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_ori, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 1, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "y + tf.reshape(cam_to_velo[:, 1, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_617": {
                "structure": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(calib[2, :3], (1, 3, 1)) * global_corners_expand, axis=1) + calib[2, 3]",
                            "BinOp"
                        ],
                        [
                            "delta_z + tf.squeeze(z_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 2, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "z + tf.reshape(cam_to_velo[:, 2, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_618": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(calib[2, :3], (1, 3, 1)) * global_corners_expand, axis=1) + calib[2, 3]",
                            "BinOp"
                        ],
                        [
                            "delta_z + tf.squeeze(z_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 2, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "z + tf.reshape(cam_to_velo[:, 2, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_619": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(calib[2, :3], (1, 3, 1)) * global_corners_expand, axis=1) + calib[2, 3]",
                            "BinOp"
                        ],
                        [
                            "delta_z + tf.squeeze(z_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 2, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "z + tf.reshape(cam_to_velo[:, 2, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_629": {
                "x": {
                    "value": "bbox[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stop_gradient_630": {
                "input": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([left, top, right, bottom], axis=1)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(kept_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "self.corners_to_bbox(global_corners, cam_to_img, image_size, tf_order=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([top, left, bottom, right], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_649": {
                "input": {
                    "value": "tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 64, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_666": {
                "a": {
                    "value": "xyz_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(x_grid, (1, num_xz)), tf.reshape(y_grid, (1, num_xz)) + y_offset, tf.reshape(z_grid, (1, num_xz)), tf.ones(shape=(1, num_xz), dtype=tf.float32)], axis=0)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset)",
                            "Call"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ],
                        [
                            "self.get_anchor_centers(plane, y_offset=0.0)[:3]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_716": {
                "x": {
                    "value": "rot - rot_bins + 2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_719": {
                "input_tensor": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_count / (1e-06 + tf.reduce_sum(max_count, axis=1, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.exp(-tf.square(distance) / var)",
                            "Call"
                        ],
                        [
                            "prob / tf.reduce_sum(prob, axis=1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_723": {
                "x": {
                    "value": "-(1 - miu) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_741": {
                "input_tensor": {
                    "value": "utils.cross_entropy(rot_vect_true, rot_vect_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_746": {
                "input_tensor": {
                    "value": "tf.abs(rot_pred - rot_true) * pos_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "tensor": {
                    "value": "x_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.x_grid",
                            "Attribute"
                        ],
                        [
                            "self.x_grid",
                            "Attribute"
                        ],
                        [
                            "self.x_grid",
                            "Attribute"
                        ],
                        [
                            "self.x_grid",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, num_xz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "z_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.z_grid",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, num_xz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_54": {
                "shape": {
                    "value": "(1, num_xz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_68": {
                "values": {
                    "value": "[w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(alpha, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_90": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_222": {
                "value": {
                    "value": "np.reshape(cube_size, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_246": {
                "input_tensor": {
                    "value": "image_crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=image, boxes=bbox, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "image_crops / (tf.reduce_max(image_crops, axis=[1, 2], keepdims=True) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_255": {
                "value": {
                    "value": "np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_261": {
                "value": {
                    "value": "np.reshape(cube_size_second, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_279": {
                "input_tensor": {
                    "value": "image_crops_second",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=image, boxes=bbox_second, box_ind=box_indices, crop_size=crop_size)",
                            "Call"
                        ],
                        [
                            "image_crops_second / (tf.reduce_max(image_crops_second, axis=[1, 2], keepdims=True) + 1e-06)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_287": {
                "value": {
                    "value": "np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_310": {
                "value": {
                    "value": "np.reshape(cube_size, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_340": {
                "x": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rotation, (-1, 1, 1))",
                            "Call"
                        ],
                        [
                            "rotation",
                            "Name"
                        ],
                        [
                            "tf.reshape(rot, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_343": {
                "x": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rotation, (-1, 1, 1))",
                            "Call"
                        ],
                        [
                            "rotation",
                            "Name"
                        ],
                        [
                            "tf.reshape(rot, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_344": {
                "x": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rotation, (-1, 1, 1))",
                            "Call"
                        ],
                        [
                            "rotation",
                            "Name"
                        ],
                        [
                            "tf.reshape(rot, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_351": {
                "x": {
                    "value": "proj_front",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(xz * center_to_front_unit_vect, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_354": {
                "x": {
                    "value": "proj_side",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(xz * center_to_side_unit_vect, axis=1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_372": {
                "value": {
                    "value": "np.reshape(cube_size, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_380": {
                "tensor": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 64, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_382": {
                "shape": {
                    "value": "(1, 64, 512, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "tensor": {
                    "value": "tf.transpose(velo_to_cam, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_423": {
                "value": {
                    "value": "np.reshape(cube_size, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "tensor": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 64, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_433": {
                "shape": {
                    "value": "(1, 64, 512, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_438": {
                "tensor": {
                    "value": "tf.transpose(velo_to_cam, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_466": {
                "x": {
                    "value": "tf.range(delta_rot_num)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_475": {
                "tensor": {
                    "value": "nxnz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([nx, nz], axis=1) * inside",
                            "BinOp"
                        ],
                        [
                            "nxnz / (1e-06 + tf.norm(nxnz, axis=1, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "greater_482": {
                "x": {
                    "value": "tf.cos(rot_prop) * nx - tf.sin(rot_prop) * nz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_486": {
                "x": {
                    "value": "tf.sin(rot_prop) * nx + tf.cos(rot_prop) * nz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_490": {
                "x": {
                    "value": "-tf.cos(rot_prop) * nx + tf.sin(rot_prop) * nz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_494": {
                "x": {
                    "value": "-tf.sin(rot_prop) * nx - tf.cos(rot_prop) * nz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "cos_thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_502": {
                "input_tensor": {
                    "value": "max_count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.concat([front, left, back, right], axis=2), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_520": {
                "value": {
                    "value": "np.reshape(cube_size, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_528": {
                "tensor": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 64, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_530": {
                "shape": {
                    "value": "(1, 64, 512, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_535": {
                "tensor": {
                    "value": "tf.transpose(velo_to_cam, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_565": {
                "x": {
                    "value": "+cube_size[2] / 2 - front_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_566": {
                "x": {
                    "value": "-cube_size[2] / 2 - front_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_570": {
                "x": {
                    "value": "+cube_size[1] / 2 - side_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_571": {
                "x": {
                    "value": "-cube_size[1] / 2 - side_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_576": {
                "x": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_local + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ],
                        [
                            "rotation_local_second + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_577": {
                "x": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_local + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ],
                        [
                            "rotation_local_second + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_578": {
                "x": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_local + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ],
                        [
                            "rotation_local_second + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_579": {
                "x": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_local + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ],
                        [
                            "rotation_local_second + tf.constant(np.pi / 2, dtype=tf.float32) - tf.atan2(bottom_centers[:, 2], bottom_centers[:, 0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_585": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(xz / (z * image_size[1] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "delta_x + tf.squeeze(x_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 0, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "x + tf.reshape(cam_to_velo[:, 0, 3], (1, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.divide(alpha, tf.exp(-(x - miu) / sigma) + 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_586": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(yz / (z * image_size[0] + 1e-05), 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_ori, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 1, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "y + tf.reshape(cam_to_velo[:, 1, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_587": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reshape(calib[2, :3], (1, 3, 1)) * global_corners_expand, axis=1) + calib[2, 3]",
                            "BinOp"
                        ],
                        [
                            "delta_z + tf.squeeze(z_ori, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(cam_to_velo[:, 2, :3], (1, 3, 1)) * corners_cam, axis=1)",
                            "Call"
                        ],
                        [
                            "z + tf.reshape(cam_to_velo[:, 2, 3], (1, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_600": {
                "tensor": {
                    "value": "cam_to_velo[:, 0, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_605": {
                "tensor": {
                    "value": "cam_to_velo[:, 1, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_610": {
                "tensor": {
                    "value": "cam_to_velo[:, 2, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_643": {
                "tensor": {
                    "value": "xyz_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(xyz_map, (1, 64, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reshape(xyz_map, (1, 64, 512, 3)), tf.ones(shape=(1, 64, 512, 1), dtype=tf.float32)], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(xyz_map, tf.tile(tf.reshape(tf.transpose(velo_to_cam, [1, 0]), (1, 1, 4, 4)), [1, 64, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 64, 512, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_645": {
                "shape": {
                    "value": "(1, 64, 512, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_650": {
                "tensor": {
                    "value": "tf.transpose(velo_to_cam, [1, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_668": {
                "value": {
                    "value": "np.reshape(cube_size, [1, 3]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_672": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_683": {
                "value": {
                    "value": "np.reshape(cube_size_second, [1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_715": {
                "x": {
                    "value": "rot - rot_bins - 2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_724": {
                "x": {
                    "value": "-(x - miu) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_748": {
                "input_tensor": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rectify_scores(class_true)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "y_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(a * x_grid + c * z_grid + d) / b",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, num_xz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_77": {
                "x": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(alpha, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_78": {
                "x": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(alpha, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_85": {
                "x": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(alpha, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "calib[0, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "calib[1, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "tensor": {
                    "value": "calib[2, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sin_341": {
                "x": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(rotation, (-1, 1, 1))",
                            "Call"
                        ],
                        [
                            "rotation",
                            "Name"
                        ],
                        [
                            "tf.reshape(rot, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_388": {
                "a": {
                    "value": "velo_to_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_439": {
                "a": {
                    "value": "velo_to_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_536": {
                "a": {
                    "value": "velo_to_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_651": {
                "a": {
                    "value": "velo_to_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_718": {
                "x": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.minimum(np.abs(rot - rot_bins), tf.abs(rot - rot_bins - 2 * np.pi)), tf.abs(rot - rot_bins + 2 * np.pi))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_746": {
                "x": {
                    "value": "rot_pred - rot_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_84": {
                "x": {
                    "value": "alpha_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(alpha, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_483": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_483": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_487": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_487": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_491": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_495": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_491": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_495": {
                "x": {
                    "value": "rot_prop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_r + delta_rot_proposals",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(rot_prop, tf.shape(prob))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "core/source/model.py": {
        "tensorflow": {
            "moments_19": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "atan2_70": {
                "variable": {
                    "value": "rot_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(rot_sin, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(rot_cos, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "self.class_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layer(x, 512, name='fc7_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_c, 256, name='fc7_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_c, 2, linear=True, name='fc7_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "self.full_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layer(x, 512, name='fc8_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_f, 256, name='fc8_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_f, 2, linear=True, name='fc8_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "rot_sin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sin(rot_bins).reshape([1, -1]) * prob",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_71": {
                "input_tensor": {
                    "value": "rot_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(rot_bins).reshape([1, -1]) * prob",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "backbone",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "core/source/model_lidar.py": {
        "tensorflow": {
            "moments_28": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_29": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[C]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[C]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, G, C // G, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_49": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[C])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[C])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(1.0, shape=[C]), dtype=tf.float32, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.constant(0.0, shape=[C]), dtype=tf.float32, name='beta')",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, [1, C, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, C, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, C, H, W]) * gamma + beta",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "atan2_85": {
                "variable": {
                    "value": "rot_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(rot_sin, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(rot_cos, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride[0], stride[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sphere_map_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 64, 512, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_123": {
                "variable": {
                    "value": "(xyz_map_cam, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_128": {
                "variable": {
                    "value": "xyz_crops",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "xyz_map_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "roi_point_cloud_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bottom_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "conv4_out_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "conv4_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                }
            },
            "crop_and_resize_157": {
                "variable": {
                    "value": "roi_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "backbone_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_pool(x, [2, 2], 'pool5')",
                            "Call"
                        ]
                    ]
                },
                "boxes": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "box_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "roi_feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_162": {
                "variable": {
                    "value": "roi_feat_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "roi_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.crop_and_resize(image=backbone_out, boxes=bbox, box_ind=box_indices, crop_size=roi_feature_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_164": {
                "variable": {
                    "value": "feat_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv4_out_flat, roi_feat_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "variable": {
                    "value": "rot_vect",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fc_layer(rot_fc2, len(rot_bins), name='rot_vect', linear=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fc_layer(class_fc2, 2, name='class_prob', linear=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_200": {
                "variable": {
                    "value": "concat_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upsample_conv4, conv3_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_207": {
                "variable": {
                    "value": "concat_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upsample_conv3, conv2_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_214": {
                "variable": {
                    "value": "concat_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upsample_conv2, conv1_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "mask_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "reduce_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_layer(concat_conv1, 2, 3, name='conv1_reduce', linear=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_50": {
                "x": {
                    "value": "var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_51": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_53": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "rot_sin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sin(rot_bins).reshape([1, -1]) * prob",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "rot_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(rot_bins).reshape([1, -1]) * prob",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "backbone_lidar",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "class_rot_lidar",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "mask_lidar",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_38": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.group_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, G, C // G, H, W])",
                            "Call"
                        ],
                        [
                            "(x - mean) / tf.sqrt(var + eps)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, [1, 2, 2, 1], padding='SAME', strides=[1, stride[0], stride[1], 1], name=name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sphere_map_cam, [1, 64, 512, 5])",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [1, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(xyz_crops, 32, 3, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, 3, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, 3, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, [2, 2], 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, 3, name='conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, C, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_124": {
                "tensor": {
                    "value": "sphere_map_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 64, 512, 5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "core/utils.py": {
        "tensorflow": {
            "pad_12": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "tf.constant([[0, 0], [1, 1], [1, 1], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_34": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.is_nan(normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(normal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(normals), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(normal, 3)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(normal), tf.zeros_like(normal), normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_40": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "smooth_l1_signs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.abs(diffs), 1.0 / sigma2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_24": {
                "variable": {
                    "value": "pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "pos[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "p11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "p[:, 1:-1, 1:-1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_29": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack(normals)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_32": {
                "variable": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(normals), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(normal, 3)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(normal), tf.zeros_like(normal), normal)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_12": {
                "value": {
                    "value": "[[0, 0], [1, 1], [1, 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_nan_34": {
                "x": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(normals), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(normal, 3)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(normal), tf.zeros_like(normal), normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_35": {
                "input": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.stack(normals), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(normal, 3)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.is_nan(normal), tf.zeros_like(normal), normal)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_42": {
                "x": {
                    "value": "tf.abs(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_45": {
                "x": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_46": {
                "x": {
                    "value": "smooth_l1_option1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(diffs, diffs) * 0.5 * sigma2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "smooth_l1_signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.abs(diffs), 1.0 / sigma2), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_47": {
                "x": {
                    "value": "smooth_l1_option2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(diffs) - 0.5 / sigma2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - smooth_l1_signs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_28": {
                "a": {
                    "value": "pos[i % nn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "pos[(i - 1 + nn) % nn]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_29": {
                "values": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "abs_42": {
                "x": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_44": {
                "x": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_56": {
                "x": {
                    "value": "pred + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_57": {
                "x": {
                    "value": "1 - pred + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "teacher/model.py": {
        "tensorflow": {
            "placeholder_10": {
                "variable": {
                    "value": "self.input_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_shape[0], input_shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "moments_24": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bta', dimension, tf.float32, initializer=tf.constant_initializer(0.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gma', dimension, tf.float32, initializer=tf.constant_initializer(1.0, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "atan2_75": {
                "variable": {
                    "value": "rot_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(rot_sin, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(rot_cos, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(x, mean, variance, beta, gamma, eps)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, out_channels, kernel_size=kernel_size, dilation_rate=dilation, padding='same')",
                            "Call"
                        ],
                        [
                            "self.batch_norm_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(x, out_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.max_pool2d(x, kernel_size=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(inputs, 32, name='conv1_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 32, name='conv1_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 64, name='conv2_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 128, name='conv3_2')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool3')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 256, name='conv4_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool4')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_1')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_2')",
                            "Call"
                        ],
                        [
                            "self.conv_layer(x, 512, name='conv5_3')",
                            "Call"
                        ],
                        [
                            "self.max_pool(x, 'pool5')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 512, name='fc6_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, 256, name='fc6_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x, len(rot_bins), linear=True, name='fc6_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "self.class_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layer(x, 512, name='fc7_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_c, 256, name='fc7_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_c, 2, linear=True, name='fc7_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "self.full_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_layer(x, 512, name='fc8_1')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_f, 256, name='fc8_2')",
                            "Call"
                        ],
                        [
                            "self.fc_layer(x_f, 2, linear=True, name='fc8_3')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "rot_sin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sin(rot_bins).reshape([1, -1]) * prob",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_76": {
                "input_tensor": {
                    "value": "rot_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.cos(rot_bins).reshape([1, -1]) * prob",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "backbone",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_116": {
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_29": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_34": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "teacher/trainer.py": {
        "tensorflow": {
            "placeholder_139": {
                "variable": {
                    "value": "learning_rate_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "tf_ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, len(self.rot_bins)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "tf_cls_ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "tf_full_ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_147": {
                "variable": {
                    "value": "(_, tf_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf_cls_ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[batch_size, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "tf_mask_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "tf_rot_ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_153": {
                "variable": {
                    "value": "cross_ent_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "utils.cross_entropy(self.rotation_prob, tf_ground_truth)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "utils.cross_entropy(self.class_prob, tf_cls_ground_truth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_169": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_171": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "tf_mask_r * tf.abs(self.rotation - tf_rot_ground_truth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "tf_mask_r * cross_ent_rot",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_159": {
                "input_tensor": {
                    "value": "tf_mask * utils.cross_entropy(self.full_prob, tf_full_ground_truth)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_162": {
                "input_tensor": {
                    "value": "tf_full_ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=[batch_size, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "cross_ent_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf_mask * utils.cross_entropy(self.full_prob, tf_full_ground_truth), axis=1) * tf.reduce_sum(tf_full_ground_truth, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l2_loss_166": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(var) for var in tf.trainable_variables()]",
                            "ListComp"
                        ],
                        [
                            "tf.reduce_sum(weight_loss) * decay",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_176": {
                "variable": {
                    "value": "saver_part",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var for var in tf.trainable_variables() if 'beta' not in var.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "tf_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "tf_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_164": {
                "input_tensor": {
                    "value": "tf_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_151": {
                "x": {
                    "value": "self.rotation - tf_rot_ground_truth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "teacher/utils.py": {
        "tensorflow": {
            "subtract_5": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_6": {
                "variable": {
                    "value": "smooth_l1_signs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.abs(diffs), 1.0 / sigma2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_6": {
                "x": {
                    "value": "tf.abs(diffs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_9": {
                "x": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_10": {
                "x": {
                    "value": "smooth_l1_option1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(diffs, diffs) * 0.5 * sigma2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "smooth_l1_signs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.abs(diffs), 1.0 / sigma2), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_11": {
                "x": {
                    "value": "smooth_l1_option2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(diffs) - 0.5 / sigma2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - smooth_l1_signs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_6": {
                "x": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_8": {
                "x": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(deltas, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_17": {
                "x": {
                    "value": "1 - prob + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}