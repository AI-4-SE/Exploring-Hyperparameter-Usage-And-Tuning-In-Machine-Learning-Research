{
    "gvnr/evaluation.py": {
        "sklearn": {
            "ShuffleSplit_28": {
                "variable": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "test_size": {
                    "value": "1 - train_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneVsRestClassifier_85": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(C=C, tol=tol, solver='liblinear', max_iter=1000, multi_class='ovr')",
                    "type": "Call",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_32": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "LogisticRegression(C=C, tol=tol, solver='liblinear', max_iter=1000, multi_class='ovr')",
                    "type": "Call",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_45": {
                "variable": {
                    "value": "mi",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(y.shape, dtype=np.int)",
                            "Call"
                        ],
                        [
                            "construct_indicator(y_score, y_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_46": {
                "variable": {
                    "value": "ma",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(y.shape, dtype=np.int)",
                            "Call"
                        ],
                        [
                            "construct_indicator(y_score, y_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_86": {
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000.0",
                            "Constant"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "ovr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_98": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(test_data)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_99": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clf.predict(test_data)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_33": {
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000.0",
                            "Constant"
                        ]
                    ]
                },
                "tol": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "ovr",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "gvnr/models/deepwalk.py": {
        "sklearn": {
            "normalize_285": {
                "X": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((adjacency_matrix.shape[0], 160))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gvnr/models/tadw.py": {
        "sklearn": {
            "normalize_82": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.dot(T, self.H.T)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gvnr/models/wrappers.py": {
        "sklearn": {
            "normalize_57": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.tadw.get_embeddings('I')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.tadw.get_embeddings('J')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "tadw_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.hstack((I, J))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "deepwalk_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "deepwalk_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gvnr.models.deepwalk.run(adjacency_matrix)",
                            "Call"
                        ],
                        [
                            "normalize(deepwalk_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_91": {
                "variable": {
                    "value": "svd_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.sparse.csr_matrix(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_101": {
                "variable": {
                    "value": "netmf_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "netmf_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gvnr.models.netmf.netmf_large(adjacency_matrix)",
                            "Call"
                        ],
                        [
                            "normalize(netmf_vectors)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_102": {
                "variable": {
                    "value": "svd_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.sparse.csr_matrix(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_139": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='I') + model.get_embeddings(embedding='J')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_179": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='I') + model.get_embeddings(embedding='J')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_219": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='I') + model.get_embeddings(embedding='J')",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_260": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='I')",
                    "type": "Call",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_261": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='J')",
                    "type": "Call",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_262": {
                "variable": {
                    "value": "IJ",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.hstack([I, J])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_47": {
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.sparse.csr_matrix(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_92": {
                "X": {
                    "value": "np.hstack((deepwalk_vectors, svd_vectors))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_103": {
                "X": {
                    "value": "np.hstack((netmf_vectors, svd_vectors))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gvnr/preprocessing/random_walker.py": {
        "sklearn": {}
    },
    "scripts/example.py": {
        "sklearn": {
            "normalize_89": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='I')",
                    "type": "Call",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "model.get_embeddings(embedding='J')",
                    "type": "Call",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_91": {
                "variable": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.hstack([I, J])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_evaluation.py": {
        "sklearn": {
            "normalize_25": {
                "X": {
                    "value": "svd_vectors",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "gvnr/models/glove.py": {
        "tensorflow": {
            "placeholder_62": {
                "variable": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.vectorI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_67": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_68": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.indexJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexJ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputJ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "self.JB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_75": {
                "variable": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_76": {
                "variable": {
                    "value": "self.bj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.JB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Xij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_80": {
                "variable": {
                    "value": "wiwjProduct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.wi, self.wj)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_81": {
                "variable": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_83": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n([wiwjProduct, self.bi, self.bj, tf.negative(logXij)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_84": {
                "variable": {
                    "value": "wFactor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.pow(tf.div(tf.exp(self.Xij), 10), 0.75)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(wFactor, dist)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learnRate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_90": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_156": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_158": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_80": {
                "x": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_83": {
                "inputs": {
                    "value": "[wiwjProduct, self.bi, self.bj, tf.negative(logXij)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_84": {
                "x": {
                    "value": "tf.div(tf.exp(self.Xij), 10)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_85": {
                "x": {
                    "value": "wFactor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(1.0, tf.pow(tf.div(tf.exp(self.Xij), 10), 0.75))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add_n([wiwjProduct, self.bi, self.bj, tf.negative(logXij)]))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_166": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_84": {
                "x": {
                    "value": "tf.exp(self.Xij)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "negative_83": {
                "x": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(self.Xij)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_84": {
                "x": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gvnr/models/gvnr.py": {
        "tensorflow": {
            "placeholder_59": {
                "variable": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.indexJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexJ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "self.JB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_70": {
                "variable": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_71": {
                "variable": {
                    "value": "self.bj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.JB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bj",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Xij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "variable": {
                    "value": "wiwjProduct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.wi, self.wj)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_76": {
                "variable": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "c + self.Xij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_77": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n([wiwjProduct, self.bi, self.bj, tf.negative(logXij)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_78": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add_n([wiwjProduct, self.bi, self.bj, tf.negative(logXij)]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learnRate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_83": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_167": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_80": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_169": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_75": {
                "x": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_77": {
                "inputs": {
                    "value": "[wiwjProduct, self.bi, self.bj, tf.negative(logXij)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_178": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "negative_77": {
                "x": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(c + self.Xij)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gvnr/models/gvnrt.py": {
        "tensorflow": {
            "placeholder_59": {
                "variable": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "indexI",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.i_index_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "IB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_63": {
                "variable": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "wi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_64": {
                "variable": {
                    "value": "self.bi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.IB",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.indexI",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bi",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_placeholder_66": {
                "variable": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "inputJ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sparse_reduce_sum_77": {
                "variable": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "self.vectorJ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "divide_78": {
                "variable": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "lookup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(self.vectorJ, self.JW, adjoint_a=False, adjoint_b=False, name='wj')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sums",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse_reduce_sum(self.vectorJ, 1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "self.M.sum(axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.Xij",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "Xij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "wiwjProduct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(self.wi, self.wj)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_83": {
                "variable": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 + self.Xij",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_85": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n([wiwjProduct, self.bi, tf.negative(logXij)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.add_n([wiwjProduct, self.bi, tf.negative(logXij)]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "learnRate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_92": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learnRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_217": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.j_vector_size, self.embedding_size], -self.init_range, self.init_range)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "self.JW",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "pretrained_word_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "JW",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensorValue_167": {
                "variable": {
                    "value": "Jvectors",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.nonzero()",
                            "Call"
                        ],
                        [
                            "np.array([[l, v] for (l, k) in enumerate(cols[ind]) for (m, v) in enumerate(sparse_indices[k])], dtype=np.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([v for (i, k) in enumerate(cols[ind]) for v in sparse_vectors[k]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "dense_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([N, M_dim], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_219": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multiply_82": {
                "x": {
                    "value": "self.wi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.wj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_85": {
                "inputs": {
                    "value": "[wiwjProduct, self.bi, tf.negative(logXij)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_229": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "negative_85": {
                "x": {
                    "value": "logXij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(1 + self.Xij)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}