{
    "shutils.py": {
        "sklearn": {
            "ParameterGrid_10": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "train_test_split_228": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.load(file)",
                    "type": "Call",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_254": {
                "variable": {
                    "value": "(a, _, b, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "trainset.train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trainset.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_263": {
                "variable": {
                    "value": "(a, _, b, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "trainset.train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trainset.train_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_272": {
                "variable": {
                    "value": "(a, _, b, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "trainset.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trainset.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_281": {
                "variable": {
                    "value": "(idxs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(len(trainset))",
                    "type": "Call",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "tonp(trainset.train_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_298": {
                "variable": {
                    "value": "(idxs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(len(trainset))",
                    "type": "Call",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "tonp(trainset.train_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_317": {
                "variable": {
                    "value": "(train_images, _, train_labels, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(data_root, 'four-shapes/dataset/train_labels.npy'))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Normal_92": {
                "variable": {
                    "value": "z_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([0]).to(vae.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([1]).to(vae.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_160": {
                "variable": {
                    "value": "z_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([0]).to(vae.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([1]).to(vae.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_328": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=data_root, train=True, download=True, transform=transform_train if augmentation else transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root=data_root, train=True, download=True, transform=transform_train if augmentation else transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split='train', download=True, transform=transform_train if augmentation else transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root=data_root, train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "CIFAR(root=data_root, train=True, download=True, transform=transform_train if augmentation else transform_test, classes=CIFAR5_CLASSES, random_labeling=False)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root=os.path.join(data_root, 'not-mnist'), train=True, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "CIFAR(root=data_root, train=True, download=True, transform=transform_train if augmentation else transform_test, classes=CIFAR5_CLASSES)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(train_images, train_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_330": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=data_root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root=data_root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.SVHN(root=data_root, split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root=data_root, train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "CIFAR(root=data_root, train=False, download=True, transform=transform_test, classes=CIFAR5_CLASSES, random_labeling=False)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root=os.path.join(data_root, 'not-mnist'), train=False, download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "CIFAR(root=data_root, train=False, download=True, transform=transform_test, classes=CIFAR5_CLASSES)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(test_images, test_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_355": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(file)",
                            "Call"
                        ],
                        [
                            "ConvDataset(data=data)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_438": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(np.random.uniform(0, 1, size=(16, k2)) < 0.05).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_439": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(k2).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(k2).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m.weight.view((-1, 3, 3)).detach() for m in net.modules() if isinstance(m, nn.Conv2d)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randn_484": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[0] * shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "vae.encoder.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_508": {
                "variable": {
                    "value": "w_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log1p_54": {
                "input": {
                    "value": "torch.exp(-m.w_alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_146": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean.view((-1, K * K))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale.view((-1, K * K))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_172": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_178": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_180": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(w_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "logsumexp_184": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.Normal(w_mu, torch.sqrt(w_var)).log_prob(w).sum(dim=(1, 2, 3, 4))",
                            "Call"
                        ],
                        [
                            "logit - np.log(n_tries)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_421": {
                "f": {
                    "value": "os.path.join(path, 'vae_params.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_439": {
                "*size": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(params['kernel_dim'] ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_439": {
                "n": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(params['kernel_dim'] ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_54": {
                "input": {
                    "value": "-m.w_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "torch.abs(mu) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "input": {
                    "value": "k2 + k3 * log_alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_69": {
                "input": {
                    "value": "torch.exp(-log_alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_110": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean.view((-1, 1, K, K))[i:i + BS]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale.view((-1, 1, K, K))[i:i + BS]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Normal_118": {
                "variable": {
                    "value": "logp_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(w_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "logp_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_119": {
                "variable": {
                    "value": "z_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(z_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "kl_z",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_182": {
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_182": {
                "dim": {
                    "value": "(1, 2, 3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_391": {
                "input": {
                    "value": "-(target - mu) ** 2 / var - np.log(2 * np.pi) - torch.log(var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_555": {
                "input": {
                    "value": "net(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_69": {
                "input": {
                    "value": "-log_alpha",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_112": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w ** 2).sum(2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_168": {
                "loc": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(w_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_535": {
                "input": {
                    "value": "net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_119": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_169": {
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(z_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_174": {
                "loc": {
                    "value": "w_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(w_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_391": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_169": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "input": {
                    "value": "w_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_323": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_324": {
                "variable": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_366": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_118": {
                "input": {
                    "value": "w_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_168": {
                "input": {
                    "value": "w_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_174": {
                "input": {
                    "value": "w_var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/bayes.py": {
        "torch": {
            "Normal_25": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([kwrags.get('mean', 0.0)]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([kwrags.get('std', 1.0)]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "*params",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.w_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, kernel_size, kernel_size).fill_(-2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_122": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "alpha * self.mean.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "*params",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_204": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "vae.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.z_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channels, in_channels, self.z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.z_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, self.z_dim).fill_(logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_87": {
                "loc": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.mean(input)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(v + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_91": {
                "loc": {
                    "value": "self.mean.weight + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(self.var.get_weight() + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_124": {
                "loc": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.mean(input)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(v + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_129": {
                "loc": {
                    "value": "self.mean.weight + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(sigma2 + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_136": {
                "input": {
                    "value": "self.w_alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_151": {
                "loc": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.mean(input)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(v + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_154": {
                "loc": {
                    "value": "self.mean.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(self.var.get_weight() + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.softplus(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_169": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_189": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_192": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_219": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.get_weights()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_228": {
                "loc": {
                    "value": "self.z_mu + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(torch.exp(self.z_logvar))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_91": {
                "input": {
                    "value": "self.var.get_weight() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "input": {
                    "value": "self.var.get_weight() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_129": {
                "input": {
                    "value": "sigma2 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_133": {
                "input": {
                    "value": "sigma2 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "input": {
                    "value": "self.var.get_weight() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "input": {
                    "value": "self.var.get_weight() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_165": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_177": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_189": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_209": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_228": {
                "input": {
                    "value": "torch.exp(self.z_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_231": {
                "input": {
                    "value": "torch.exp(self.z_logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_228": {
                "input": {
                    "value": "self.z_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_231": {
                "input": {
                    "value": "self.z_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "input": {
                    "value": "v + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_124": {
                "input": {
                    "value": "v + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_151": {
                "input": {
                    "value": "v + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/alexnet.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/densenet.py": {
        "torch": {
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ],
                        [
                            "expansion * growthRate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growthRate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ],
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inplanes",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(self.inplanes // compressionRate))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_73": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_101": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropRate, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropRate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/resnext.py": {
        "torch": {
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * out_channels // widen_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_reduce.forward(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.forward(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1.forward(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1_3x3.forward(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1.forward(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage_1.forward(x)",
                            "Call"
                        ],
                        [
                            "self.stage_2.forward(x)",
                            "Call"
                        ],
                        [
                            "self.stage_3.forward(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 8, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "input": {
                    "value": "residual + bottleneck",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar/wrn.py": {
        "torch": {
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_32": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifarnet.py": {
        "torch": {
            "Sequential_224": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc1', nn.Linear(512, 512)), ('bn1', nn.BatchNorm1d(512)), ('relu1', nn.LeakyReLU()), ('linear', nn.Linear(512, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_245": {
                "variable": {
                    "value": "w_pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_332": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, d1, 7)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(d1, d2, 5)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('relu3', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_409": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('linear', nn.Linear(d2 * 25, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_445": {
                "variable": {
                    "value": "w_pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.BayesConv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', bayes.BayesConv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', bayes.BayesConv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_261": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0) * w.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "vae.encoder.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_296": {
                "variable": {
                    "value": "vae",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_list[i], self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vae)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_list[i], self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vae)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(path, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_347": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.BayesConv2d(d1, d2, 5)), ('relu2', nn.LeakyReLU()), ('conv3', bayes.BayesConv2d(d2, d2, 5)), ('relu3', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_414": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('do1', nn.Dropout(0.5)), ('fc1', nn.Linear(d2 * 25, 512)), ('relu1', nn.LeakyReLU()), ('do2', nn.Dropout(0.2)), ('linear', nn.Linear(512, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_422": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc1', nn.Linear(d2 * 25, 512)), ('relu1', nn.LeakyReLU()), ('linear', nn.Linear(512, n_classes))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_461": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0) * w.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "vae.encoder.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_496": {
                "variable": {
                    "value": "vae",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "vae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_list[i], self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vae)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_path, device=self.device)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(vae_list[i], self.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(vae)",
                            "Call"
                        ],
                        [
                            "utils.load_vae(path, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.BayesConv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', bayes.BayesConv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.MuTruncAlphaFFGConv2d(3, d1, 7)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.MuTruncAlphaFFGConv2d(d1, d2, 5)), ('relu2', nn.LeakyReLU()), ('conv3', bayes.MuTruncAlphaFFGConv2d(d2, d2, 5)), ('relu3', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.BayesConv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_307": {
                "variable": {
                    "value": "m.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([0.0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([1.0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_377": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.BayesConv2d(d1, d2, 5)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('relu3', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_508": {
                "variable": {
                    "value": "m.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([0.0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([1.0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_226": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filters.reshape(*w.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(3, d1, 7)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(d1, d2, 5)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('relu3', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_475": {
                "variable": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filters.reshape(*w.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.MuTruncAlphaFFGConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.MuTruncAlphaFFGConv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', bayes.MuTruncAlphaFFGConv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', bayes.MuTruncAlphaFFGConv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_335": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_340": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_410": {
                "in_features": {
                    "value": "d2 * 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.MuTruncAlphaFFGConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', bayes.MuTruncAlphaFFGConv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_350": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_415": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_416": {
                "in_features": {
                    "value": "d2 * 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_418": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_419": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_423": {
                "in_features": {
                    "value": "d2 * 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_424": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_425": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_73": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.MuTruncAlphaFFGConv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_365": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_371": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, d1, 7)), ('bn1', nn.BatchNorm2d(d1)), ('relu1', nn.LeakyReLU()), ('maxpool', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(d1, d2, 5)), ('bn2', nn.BatchNorm2d(d2)), ('relu2', nn.LeakyReLU()), ('conv3', nn.Conv2d(d2, d2, 5)), ('bn3', nn.BatchNorm2d(d2)), ('relu3', nn.LeakyReLU()), ('conv4', nn.Conv2d(d2, 512, 5)), ('bn4', nn.BatchNorm2d(512)), ('relu4', nn.LeakyReLU()), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_380": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_385": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_283": {
                "ndarray": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "vae(torch.from_numpy(filters).to(self.device))[1][0]",
                            "Subscript"
                        ],
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "vae(torch.from_numpy(filters).to(self.device))[1][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LeakyReLU_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_395": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "in_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_483": {
                "ndarray": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "vae(torch.from_numpy(filters).to(self.device))[1][0]",
                            "Subscript"
                        ],
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "np.load(filters_list[i])",
                            "Call"
                        ],
                        [
                            "np.concatenate([filters] * 10)",
                            "Call"
                        ],
                        [
                            "filters[np.random.permutation(len(filters))[:N]]",
                            "Subscript"
                        ],
                        [
                            "vae(torch.from_numpy(filters).to(self.device))[1][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm2d_137": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_139": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_142": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_146": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_161": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_183": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_186": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_190": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_194": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_203": {
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_205": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "in_channels": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "num_features": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/lenet.py": {
        "torch": {
            "Linear_88": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim[1] * 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(1, hid_dim[0], 7)), ('relu1', nn.LeakyReLU()), ('mp1', nn.MaxPool2d(2)), ('conv2', bayes.BayesConv2d(hid_dim[0], hid_dim[1], 5)), ('relu2', nn.LeakyReLU()), ('mp2', nn.MaxPool2d(2)), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "w_pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.MuTruncAlphaFFGConv2d(1, hid_dim[0], 7)), ('relu1', nn.LeakyReLU()), ('mp1', nn.MaxPool2d(2)), ('conv2', bayes.MuTruncAlphaFFGConv2d(hid_dim[0], hid_dim[1], 5)), ('relu2', nn.LeakyReLU()), ('mp2', nn.MaxPool2d(2)), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "w.size(0) * w.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "vae.encoder.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', bayes.BayesConv2d(1, hid_dim[0], 7)), ('relu1', nn.LeakyReLU()), ('mp1', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(hid_dim[0], hid_dim[1], 5)), ('relu2', nn.LeakyReLU()), ('mp2', nn.MaxPool2d(2)), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(1, hid_dim[0], 7)), ('relu1', nn.LeakyReLU()), ('mp1', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(hid_dim[0], hid_dim[1], 5)), ('relu2', nn.LeakyReLU()), ('mp2', nn.MaxPool2d(2)), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_152": {
                "variable": {
                    "value": "m.prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([0.0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([1.0]).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(1, hid_dim[0], 7)), ('relu1', nn.LeakyReLU()), ('do1', nn.Dropout(do[0])), ('mp1', nn.MaxPool2d(2)), ('conv2', nn.Conv2d(hid_dim[0], hid_dim[1], 5)), ('relu2', nn.LeakyReLU()), ('do2', nn.Dropout(do[1])), ('mp2', nn.MaxPool2d(2)), ('flatten', Flatten())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filters.reshape(*w.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_38": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_42": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_50": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "hid_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_54": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "hid_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "p": {
                    "value": "do[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "hid_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "do[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MaxPool2d_81": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/vae.py": {
        "torch": {
            "Normal_35": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_mu(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mu(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mu(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mu(x)",
                            "Call"
                        ],
                        [
                            "self.fc_mu(x)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_63": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_var(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softplus_89": {
                "variable": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_sigma(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(z_dim, hidden_dim * 2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_131": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_var(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, hidden_dim, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_148": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_154": {
                "variable": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_var(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(z_dim, hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, hidden_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "variable": {
                    "value": "self.fc_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_207": {
                "variable": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_sigma(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ELU_216": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(z_dim, hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, hidden_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_267": {
                "variable": {
                    "value": "self.fc_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_273": {
                "variable": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_sigma(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_300": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "variable": {
                    "value": "self.fc_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_307": {
                "variable": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_sigma(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ELU_316": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(z_dim, hidden_dim * 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_9": {
                "*size": {
                    "value": "mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_246": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_var(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_346": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_var(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_117": {
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_119": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_121": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_167": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_169": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_225": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_227": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_281": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_283": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_285": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_286": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_287": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_289": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_290": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_291": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_293": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_294": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_295": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_325": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_327": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_329": {
                "in_channels": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.out_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_358": {
                "*size": {
                    "value": "input.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "*self.out_dim",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_368": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_35": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softplus(self.fc_var(x))",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc_var(x))",
                            "Call"
                        ],
                        [
                            "Variable(torch.FloatTensor([0.001]).cuda())",
                            "Call"
                        ],
                        [
                            "float(var)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.var]).cuda()",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc_var(x))",
                            "Call"
                        ],
                        [
                            "float(var)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([self.var]).cuda()",
                            "Call"
                        ],
                        [
                            "F.softplus(self.fc_var(x))",
                            "Call"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ],
                        [
                            "'train'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train-bnn.py": {
        "torch": {
            "is_available_77": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_127": {
                "variable": {
                    "value": "lrscheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(net.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_33": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_160": {
                "variable": {
                    "value": "data_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(net(x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_171": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.max(1)[1] == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "os.path.join(args.resume, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "os.path.join(args.resume, 'opt.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "opt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'opt.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train-net.py": {
        "torch": {
            "is_available_77": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "train_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "net.parameters()",
                            "Call"
                        ],
                        [
                            "list(net.classifier.parameters())",
                            "Call"
                        ],
                        [
                            "train_params + list(m.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_131": {
                "variable": {
                    "value": "lrscheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(train_params, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.milestones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "opt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'opt.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_37": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_161": {
                "variable": {
                    "value": "data_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(net(x), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_178": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.max(1)[1] == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "os.path.join(args.resume, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "os.path.join(args.resume, 'opt.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_164": {
                "input": {
                    "value": "p ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "opt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'opt.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_164": {
                "tensors": {
                    "value": "[torch.sum(p ** 2) for p in net.features.parameters()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_204": {
                "obj": {
                    "value": "opt.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'opt.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train-vae.py": {
        "torch": {
            "Normal_24": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.FloatTensor([0.0]).to(vae.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.FloatTensor([1.0]).to(vae.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_140": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_144": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(vae.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_141": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_35": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "x_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(x_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_36": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "vae.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'vae_params.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'opt_params.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_170": {
                "f": {
                    "value": "args.resume_vae",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "args.resume_opt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_51": {
                "loc": {
                    "value": "x_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(x_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_36": {
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(z_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_35": {
                "input": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_52": {
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(z_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_52": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "input": {
                    "value": "x_var",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vae-stats.py": {
        "torch": {
            "is_available_66": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_105": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "args.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_83": {
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_41": {
                "input": {
                    "value": "z_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "*z_mean.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "*z_mean.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}