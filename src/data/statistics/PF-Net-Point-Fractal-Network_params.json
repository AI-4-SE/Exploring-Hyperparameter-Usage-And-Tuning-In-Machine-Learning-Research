{
    "ModelNet40Loader.py": {
        "torch": {
            "DataLoader_115": {
                "variable": {
                    "value": "dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(1024, train=True, transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.labels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_120": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Test_csv.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='./dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Car', npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_61": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG(opt.num_scales, opt.each_scales_size, opt.point_scales_list, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(opt.infile, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(input_cropped1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_cropped1, Zeros), 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "Zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_cropped1, Zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(opt.infile_real, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(real)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Train_PFNet.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='./dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice=None, npoints=opt.pnum, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='./dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice=None, npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_123": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "point_netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_128": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "point_netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_129": {
                "variable": {
                    "value": "schedulerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(point_netD.parameters(), lr=0.0001, betas=(0.9, 0.999), eps=1e-05, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_130": {
                "variable": {
                    "value": "schedulerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(point_netG.parameters(), lr=0.0001, betas=(0.9, 0.999), eps=1e-05, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG(opt.num_scales, opt.each_scales_size, opt.point_scales_list, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ],
                        [
                            "point_netG.train()",
                            "Call"
                        ],
                        [
                            "point_netG.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_72": {
                "variable": {
                    "value": "point_netD",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netD",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netlocalD(opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netD)",
                            "Call"
                        ],
                        [
                            "point_netD.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_91": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "opt.netD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_191": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_200": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_217": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_222": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(fake, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(fake, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_340": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_341": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_363": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_372": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_386": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(fake, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(fake, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "opt.netD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_308": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': point_netG.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Trained_Model/point_netG + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_311": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': point_netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Trained_Model/point_netD + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_411": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': point_netG.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Checkpoint/point_netG + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_266": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_267": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_287": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_391": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_239": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_300": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_393": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data_utils.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cosval * np.eye(3) + sinval * cross_prod_mat + (1.0 - cosval) * np.outer(u, u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "Rz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ry",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model_PFNet.py": {
        "torch": {
            "randn_204": {
                "variable": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_205": {
                "variable": {
                    "value": "input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_206": {
                "variable": {
                    "value": "input3",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.point_scales, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "self.latentfeature(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.dropout(self.fc3(x))))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.latentfeature(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(Layers, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x_128))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x_256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x_1024",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.conv6(x_512))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_128)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_256)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "x_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_512)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "x_1024",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_1024)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x_1024, x_512, x_256, x_128]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.Convlayers1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Convlayer(point_scales=self.point_scales_list[0]) for i in range(self.each_scales_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.Convlayers2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Convlayer(point_scales=self.point_scales_list[1]) for i in range(self.each_scales_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.Convlayers3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Convlayer(point_scales=self.point_scales_list[2]) for i in range(self.each_scales_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_66": {
                "variable": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(latentfeature))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latentfeature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 2)",
                            "Call"
                        ],
                        [
                            "latentfeature.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(latentfeature)))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(latentfeature, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1920",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(self.each_scales_size)",
                            "Call"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_91": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_92": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_93": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.dropout(self.fc2(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.dropout(self.fc3(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1920",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * 512",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64 * 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_124": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_125": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_126": {
                "variable": {
                    "value": "self.conv1_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.crop_point_num * 3 / 128)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_127": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "x_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_136": {
                "variable": {
                    "value": "x_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "pc2_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2_1(x_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "pc3_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_1(x_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "pc3_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(pc3_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "pc3_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(pc3_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "pc1_xyz_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc1_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pc1_feat.reshape(-1, 64, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_158": {
                "variable": {
                    "value": "pc2_xyz_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc2_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv2_1(pc2_feat)",
                            "Call"
                        ],
                        [
                            "pc2_xyz.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "pc2_xyz.reshape(-1, 64, 2, 3)",
                            "Call"
                        ],
                        [
                            "pc1_xyz_expand + pc2_xyz",
                            "BinOp"
                        ],
                        [
                            "pc2_xyz.reshape(-1, 128, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.crop_point_num, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_175": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_177": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_178": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "448",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_183": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_184": {
                "variable": {
                    "value": "self.bn_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_185": {
                "variable": {
                    "value": "self.bn_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_188": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "x_64",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x_64))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x_128))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "x_64",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_193": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_194": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool(x_256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x_256, x_128, x_64]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_198": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_199": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_3(self.fc3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_103": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "self.latentfeature(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.dropout(self.fc2(x))))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.dropout(self.fc3(x))))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ],
                        [
                            "self.latentfeature(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(Layers, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_2(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_3(self.fc3(x)))",
                            "Call"
                        ],
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MLP and CMLP/Linear_model.py": {
        "torch": {
            "randn_88": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.num_inputs, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_outputs * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.num_inputs, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1920",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_outputs * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x_128))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x_256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x_1024",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x_512))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "x_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool1(x_128)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "x_256",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool1(x_256)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "x_512",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool1(x_512)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "x_1024",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.maxpool1(x_1024)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x_1024, x_512, x_256, x_128]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat(L, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(x, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn_1(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, self.num_outputs, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MLP and CMLP/show_Linear_CD.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Chair', npoints=opt.num_points, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_42": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_50": {
                "variable": {
                    "value": "Autoencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Autoencoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Linear_autoencoder(opt.num_points - opt.crop_point_num, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "CMLP_autoencoder(opt.num_points - opt.crop_point_num, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(Autoencoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_92": {
                "variable": {
                    "value": "input_cropped[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(crop_num_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_95": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "input_cropped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batch_size, 1, opt.num_points - opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_47": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MLP and CMLP/test_csv.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Chair', npoints=opt.num_points, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "Autoencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Autoencoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Linear_autoencoder(opt.num_points - opt.crop_point_num, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "CMLP_autoencoder(opt.num_points - opt.crop_point_num, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(Autoencoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(opt.infile, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(input_cropped1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 0)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "input_cropped1.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MLP and CMLP/train_Linear.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice=None, npoints=opt.num_points, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice=None, npoints=opt.num_points, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_68": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Autoencoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "StepLR_69": {
                "variable": {
                    "value": "schedulerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.Adam(Autoencoder.parameters(), lr=0.0001, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "Autoencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Autoencoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Linear_autoencoder(opt.num_points - opt.crop_point_num, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "CMLP_autoencoder(opt.num_points - opt.crop_point_num, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(Autoencoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "input_cropped",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.num_points - opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "input_cropped.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_97": {
                "variable": {
                    "value": "input_cropped[m, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point[m, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(crop_num_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': Autoencoder.module.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Trained_Recon_Model_Linear/Linear_ae + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_45": {
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MR_CMLP/Test_csv_MRCMLP.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Car', npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG_noFPN(opt.num_scales, opt.each_scales_size, opt.point_scales_list)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(opt.infile, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(input_cropped1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((input_cropped1, Zeros), 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "Zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_cropped1, Zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(opt.infile_real, delimiter=',')",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(real)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(real, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MR_CMLP/Train_MRCMLP.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice=None, npoints=opt.pnum, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice=None, npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "point_netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_129": {
                "variable": {
                    "value": "schedulerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(point_netG.parameters(), lr=0.0001, betas=(0.9, 0.999), eps=1e-05, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG_noFPN(opt.num_scales, opt.each_scales_size, opt.point_scales_list)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ],
                        [
                            "point_netG.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_89": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_158": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_159": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_189": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(batch_size, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "input_cropped1.data.copy_(real_point)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.to(device)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "Variable(input_cropped1, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_203": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_netG(input_cropped)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(fake, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_223": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': point_netG.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Train_MRCMLP/point_netG + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_79": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_208": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ],
                        [
                            "Variable(real_center, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "self-test/MR_CMLP/show_CD_MRCMLP.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='../../dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Table', npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_73": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG_noFPN(opt.num_scales, opt.each_scales_size, opt.point_scales_list)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_120": {
                "variable": {
                    "value": "input_cropped_partial[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(crop_num_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_121": {
                "variable": {
                    "value": "input_cropped_partial",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped_partial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.pnum - opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped_partial, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped_partial.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, 1, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "fake_whole",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_cropped_partial, fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "shapenet_part_loader.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "point_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "point_set[choice, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set)",
                            "Call"
                        ],
                        [
                            "self.pc_normalize(point_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seg[choice]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(seg)",
                            "Call"
                        ],
                        [
                            "np.loadtxt(fn[2]).astype(np.int64) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "show_CD.py": {
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='./dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Airplane', npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG(opt.num_scales, opt.each_scales_size, opt.point_scales_list, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_77": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ],
                        [
                            "real_point.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_104": {
                "variable": {
                    "value": "input_cropped_partial[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(crop_num_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "input_cropped_partial",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped_partial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.pnum - opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped_partial, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped_partial.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, 1, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "fake_whole",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_cropped_partial, fake)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "show_recon.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapenet_part_loader.PartDataset(root='./dataset/shapenetcore_partanno_segmentation_benchmark_v0/', classification=True, class_choice='Airplane', npoints=opt.pnum, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_66": {
                "variable": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "point_netG",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_netG(opt.num_scales, opt.each_scales_size, opt.point_scales_list, opt.crop_point_num)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(point_netG)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(real_point, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.cuda()",
                            "Call"
                        ],
                        [
                            "real_center.cuda()",
                            "Call"
                        ],
                        [
                            "real_center.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cropped1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(opt.batchSize, 1, opt.pnum, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(input_cropped1, 1)",
                            "Call"
                        ],
                        [
                            "input_cropped1.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_68": {
                "f": {
                    "value": "opt.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "input": {
                    "value": "real_center",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(batch_size, 1, opt.crop_point_num, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(real_center, 1)",
                            "Call"
                        ],
                        [
                            "real_center.cuda()",
                            "Call"
                        ],
                        [
                            "real_center.cuda()",
                            "Call"
                        ],
                        [
                            "real_center.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "reshape_18": {
                "variable": {
                    "value": "expanded_array2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(array2, 1).repeat(1, num_point1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, num_features2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(expanded_array1 - expanded_array2) * (expanded_array1 - expanded_array2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(distances, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(distances, (num_point2, num_point1))",
                            "Call"
                        ],
                        [
                            "torch.min(distances, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(distances)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(expanded_array1 - expanded_array2) * (expanded_array1 - expanded_array2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(distances, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(distances, (num_point2, num_point1))",
                            "Call"
                        ],
                        [
                            "torch.min(distances, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(distances)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(num_point2, num_point1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_26": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(expanded_array1 - expanded_array2) * (expanded_array1 - expanded_array2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(distances, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(distances, (num_point2, num_point1))",
                            "Call"
                        ],
                        [
                            "torch.min(distances, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_85": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "centroids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "npoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_106": {
                "variable": {
                    "value": "batch_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_119": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_120": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_102": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_104": {
                "variable": {
                    "value": "farthest",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(B,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xyz - centroid) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "input": {
                    "value": "array2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_25": {
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(expanded_array1 - expanded_array2) * (expanded_array1 - expanded_array2)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(distances, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(distances, (num_point2, num_point1))",
                            "Call"
                        ],
                        [
                            "torch.min(distances, dim=1)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(distances)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_113": {
                "input": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(B, N).to(device) * 10000000000.0",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}