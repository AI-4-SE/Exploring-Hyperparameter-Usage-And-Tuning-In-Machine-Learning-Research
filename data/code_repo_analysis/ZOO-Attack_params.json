{
    "cifar_blackbox.py": {
        "tensorflow": {
            "GPUOptions_221": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_222": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_238": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_74": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DEFINE_integer_309": {
                "name": {
                    "value": "nb_classes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in problem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_310": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of training batches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_311": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_314": {
                "name": {
                    "value": "nb_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_317": {
                "name": {
                    "value": "holdout",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Test set holdout for adversary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_318": {
                "name": {
                    "value": "data_aug",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Nb of substitute data augmentations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_319": {
                "name": {
                    "value": "nb_epochs_s",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training epochs for substitute",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_320": {
                "name": {
                    "value": "lmbda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Lambda from arxiv.org/abs/1602.02697",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_323": {
                "name": {
                    "value": "load_pretrain",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "load pretrained model from sub_saved/cifar-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_324": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "sub_saved",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model saving path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_325": {
                "name": {
                    "value": "filename",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cifar-model",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "cifar model name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_222": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.3)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "l0_attack.py": {
        "tensorflow": {
            "Variable_76": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "canchange",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_81": {
                "variable": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "tlab",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((1, model.num_labels), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "assign_modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "assign_canchange",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "assign_simg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "assign_original",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "assign_timg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "assign_tlab",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.model.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "assign_95": {
                "variable": {
                    "value": "set_modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_modifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_107": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tlab * output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_108": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - tlab) * output - tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(newimg - tf.tanh(timg) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_127": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_129": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier, canchange, simg, original, timg, tlab] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_111": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_114": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_97": {
                "ref": {
                    "value": "canchange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_canchange",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_98": {
                "ref": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_99": {
                "ref": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_100": {
                "ref": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_simg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_101": {
                "ref": {
                    "value": "tlab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros((1, model.num_labels), dtype=np.float32))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "assign_tlab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(np.float32, (1, self.model.num_labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_117": {
                "x": {
                    "value": "newimg - tf.tanh(timg) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_120": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "const * loss1 + loss2",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "[modifier]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_103": {
                "x": {
                    "value": "modifier + simg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_117": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(np.zeros(shape, dtype=np.float32))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "l2_attack.py": {
        "tensorflow": {
            "Variable_73": {
                "variable": {
                    "value": "self.modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, num_labels))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_size, image_size, image_size, num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimg - tf.tanh(self.timg) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "self.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tlab * self.output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_97": {
                "variable": {
                    "value": "self.other",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.tlab) * self.output - self.tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.const * loss1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "adam_beta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "beta2": {
                    "value": "adam_beta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_128": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_138": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[self.modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "x": {
                    "value": "self.modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_93": {
                "x": {
                    "value": "self.newimg - tf.tanh(self.timg) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_103": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(self.other + 1e-30) - tf.log(self.real + 1e-30)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_106": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.other - self.real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_110": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(self.real + 1e-30) - tf.log(self.other + 1e-30)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_113": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.real - self.other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_93": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_103": {
                "x": {
                    "value": "self.real + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "x": {
                    "value": "self.other + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "l2_attack_black.py": {
        "tensorflow": {
            "Variable_236": {
                "variable": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(single_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_237": {
                "variable": {
                    "value": "self.tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(num_labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_238": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "self.assign_timg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "single_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(image_size, image_size, num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "self.assign_tlab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.num_labels",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "self.assign_const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_267": {
                "variable": {
                    "value": "self.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.tlab * self.output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_271": {
                "variable": {
                    "value": "self.other",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - self.tlab) * self.output - self.tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_330": {
                "variable": {
                    "value": "self.grad_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.modifier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "self.modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "self.resize_size_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "self.resize_size_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "self.resize_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, None, None, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "self.modifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, image_size, image_size, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_259": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimg - tf.tanh(self.timg) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_261": {
                "variable": {
                    "value": "self.l2dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.newimg - self.timg)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_278": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(self.other + 1e-30) - tf.log(self.real + 1e-30)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_281": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.other - self.real + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_285": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(self.real + 1e-30) - tf.log(self.other + 1e-30)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_288": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self.real - self.other + self.CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_248": {
                "x": {
                    "value": "self.scaled_modifier + self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_259": {
                "x": {
                    "value": "self.newimg - tf.tanh(self.timg) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_261": {
                "x": {
                    "value": "self.newimg - self.timg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_278": {
                "x": {
                    "value": "self.real + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_285": {
                "x": {
                    "value": "self.other + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_259": {
                "x": {
                    "value": "self.timg",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "li_attack.py": {
        "tensorflow": {
            "Variable_77": {
                "variable": {
                    "value": "modifier",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(shape, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "simg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, model.image_size, model.image_size, model.num_channels)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "tlab",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, model.num_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "variable": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tlab * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_91": {
                "variable": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - tlab) * output - tlab * 10000",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(0.0, tf.abs(newimg - tf.tanh(timg) / 2) - tau)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_109": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_111": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[modifier] + new_vars",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_95": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_98": {
                "variable": {
                    "value": "loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_85": {
                "x": {
                    "value": "modifier + simg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_101": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(newimg - tf.tanh(timg) / 2) - tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_88": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_101": {
                "x": {
                    "value": "newimg - tf.tanh(timg) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_101": {
                "x": {
                    "value": "timg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_blackbox.py": {
        "tensorflow": {
            "GPUOptions_229": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.45",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_230": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_43": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DEFINE_integer_412": {
                "name": {
                    "value": "nb_classes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in problem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_413": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of training batches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_414": {
                "name": {
                    "value": "n_attack",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "No. of images used for attack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_415": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_418": {
                "name": {
                    "value": "nb_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_421": {
                "name": {
                    "value": "holdout",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Test set holdout for adversary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_422": {
                "name": {
                    "value": "data_aug",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Nb of substitute data augmentations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_423": {
                "name": {
                    "value": "nb_epochs_s",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training epochs for substitute",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_424": {
                "name": {
                    "value": "lmbda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Lambda from arxiv.org/abs/1602.02697",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_427": {
                "name": {
                    "value": "attack",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cwl2",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"cwl2 = Carlini & Wagner's L2 attack, fgsm = Fast Gradient Sign Method\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_428": {
                "name": {
                    "value": "targeted",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "use targeted attack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_431": {
                "name": {
                    "value": "load_pretrain",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "load pretrained model from sub_saved/mnist-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_432": {
                "name": {
                    "value": "cached_aug",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "use cached augmentation in sub_saved",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_433": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "sub_saved",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model saving path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_434": {
                "name": {
                    "value": "filename",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "mnist-model",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "cifar model name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_230": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.45)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "retrain.py": {
        "tensorflow": {
            "FastGFile_366": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_image_path(image_lists, label_name, index, image_dir, category)",
                            "Call"
                        ],
                        [
                            "get_image_path(image_lists, label_name, image_index, image_dir, category)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_686": {
                "variable": {
                    "value": "jpeg_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "DistortJPGInput",
                    "type": "str",
                    "possible_values": []
                }
            },
            "decode_jpeg_687": {
                "variable": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "jpeg_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gfile.FastGFile(image_path, 'rb').read()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string, name='DistortJPGInput')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string, name='DecodeJPGInput')",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "input_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "input_depth",
                            "Method Argument"
                        ],
                        [
                            "input_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_688": {
                "variable": {
                    "value": "decoded_image_as_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(jpeg_data, channels=input_depth)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(jpeg_data, channels=input_depth)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_689": {
                "variable": {
                    "value": "decoded_image_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_image_as_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(decoded_image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(decoded_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_692": {
                "variable": {
                    "value": "margin_scale_value",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "margin_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + random_crop / 100.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_696": {
                "variable": {
                    "value": "scale_value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "margin_scale_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(margin_scale)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "resize_scale_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tensor_shape.scalar(), minval=1.0, maxval=resize_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_697": {
                "variable": {
                    "value": "precrop_width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scale_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(margin_scale_value, resize_scale_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "299",
                            "int"
                        ],
                        [
                            "int(size_string)",
                            "Call"
                        ],
                        [
                            "input_width",
                            "Method Argument"
                        ],
                        [
                            "input_width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_698": {
                "variable": {
                    "value": "precrop_height",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scale_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(margin_scale_value, resize_scale_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "299",
                            "int"
                        ],
                        [
                            "int(size_string)",
                            "Call"
                        ],
                        [
                            "input_height",
                            "Method Argument"
                        ],
                        [
                            "input_height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_699": {
                "variable": {
                    "value": "precrop_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[precrop_height, precrop_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_700": {
                "variable": {
                    "value": "precrop_shape_as_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "precrop_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([precrop_height, precrop_width])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_701": {
                "variable": {
                    "value": "precropped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "decoded_image_4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(decoded_image_as_float, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(decoded_image_as_float, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "precrop_shape_as_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(precrop_shape, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_703": {
                "variable": {
                    "value": "precropped_image_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precropped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(decoded_image_4d, precrop_shape_as_int)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_704": {
                "variable": {
                    "value": "cropped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "precropped_image_3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(precropped_image, squeeze_dims=[0])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[input_height, input_width, input_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_715": {
                "variable": {
                    "value": "brightened_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flipped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_left_right(cropped_image)",
                            "Call"
                        ],
                        [
                            "cropped_image",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "brightness_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(tensor_shape.scalar(), minval=brightness_min, maxval=brightness_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_716": {
                "variable": {
                    "value": "offset_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "brightened_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(flipped_image, brightness_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "127.5",
                            "float"
                        ],
                        [
                            "input_mean",
                            "Method Argument"
                        ],
                        [
                            "input_mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_717": {
                "variable": {
                    "value": "mul_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "offset_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(brightened_image, input_mean)",
                            "Call"
                        ],
                        [
                            "tf.subtract(resized_image, input_mean)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / input_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_718": {
                "variable": {
                    "value": "distort_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(offset_image, 1.0 / input_std)",
                            "Call"
                        ],
                        [
                            "tf.multiply(offset_image, 1.0 / input_std)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "DistortResult",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_785": {
                "variable": {
                    "value": "final_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(bottleneck_input, layer_weights) + layer_biases",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "final_tensor_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_tensor_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_variables_to_constants_826": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ],
                        [
                            "sess",
                            "Method Argument"
                        ]
                    ]
                },
                "input_graph_def": {
                    "value": "graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "[FLAGS.final_tensor_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_954": {
                "variable": {
                    "value": "jpeg_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "DecodeJPGInput",
                    "type": "str",
                    "possible_values": []
                }
            },
            "decode_jpeg_955": {
                "variable": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "jpeg_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gfile.FastGFile(image_path, 'rb').read()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string, name='DistortJPGInput')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.string, name='DecodeJPGInput')",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "input_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "input_depth",
                            "Method Argument"
                        ],
                        [
                            "input_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_956": {
                "variable": {
                    "value": "decoded_image_as_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(jpeg_data, channels=input_depth)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(jpeg_data, channels=input_depth)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_957": {
                "variable": {
                    "value": "decoded_image_4d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded_image_as_float",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(decoded_image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(decoded_image, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_958": {
                "variable": {
                    "value": "resize_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_height, input_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_959": {
                "variable": {
                    "value": "resize_shape_as_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "resize_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([input_height, input_width])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bilinear_960": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "decoded_image_4d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(decoded_image_as_float, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(decoded_image_as_float, 0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize_shape_as_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(resize_shape, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_962": {
                "variable": {
                    "value": "offset_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(decoded_image_4d, resize_shape_as_int)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "127.5",
                            "float"
                        ],
                        [
                            "input_mean",
                            "Method Argument"
                        ],
                        [
                            "input_mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_963": {
                "variable": {
                    "value": "mul_image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "offset_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(brightened_image, input_mean)",
                            "Call"
                        ],
                        [
                            "tf.subtract(resized_image, input_mean)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / input_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_361": {
                "msg": {
                    "value": "'Creating bottleneck at ' + bottleneck_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FastGFile_592": {
                "variable": {
                    "value": "jpeg_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_image_path(image_lists, label_name, index, image_dir, category)",
                            "Call"
                        ],
                        [
                            "get_image_path(image_lists, label_name, image_index, image_dir, category)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_flip_left_right_707": {
                "variable": {
                    "value": "flipped_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "cropped_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_crop(precropped_image_3d, [input_height, input_width, input_depth])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_725": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_with_default_758": {
                "variable": {
                    "value": "bottleneck_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bottleneck_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.import_graph_def(graph_def, name='', return_elements=[model_info['bottleneck_tensor_name'], model_info['resized_input_tensor_name']])",
                            "Call"
                        ],
                        [
                            "create_model_graph(model_info)",
                            "Call"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ],
                        [
                            "bottleneck_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None, bottleneck_tensor_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "BottleneckInputPlaceholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_763": {
                "variable": {
                    "value": "ground_truth_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, class_count]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "GroundTruthInput",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_786": {
                "name": {
                    "value": "activations",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "final_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name=final_tensor_name)",
                            "Call"
                        ],
                        [
                            "add_final_training_ops(len(image_lists.keys()), FLAGS.final_tensor_name, bottleneck_tensor, model_info['bottleneck_tensor_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_789": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "ground_truth_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, class_count], name='GroundTruthInput')",
                            "Call"
                        ],
                        [
                            "add_final_training_ops(len(image_lists.keys()), FLAGS.final_tensor_name, bottleneck_tensor, model_info['bottleneck_tensor_size'])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(bottleneck_input, layer_weights) + layer_biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_793": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_796": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_821": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "evaluation_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(correct_prediction, tf.float32))",
                            "Call"
                        ],
                        [
                            "add_evaluation_step(final_tensor, ground_truth_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_835": {
                "filename": {
                    "value": "FLAGS.summaries_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_837": {
                "dirname": {
                    "value": "FLAGS.summaries_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_verbosity_970": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_1038": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_1039": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.summaries_dir + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_1042": {
                "variable": {
                    "value": "validation_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.summaries_dir + '/validation'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_1046": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_1326": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "main",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_140": {
                "filename": {
                    "value": "image_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "error_141": {
                "msg": {
                    "value": "\"Image directory '\" + image_dir + \"' not found.\"",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_156": {
                "msg": {
                    "value": "\"Looking for images in '\" + dir_name + \"'\"",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fatal_226": {
                "msg": {
                    "value": "Label does not exist %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "label_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re.sub('[^a-z0-9]+', ' ', dir_name.lower())",
                            "Call"
                        ],
                        [
                            "image_lists.items()",
                            "Call"
                        ],
                        [
                            "label_name in enumerate(image_lists.keys())",
                            "Call"
                        ],
                        [
                            "list(image_lists.keys())[label_index]",
                            "Subscript"
                        ],
                        [
                            "list(image_lists.keys())[label_index]",
                            "Subscript"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fatal_229": {
                "msg": {
                    "value": "Category does not exist %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['training', 'testing', 'validation']",
                            "List"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fatal_232": {
                "msg": {
                    "value": "Label %s has no images in the category %s.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "label_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re.sub('[^a-z0-9]+', ' ', dir_name.lower())",
                            "Call"
                        ],
                        [
                            "image_lists.items()",
                            "Call"
                        ],
                        [
                            "label_name in enumerate(image_lists.keys())",
                            "Call"
                        ],
                        [
                            "list(image_lists.keys())[label_index]",
                            "Subscript"
                        ],
                        [
                            "list(image_lists.keys())[label_index]",
                            "Subscript"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ],
                        [
                            "label_name",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "category",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['training', 'testing', 'validation']",
                            "List"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ],
                        [
                            "category",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_275": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_277": {
                "variable": {
                    "value": "(bottleneck_tensor, resized_input_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[model_info['bottleneck_tensor_name'], model_info['resized_input_tensor_name']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "Successfully downloaded",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_url.split('/')[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "statinfo.st_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Exists_364": {
                "filename": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_image_path(image_lists, label_name, index, image_dir, category)",
                            "Call"
                        ],
                        [
                            "get_image_path(image_lists, label_name, image_index, image_dir, category)",
                            "Call"
                        ]
                    ]
                }
            },
            "fatal_365": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_image_path(image_lists, label_name, index, image_dir, category)",
                            "Call"
                        ],
                        [
                            "get_image_path(image_lists, label_name, image_index, image_dir, category)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_712": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_724": {
                "name": {
                    "value": "summaries",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_726": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_728": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(var - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_729": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_730": {
                "name": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_731": {
                "name": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_732": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_757": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_770": {
                "name": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'final_training_ops'",
                            "str"
                        ]
                    ]
                }
            },
            "truncated_normal_772": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bottleneck_tensor_size, class_count]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_775": {
                "variable": {
                    "value": "layer_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal([bottleneck_tensor_size, class_count], stddev=0.001)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "final_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_779": {
                "variable": {
                    "value": "layer_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([class_count])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "final_biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_788": {
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_792": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(labels=ground_truth_input, logits=logits)",
                            "Call"
                        ],
                        [
                            "add_final_training_ops(len(image_lists.keys()), FLAGS.final_tensor_name, bottleneck_tensor, model_info['bottleneck_tensor_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_795": {
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_814": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_816": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_817": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(result_tensor, 1)",
                            "Call"
                        ],
                        [
                            "add_evaluation_step(final_tensor, ground_truth_input)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(ground_truth_tensor, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_820": {
                "variable": {
                    "value": "evaluation_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_828": {
                "name": {
                    "value": "graph_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph_file_name",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "wb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DeleteRecursively_836": {
                "dirname": {
                    "value": "FLAGS.summaries_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "error_978": {
                "msg": {
                    "value": "Did not recognize architecture flag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_991": {
                "msg": {
                    "value": "'No valid folders of images found at ' + FLAGS.image_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "error_994": {
                "msg": {
                    "value": "Only one valid folder of images found at  + FLAGS.image_dir +  - multiple classes are needed for classification.",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_1004": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_model_graph(model_info)",
                            "Call"
                        ],
                        [
                            "graph",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_1125": {
                "msg": {
                    "value": "'Final test accuracy = %.1f%% (N=%d)' % (test_accuracy * 100, len(test_bottlenecks))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Walk_144": {
                "top": {
                    "value": "image_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ],
                        [
                            "image_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "warning_161": {
                "msg": {
                    "value": "No files found",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_164": {
                "msg": {
                    "value": "WARNING: Folder has less than 20 images, which may cause issues.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_274": {
                "name": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, model_info['model_file_name'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "warning_425": {
                "msg": {
                    "value": "Invalid float found, recreating bottleneck",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_590": {
                "filename": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_image_path(image_lists, label_name, index, image_dir, category)",
                            "Call"
                        ],
                        [
                            "get_image_path(image_lists, label_name, image_index, image_dir, category)",
                            "Call"
                        ]
                    ]
                }
            },
            "fatal_591": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "image_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_image_path(image_lists, label_name, index, image_dir, category)",
                            "Call"
                        ],
                        [
                            "get_image_path(image_lists, label_name, image_index, image_dir, category)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_727": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_730": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_731": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_771": {
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_778": {
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_781": {
                "name": {
                    "value": "Wx_plus_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_783": {
                "name": {
                    "value": "pre_activations",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(bottleneck_input, layer_weights) + layer_biases",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_791": {
                "name": {
                    "value": "total",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_815": {
                "name": {
                    "value": "correct_prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_819": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "error_922": {
                "msg": {
                    "value": "\"Couldn't understand architecture name '%s'\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "architecture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "architecture.lower()",
                            "Call"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_1129": {
                "msg": {
                    "value": "=== MISCLASSIFIED TEST IMAGES ===",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FastGFile_1139": {
                "name": {
                    "value": "FLAGS.output_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Glob_159": {
                "filename": {
                    "value": "file_glob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(image_dir, dir_name, '*.' + extension)",
                            "Call"
                        ]
                    ]
                }
            },
            "warning_167": {
                "msg": {
                    "value": "'WARNING: Folder {} has more than {} images. Some images will never be selected.'.format(dir_name, MAX_NUM_IMAGES_PER_CLASS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_728": {
                "input_tensor": {
                    "value": "tf.square(var - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_779": {
                "shape": {
                    "value": "[class_count]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_782": {
                "a": {
                    "value": "bottleneck_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(bottleneck_tensor, shape=[None, bottleneck_tensor_size], name='BottleneckInputPlaceholder')",
                            "Call"
                        ],
                        [
                            "add_final_training_ops(len(image_lists.keys()), FLAGS.final_tensor_name, bottleneck_tensor, model_info['bottleneck_tensor_size'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "layer_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial_value, name='final_weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_818": {
                "input": {
                    "value": "ground_truth_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ground_truth_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_820": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(prediction, tf.argmax(ground_truth_tensor, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "error_877": {
                "msg": {
                    "value": "\"Couldn't understand architecture name '%s'\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "architecture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "architecture.lower()",
                            "Call"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "error_883": {
                "msg": {
                    "value": "\"The Mobilenet version should be \\1.0\\, \\0.75\\, \\0.50\\, or \\0.25\\,\\n  but found \\%s\\ for architecture \\%s\\",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "version_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parts[1]",
                            "Subscript"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "architecture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "architecture.lower()",
                            "Call"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "error_891": {
                "msg": {
                    "value": "\"The Mobilenet input size should be '224', '192', '160', or '128',\\n but found '%s' for architecture '%s'\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "size_string",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parts[2]",
                            "Subscript"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "architecture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "architecture.lower()",
                            "Call"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_1081": {
                "msg": {
                    "value": "'%s: Step %d: Train accuracy = %.1f%%' % (datetime.now(), i, train_accuracy * 100)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1083": {
                "msg": {
                    "value": "'%s: Step %d: Cross entropy = %f' % (datetime.now(), i, cross_entropy_value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1098": {
                "msg": {
                    "value": "'%s: Step %d: Validation accuracy = %.1f%% (N=%d)' % (datetime.now(), i, validation_accuracy * 100, len(validation_bottlenecks))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_1109": {
                "msg": {
                    "value": "'Save intermediate result to : ' + intermediate_file_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_480": {
                "msg": {
                    "value": "str(how_many_bottlenecks) + ' bottleneck files created.'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_728": {
                "x": {
                    "value": "var - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "error_900": {
                "msg": {
                    "value": "\"Couldn't understand architecture suffix '%s' for '%s'\"",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "parts[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "architecture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "architecture.lower()",
                            "Call"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ],
                        [
                            "architecture",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_1132": {
                "msg": {
                    "value": "'%70s  %s' % (test_filename, list(image_lists.keys())[predictions[i]])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_bytes_189": {
                "bytes_or_text": {
                    "value": "hash_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "re.sub('_nohash_.*$', '', file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "setup_cifar.py": {
        "tensorflow": {}
    },
    "setup_inception.py": {
        "tensorflow": {
            "FastGFile_126": {
                "variable": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.image_file if FLAGS.image_file else os.path.join(FLAGS.model_dir, 'cropped_panda.jpg')",
                            "IfExp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_85": {
                "variable": {
                    "value": "proto_as_ascii",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "label_lookup_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GraphDef_107": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_112": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(299, 299, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "import_graph_def_142": {
                "variable": {
                    "value": "softmax_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'DecodeJpeg:0': tf.reshape(img, (299, 299, 3))}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "['softmax/logits:0']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 299, 299, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "import_graph_def_172": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': self.img}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DEFINE_string_311": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tmp/imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to classify_image_graph_def.pb, imagenet_synset_to_human_label_map.txt, and imagenet_2012_challenge_label_map_proto.pbtxt.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_316": {
                "name": {
                    "value": "image_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Absolute path to image file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_318": {
                "name": {
                    "value": "num_top_predictions",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Display this many predictions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_104": {
                "name": {
                    "value": "os.path.join(FLAGS.model_dir, 'frozen_inception_v3.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_124": {
                "filename": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.image_file if FLAGS.image_file else os.path.join(FLAGS.model_dir, 'cropped_panda.jpg')",
                            "IfExp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fatal_125": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.image_file if FLAGS.image_file else os.path.join(FLAGS.model_dir, 'cropped_panda.jpg')",
                            "IfExp"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_220": {
                "variable": {
                    "value": "softmax_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "self.sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': img, 'InceptionV3/Predictions/Shape:0': shape}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "import_graph_def_226": {
                "variable": {
                    "value": "softmax_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "self.sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "input_map": {
                    "value": "{'input:0': img}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_80": {
                "filename": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "label_lookup_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fatal_81": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "label_lookup_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_144": {
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, (299, 299, 3))",
                            "Call"
                        ],
                        [
                            "scipy.misc.imread(f)",
                            "Call"
                        ],
                        [
                            "np.array(scipy.misc.imresize(img, (299, 299)), dtype=np.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(299, 299, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "setup_mnist.py": {
        "tensorflow": {}
    },
    "substitute_blackbox.py": {
        "tensorflow": {
            "GPUOptions_272": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_273": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_303": {
                "variable": {
                    "value": "t_y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_random_seed_80": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_298": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_300": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DEFINE_integer_498": {
                "name": {
                    "value": "nb_classes",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of classes in problem",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_499": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Size of training batches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_500": {
                "name": {
                    "value": "n_attack",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "No. of images used for attack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_513": {
                "name": {
                    "value": "holdout",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Test set holdout for adversary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_514": {
                "name": {
                    "value": "data_aug",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Nb of substitute data augmentations",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_519": {
                "name": {
                    "value": "lmbda",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Lambda from arxiv.org/abs/1602.02697",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_522": {
                "name": {
                    "value": "attack",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cwl2",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"cwl2 = Carlini & Wagner's L2 attack, fgsm = Fast Gradient Sign Method\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_523": {
                "name": {
                    "value": "targeted",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "use targeted attack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_526": {
                "name": {
                    "value": "load_pretrain",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "load pretrained model from sub_saved/mnist-model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_527": {
                "name": {
                    "value": "cached_aug",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "use cached augmentation in sub_saved",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_528": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "sub_saved",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model saving path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_536": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_float_502": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_504": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate for training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_508": {
                "name": {
                    "value": "nb_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_510": {
                "name": {
                    "value": "nb_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs to train model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_516": {
                "name": {
                    "value": "nb_epochs_s",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training epochs for substitute",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_518": {
                "name": {
                    "value": "nb_epochs_s",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Training epochs for substitute",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_530": {
                "name": {
                    "value": "filename",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "mnist-model",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "mnist model name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_532": {
                "name": {
                    "value": "filename",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "cifar-model",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "cifar model name",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_273": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test_all.py": {
        "tensorflow": {
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_attack.py": {
        "tensorflow": {
            "Session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_attack_black.py": {
        "tensorflow": {
            "Session_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_models.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_54": {
                "labels": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "correct",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "predicted / train_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_94": {
                "logits": {
                    "value": "predicted / train_temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "verify.py": {
        "tensorflow": {
            "placeholder_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, model.image_size, model.image_size, model.num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}