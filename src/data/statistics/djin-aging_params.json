{
    "Comparison_models/longitudinal.py": {
        "sklearn": {
            "IterativeImputer_50": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "RandomForestRegressor(n_estimators=40, max_depth=args.max_depth, n_jobs=40)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "-1000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ElasticNet_110": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_ratio": {
                    "value": "args.l1_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_50": {
                "n_estimators": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "args.max_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Comparison_models/survival.py": {
        "sklearn": {
            "IterativeImputer_72": {
                "variable": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "RandomForestRegressor(n_estimators=40, max_depth=args.max_depth, n_jobs=40)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "missing_values": {
                    "value": "-1000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_72": {
                "n_estimators": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "args.max_depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/hierachical_clustering.py": {
        "sklearn": {
            "AgglomerativeClustering_53": {
                "variable": {
                    "value": "clustering",
                    "type": "variable",
                    "possible_values": []
                },
                "distance_threshold": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "average",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/trajectories_classifier.py": {
        "sklearn": {
            "RepeatedStratifiedKFold_17": {
                "variable": {
                    "value": "rskf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_repeats": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StandardScaler_31": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogisticRegression_35": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "penalty": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_37": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test.reshape(y_test.shape[0] * y_test.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "classifier.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "clean_elsa/split_data.py": {
        "sklearn": {
            "StratifiedKFold_92": {
                "variable": {
                    "value": "skf_outer",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_93": {
                "variable": {
                    "value": "skf_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Alternate_models/dynamics_full.py": {
        "torch": {
            "GRU_18": {
                "variable": {
                    "value": "self.hazard1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.hazard2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "gamma_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.hazard_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ELU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N + 1 + context_size, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N + 1 + context_size, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.sigma_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "z_RNN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((t.unsqueeze(-1) - self.mean_T) / self.std_T, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ELU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "gamma_size - 15",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "N + 1 + context_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "N + 1 + context_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "(x, (t.unsqueeze(-1) - self.mean_T) / self.std_T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "log_Gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "input": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Alternate_models/dynamics_nornn.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.sigma_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.hazard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N + 1 + context_size, gamma_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N + 1 + context_size, 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "z_RNN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((t.unsqueeze(-1) - self.mean_T) / self.std_T, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "N + 1 + context_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gamma_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "gamma_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "gamma_size - 15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "gamma_size - 15",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "N + 1 + context_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "(x, context, (t.unsqueeze(-1) - self.mean_T) / self.std_T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_73": {
                "input": {
                    "value": "log_Gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_Gamma(torch.cat((x, context, (t.unsqueeze(-1) - self.mean_T) / self.std_T), dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "input": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "(x, z_RNN)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_35": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Alternate_models/loss_full.py": {
        "torch": {
            "sum_11": {
                "variable": {
                    "value": "log_longitudinal1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_gaussian(X[:, 1:], data[:, 1:], sigma_y) * mask[:, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_12": {
                "variable": {
                    "value": "log_longitudinal0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_gaussian(recon_x0, data[:, 0, :], sigma_y0) * mask[:, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "log_longitudinal0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_13": {
                "variable": {
                    "value": "log_longitudinal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_longitudinal0, log_longitudinal1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_14": {
                "variable": {
                    "value": "batch_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch_weights * log_longitudinal.permute(1, 0)).permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_17": {
                "variable": {
                    "value": "batch_log_S_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "survival_mask * log_S + ((1 - censored) * dead_mask.permute(1, 0)).permute(1, 0) * log_Gamma + ((1 - censored) * after_dead_mask.permute(1, 0)).permute(1, 0) * torch.log(1 - log_S.exp() + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context[:, None, :]] * T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_28": {
                "tensors": {
                    "value": "((times.unsqueeze(-1) - mean_T) / std_T, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "((times.unsqueeze(-1) - mean_T) / std_T, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "torch.norm((g_result[:, 1:-1] - f_result[:, 1:-1]) / sigma_x[:, 1:-1], dim=-1).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "batch_weights * (full_integral + first + last)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_6": {
                "input": {
                    "value": "2 * np.pi * sigma_y.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "batch_weights * batch_log_S_likelihood",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "(g_result[:, 1:-1] - f_result[:, 1:-1]) / sigma_x[:, 1:-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_32": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_19": {
                "input": {
                    "value": "1 - log_S.exp() + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Alternate_models/model_1d.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * N + 26 + 10 + 1, 95)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_size + 3 + 1, decoder_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "context_full",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "int(self.length / self.dt) * [context.unsqueeze(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y0, mask[:, 0, :], trans_t0, env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y0, mask0, trans_t0, env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "2 * N + 26 + 10 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * self.z_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "z_size + 3 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_47": {
                "normalized_shape": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "(pred_Z, trans_t.unsqueeze(-1), context_full)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.log(10.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "torch.log(1000.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "data": {
                    "value": "torch.log(10.0 * torch.ones(z_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "data": {
                    "value": "torch.log(100.0 * torch.ones(z_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_102": {
                "input": {
                    "value": "0.5 * logvar0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_102": {
                "input": {
                    "value": "mu0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params[..., :self.z_size]",
                            "Subscript"
                        ],
                        [
                            "params[..., :self.z_size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_29": {
                "input": {
                    "value": "10.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "1000.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "10.0 * torch.ones(z_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_33": {
                "input": {
                    "value": "100.0 * torch.ones(z_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "z_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_84": {
                "input": {
                    "value": "y0_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_like_87": {
                "input": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['mask0'].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Alternate_models/model_full.py": {
        "torch": {
            "cat_79": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "context_full",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "int(self.length / self.dt) * [context.unsqueeze(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "tensors": {
                    "value": "(pred_Z, trans_t.unsqueeze(-1), context_full)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "data": {
                    "value": "torch.log(10.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "data": {
                    "value": "torch.log(1000.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "10.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "1000.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_67": {
                "input": {
                    "value": "y0_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_like_70": {
                "input": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['mask0'].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Alternate_models/model_nornn.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "(z_sample, trans_t0, env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "data": {
                    "value": "0.03 * torch.randn(N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "data": {
                    "value": "torch.log(0.03 * torch.ones(N, N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "torch.log(10.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "torch.log(100.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "0.03 * torch.ones(N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "10.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_30": {
                "input": {
                    "value": "100.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_27": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_64": {
                "input": {
                    "value": "y0_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_like_67": {
                "input": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['mask0'].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Alternate_models/solver.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "log_S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "log_Gammas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "sigma_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_like_35": {
                "input": {
                    "value": "X[:, i - 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_35": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Alternate_models/vae_flow.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * N + 26 + med_size + 1, 95)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.decoder_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_size + 26 + med_size + 1, decoder_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, m, t, env, med)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_48": {
                "variable": {
                    "value": "sum_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(m, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Normal_52": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu0",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(0.5 * logvar0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "2 * N + 26 + med_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "num_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * z_size + z_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "z_size + 26 + med_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_38": {
                "normalized_shape": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "0.5 * logvar0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Comparison_models/clean_data.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "longitudinal_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'longitudinal.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_21": {
                "variable": {
                    "value": "times_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'times.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_22": {
                "variable": {
                    "value": "death_age",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'death_age.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "censored",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'censored.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_24": {
                "variable": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'env.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "med_time",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'med_time.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_26": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "Data/population_average.py": {
        "torch": {
            "DataLoader_33": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Data/population_std.py": {
        "torch": {
            "DataLoader_31": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "training_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "DataLoader/collate.py": {
        "torch": {
            "stack_12": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_13": {
                "variable": {
                    "value": "self.times",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_14": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_15": {
                "variable": {
                    "value": "self.mask_S",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_16": {
                "variable": {
                    "value": "self.mask_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "self.mask_AD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_18": {
                "variable": {
                    "value": "self.censored",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "self.death_age",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[7]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "self.env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[8]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "self.med_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[9]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_22": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transposed_data[10]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_27": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.X.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "DataLoader/dataset.py": {
        "torch": {
            "load_141": {
                "variable": {
                    "value": "self.longitudinal_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'longitudinal.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "self.times_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'times.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_143": {
                "variable": {
                    "value": "self.death_age",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'death_age.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_145": {
                "variable": {
                    "value": "self.survival_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'survival_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_146": {
                "variable": {
                    "value": "self.censored",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'censored.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_147": {
                "variable": {
                    "value": "self.env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'env.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "self.med_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'med_time.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "self.dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'dead_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_150": {
                "variable": {
                    "value": "self.after_dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'after_dead_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_151": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "self.max_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_162": {
                "variable": {
                    "value": "self.min_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_169": {
                "variable": {
                    "value": "self.longitudinal_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'longitudinal.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_170": {
                "variable": {
                    "value": "self.times_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'times.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_171": {
                "variable": {
                    "value": "self.death_age",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'death_age.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_172": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_173": {
                "variable": {
                    "value": "self.survival_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'survival_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_174": {
                "variable": {
                    "value": "self.censored",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'censored.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_175": {
                "variable": {
                    "value": "self.env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'env.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "self.med_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'med_time.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "self.dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'dead_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "self.after_dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'after_dead_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_179": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_191": {
                "variable": {
                    "value": "self.max_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_192": {
                "variable": {
                    "value": "self.min_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_222": {
                "variable": {
                    "value": "self.max_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_223": {
                "variable": {
                    "value": "self.min_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "self.longitudinal_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, t_length, N))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(data, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_277": {
                "variable": {
                    "value": "self.times_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, t_length))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(times, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_278": {
                "variable": {
                    "value": "self.death_age",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "death_age",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(M)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(death_age, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_279": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, t_length, N), int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(mask, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "self.survival_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "survival_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, t_length), int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(survival_mask, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_281": {
                "variable": {
                    "value": "self.censored",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "censored",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(M, int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(censored, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_282": {
                "variable": {
                    "value": "self.env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, full_env.shape[1] - 1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(env, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_283": {
                "variable": {
                    "value": "self.med_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "med_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(med_time, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_284": {
                "variable": {
                    "value": "self.dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dead_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, t_length), int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(dead_mask, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "self.after_dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "after_dead_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((M, t_length), int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(after_dead_mask, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_286": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(ids.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_290": {
                "obj": {
                    "value": "self.longitudinal_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'longitudinal.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "self.times_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'times.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_292": {
                "obj": {
                    "value": "self.death_age",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'death_age.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_293": {
                "obj": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "self.survival_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'survival_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "self.censored",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'censored.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_296": {
                "obj": {
                    "value": "self.env",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'env.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "self.med_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'med_time.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_298": {
                "obj": {
                    "value": "self.dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'dead_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_299": {
                "obj": {
                    "value": "self.after_dead_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'after_dead_mask.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_300": {
                "obj": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "folder + 'weights.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Model/diagonal_func.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(x[..., i].unsqueeze(-1), z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(input_size, hidden_size1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "hidden_size1",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Model/dynamics.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.sigma_nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_33": {
                "variable": {
                    "value": "self.hazard1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_34": {
                "variable": {
                    "value": "self.hazard2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "gamma_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.hazard_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ELU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(N + 1 + context_size, 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "z_RNN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((t.unsqueeze(-1) - self.mean_T) / self.std_T, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "z_RNN",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((t.unsqueeze(-1) - self.mean_T) / self.std_T, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "gamma_size - 15",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "N + 1 + context_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "(x, (t.unsqueeze(-1) - self.mean_T) / self.std_T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "log_Gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "input": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "(x, (t.unsqueeze(-1) - self.mean_T) / self.std_T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "log_Gamma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "input": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.w_mask * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "(x, z_RNN)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_18": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(x, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Model/loss.py": {
        "torch": {
            "sum_12": {
                "variable": {
                    "value": "log_longitudinal1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_gaussian(X[:, 1:], data[:, 1:], sigma_y) * mask[:, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_13": {
                "variable": {
                    "value": "log_longitudinal0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_gaussian(recon_x0, data[:, 0, :], sigma_y0) * mask[:, 0, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_13": {
                "variable": {
                    "value": "log_longitudinal0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_14": {
                "variable": {
                    "value": "log_longitudinal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_longitudinal0, log_longitudinal1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "batch_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch_weights * log_longitudinal.permute(1, 0)).permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "batch_log_S_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "survival_mask * log_S + ((1 - censored) * dead_mask.permute(1, 0)).permute(1, 0) * log_Gamma + ((1 - censored) * after_dead_mask.permute(1, 0)).permute(1, 0) * torch.log(1 - log_S.exp() + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[context[:, None, :]] * T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "tensors": {
                    "value": "((times.unsqueeze(-1) - mean_T) / std_T, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "torch.norm((g_result[:, 1:-1] - f_result[:, 1:-1]) / sigma_x[:, 1:-1], dim=-1).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "batch_weights * (full_integral + first + last)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_6": {
                "input": {
                    "value": "2 * np.pi * sigma_y.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "batch_weights * batch_log_S_likelihood",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_34": {
                "input": {
                    "value": "(g_result[:, 1:-1] - f_result[:, 1:-1]) / sigma_x[:, 1:-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_34": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "1 - log_S.exp() + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Model/memory_model.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.memory0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(context_size + N + 1, 3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "context_size + N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ELU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "3 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size + hidden_size - 15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "(x0, v, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Model/model.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_99": {
                "variable": {
                    "value": "sample0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(env, med)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "(z_sample, trans_t0, env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "(env, med0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(sample0, trans_t0, env, med)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "(env, med)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "data": {
                    "value": "0.03 * torch.randn(N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "data": {
                    "value": "torch.log(0.03 * torch.ones(N, N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "data": {
                    "value": "torch.log(10.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "data": {
                    "value": "torch.log(100.0 * torch.ones(N))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_103": {
                "input": {
                    "value": "recon_mean_x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.impute.decoder(torch.cat((z_sample, trans_t0, env, med0), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.impute.decoder(torch.cat((sample0, trans_t0, env, med), dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_23": {
                "input": {
                    "value": "0.03 * torch.ones(N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "10.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_27": {
                "input": {
                    "value": "100.0 * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_116": {
                "input": {
                    "value": "pred_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_26": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_63": {
                "input": {
                    "value": "y0_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_like_66": {
                "input": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['mask0'].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model/realnvp_flow.py": {
        "torch": {
            "Sequential_7": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nin, nh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z0, z1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_cond(x0, h0)",
                            "Call"
                        ],
                        [
                            "self.s_cond(z0, h0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.flows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "flows",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "log_det",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "in_features": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_9": {
                "num_features": {
                    "value": "nh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "nh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_14": {
                "tensors": {
                    "value": "(x, h0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s_cond(x0, h0)",
                            "Call"
                        ],
                        [
                            "self.s_cond(z0, h0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model/solver.py": {
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((M, 1, self.N)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(X, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros((M, self.num_t, self.N)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "log_S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((M, 1)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(log_S, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros((M, self.num_t)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "log_Gammas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_Gammas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((M, 1)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(log_Gammas, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros((M, self.num_t)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "sigma_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sigma_xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((M, 1, self.N)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(sigma_xs, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros((M, self.num_t, self.N)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "drifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "drifts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((M, 1, self.N)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(drifts, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((M, 1)).to(self.device)]",
                            "List"
                        ],
                        [
                            "torch.cat(times, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros((M, self.num_t)).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "log_S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "log_Gammas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "sigma_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(M, self.num_t)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "*size": {
                    "value": "(M, 1, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "(M, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "(M, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "(M, 1, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "(M, 1, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "(M, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_29": {
                "input": {
                    "value": "log_Gammas[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_like_74": {
                "input": {
                    "value": "X[:, i - 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_74": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_36": {
                "input": {
                    "value": "X[-1][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_36": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Model/vae_flow.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * N + 26 + med_size + 1, 95)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.decoder_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(z_size + 26 + med_size + 1, decoder_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, m, t, env, med)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "sum_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(m, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Normal_45": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu0",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.exp(0.5 * logvar0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "2 * N + 26 + med_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "num_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "num_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * z_size + z_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "z_size + 26 + med_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ELU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "decoder_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_41": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_45": {
                "input": {
                    "value": "0.5 * logvar0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_Dcalibration.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_num_threads_29": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_brier_score.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_cindex.py": {
        "torch": {
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_correlation.py": {
        "torch": {
            "reshape_26": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.shape[0] * data.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "Plotting_code/plot_longitudinal.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_longitudinal_missing.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_longitudinal_times.py": {
        "torch": {
            "from_numpy_43": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "mask[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_network.py": {
        "torch": {
            "load_41": {
                "f": {
                    "value": "'../Parameters/train%d_Model_DJIN_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Plotting_code/plot_population.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('../Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=True, min_count=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_240": {
                "variable": {
                    "value": "mean_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_241": {
                "variable": {
                    "value": "std_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Utils/record.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "X_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "len(record_times[m])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "S_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "len(record_times[m])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "generate_baseline.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=True, min_count=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_num_threads_27": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Gamma_58": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_59": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "test_set.__len__()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "test_set.__len__()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "test_set.__len__()",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "load_52": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generate_synthetic_population.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=True, min_count=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_set.__len__()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "mean_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_67": {
                "variable": {
                    "value": "std_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_76": {
                "variable": {
                    "value": "env_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_77": {
                "variable": {
                    "value": "env_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_30": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_36": {
                "int": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_41": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Gamma_87": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_88": {
                "variable": {
                    "value": "W_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_100": {
                "variable": {
                    "value": "alive",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "death_ages",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_105": {
                "variable": {
                    "value": "env_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(env, env_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "med",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(size, 5), torch.ones(size, 5))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_135": {
                "variable": {
                    "value": "env[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "env[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "(minimums[j] - means[j]) / stds[j]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "(maximums[j] - means[j]) / stds[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumprod_147": {
                "variable": {
                    "value": "alive[s, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bernoulli(torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "np.arange(t0[b].cpu(), t0[b].cpu() + 20, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_108": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_113": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "rand_116": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "rand_119": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "rand_122": {
                "*size": {
                    "value": "env[env[:, 0] > 0, 1].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_126": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "randn_134": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                }
            },
            "bernoulli_147": {
                "input": {
                    "value": "torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_148": {
                "input": {
                    "value": "t.cpu() * alive[s]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_147": {
                "input": {
                    "value": "-1 * pred_logGamma.exp()[:, :-1] * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "plot_sample.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "mean_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "std_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_28": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_epoch%d_sample.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "X_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_76": {
                "variable": {
                    "value": "alive",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumprod_87": {
                "variable": {
                    "value": "alive[s, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bernoulli(torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "S_results[start + b, :len(np.arange(t0[b], 121, 1)), 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_115": {
                "variable": {
                    "value": "S_results[start + b, :len(np.arange(t0[b], 121, 1)), 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "np.arange(t0[b].cpu(), 121, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_87": {
                "input": {
                    "value": "torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "X_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "X_std_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "X_std_record[b].pow(2).permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "alive_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_85": {
                "input": {
                    "value": "pred_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "-1 * pred_logGamma.exp()[:, :-1] * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "mean_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "std_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_28": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "X_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_76": {
                "variable": {
                    "value": "alive",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumprod_87": {
                "variable": {
                    "value": "alive[s, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bernoulli(torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "S_results[start + b, :len(np.arange(t0[b], 121, 1)), 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_115": {
                "variable": {
                    "value": "S_results[start + b, :len(np.arange(t0[b], 121, 1)), 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "np.arange(t0[b].cpu(), 121, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_87": {
                "input": {
                    "value": "torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "X_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "X_std_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "X_std_record[b].pow(2).permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "alive_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_85": {
                "input": {
                    "value": "pred_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "-1 * pred_logGamma.exp()[:, :-1] * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict_classifier_data.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=True, min_count=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_num_threads_28": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Gamma_66": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_67": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "env_long",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "length * [data['env'].unsqueeze(1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "alive",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumprod_106": {
                "variable": {
                    "value": "alive[s, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bernoulli(torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_106": {
                "input": {
                    "value": "torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_106": {
                "input": {
                    "value": "-1 * pred_logGamma.exp()[:, :-1] * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict_nornn.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=False, min_count=10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "mean_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "std_deficits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_num_threads_29": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Gamma_69": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_70": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_58": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_nornn_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "X_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_80": {
                "variable": {
                    "value": "alive",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumprod_92": {
                "variable": {
                    "value": "alive[s, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bernoulli(torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_119": {
                "variable": {
                    "value": "S_results[start + b, :len(np.arange(t0[b], 121, 1)), 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_120": {
                "variable": {
                    "value": "S_results[start + b, :len(np.arange(t0[b], 121, 1)), 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "S_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "np.arange(t0[b].cpu(), 121, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_92": {
                "input": {
                    "value": "torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "X_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_107": {
                "input": {
                    "value": "X_std_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "X_std_record[b].pow(2).permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "alive_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_90": {
                "input": {
                    "value": "pred_X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "-1 * pred_logGamma.exp()[:, :-1] * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict_population_stats.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "pop_avg_",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(test_name, N, pop=True, min_count=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg_, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "set_num_threads_28": {
                "int": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Gamma_68": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "death_ages",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "test_set.__len__()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_53": {
                "f": {
                    "value": "'Parameters/train%d_Model_DJIN_epoch%d.params' % (args.job_id, args.epoch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "X_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_83": {
                "variable": {
                    "value": "alive",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['Y'].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int(length / dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_86": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumprod_98": {
                "variable": {
                    "value": "alive[s, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bernoulli(torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "np.arange(t0[b].cpu(), t0[b].cpu() + 20, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "X_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_119": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "X_std_record[b].pow(2).permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_120": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "alive_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "X_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "X_std_record[b].permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "X_std_record[b].pow(2).permute(2, 0, 1) * alive_record[b]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_131": {
                "input": {
                    "value": "alive_record[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_98": {
                "input": {
                    "value": "torch.exp(-1 * pred_logGamma.exp()[:, :-1] * dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_99": {
                "input": {
                    "value": "t.cpu() * alive[s]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_98": {
                "input": {
                    "value": "-1 * pred_logGamma.exp()[:, :-1] * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "pop_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, args.corruption)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_85": {
                "variable": {
                    "value": "validation_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(valid_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_100": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Gamma_114": {
                "variable": {
                    "value": "sigma_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.tensor(25000.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_115": {
                "variable": {
                    "value": "W_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(args.W_prior_scale).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_116": {
                "variable": {
                    "value": "vae_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_num_threads_37": {
                "int": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_DJIN_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_106": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_114": {
                "data": {
                    "value": "25000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "args.W_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Laplace_129": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_130": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_136": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__145": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_DJIN_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "sample_weights * W_prior.log_prob(W).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Laplace_163": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_164": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_172": {
                "input": {
                    "value": "sample_weights * W_prior.log_prob(W).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_1d.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "pop_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, args.corruption)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "validation_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(valid_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Gamma_110": {
                "variable": {
                    "value": "sigma_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.tensor(25000.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_111": {
                "variable": {
                    "value": "vae_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_1d_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_num_threads_34": {
                "int": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_39": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_104": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "data": {
                    "value": "25000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Gamma_124": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__137": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_1d_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "sample_weights * (mask * sigma_prior.log_prob(sigma_y)).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Gamma_156": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_160": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "sample_weights * (mask * sigma_prior.log_prob(sigma_y)).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train_full.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "pop_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, args.corruption)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "validation_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(valid_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_103": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Gamma_116": {
                "variable": {
                    "value": "sigma_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.tensor(25000.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_117": {
                "variable": {
                    "value": "vae_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_full_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_num_threads_35": {
                "int": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_40": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_110": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "data": {
                    "value": "25000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Gamma_129": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__142": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_full_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "sample_weights * (mask * sigma_prior.log_prob(sigma_y)).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Gamma_160": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_164": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_167": {
                "input": {
                    "value": "sample_weights * (mask * sigma_prior.log_prob(sigma_y)).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train_nornn.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "pop_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, args.corruption)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "validation_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(valid_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Gamma_119": {
                "variable": {
                    "value": "sigma_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.tensor(25000.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_120": {
                "variable": {
                    "value": "W_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(args.W_prior_scale).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_121": {
                "variable": {
                    "value": "vae_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_211": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_DJIN_nornn_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_num_threads_37": {
                "int": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_42": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_112": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_119": {
                "data": {
                    "value": "25000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "args.W_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Laplace_135": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_136": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_DJIN_nornn_epoch%d.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "sample_weights * W_prior.log_prob(W).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Laplace_172": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_173": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_182": {
                "input": {
                    "value": "sample_weights * W_prior.log_prob(W).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_sample.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "pop_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_avg_env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('Data/Population_averages_env.npy')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pop_avg_env).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "pop_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pop_std[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "training_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(train_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, args.corruption)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "validation_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(valid_name, N, pop=False, min_count=6)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: custom_collate(x, pop_avg, pop_avg_env, pop_std, 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Gamma_116": {
                "variable": {
                    "value": "sigma_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "torch.tensor(25000.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Laplace_117": {
                "variable": {
                    "value": "W_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(args.W_prior_scale).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_118": {
                "variable": {
                    "value": "vae_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_num_threads_37": {
                "int": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_203": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_DJIN_epoch%d_sample.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_108": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "29",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "data": {
                    "value": "25000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "args.W_prior_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Laplace_131": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_132": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_138": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%strain%d_Model_DJIN_epoch%d_sample.params' % (params_folder, args.job_id, epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "sample_weights * W_prior.log_prob(W).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Laplace_165": {
                "variable": {
                    "value": "W_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "model.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "model.logscale.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_166": {
                "variable": {
                    "value": "sigma_posterior",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "model.logalpha.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "model.logbeta.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "summed_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "sample_weights * W_prior.log_prob(W).permute(1, 2, 0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}