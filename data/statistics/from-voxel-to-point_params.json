{
    "pcdet/datasets/waymo/waymo_eval.py": {
        "tensorflow": {
            "get_logger_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_230": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "self._pd_frame_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_119": {
                "variable": {
                    "value": "self._pd_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "self._pd_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self._pd_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "self._pd_overlap_nlz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "self._gt_frame_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_125": {
                "variable": {
                    "value": "self._gt_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "self._gt_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "self._gt_difficulty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_158": {
                "*inputs": {
                    "value": "[value[1] for value in metrics.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "local_variables_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "detection_metrics",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/datasets/waymo/waymo_utils.py": {
        "tensorflow": {
            "convert_to_tensor_87": {
                "variable": {
                    "value": "frame_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(np.array(frame.pose.transform), [4, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "range_image_top_pose_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(range_image_top_pose.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "range_image_top_pose.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_180": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "str(sequence_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_eager_execution_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reverse_109": {
                "variable": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.compute_inclination(tf.constant([c.beam_inclination_min, c.beam_inclination_max]), height=range_image.shape.dims[0])",
                            "Call"
                        ],
                        [
                            "tf.constant(c.beam_inclinations)",
                            "Call"
                        ],
                        [
                            "tf.reverse(beam_inclinations, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "range_image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(range_image.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "range_image.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.extract_point_cloud_from_range_image(tf.expand_dims(range_image_tensor[..., 0], axis=0), tf.expand_dims(extrinsic, axis=0), tf.expand_dims(tf.convert_to_tensor(beam_inclinations), axis=0), pixel_pose=pixel_pose_local, frame_pose=frame_pose_local)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_image_cartesian, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_132": {
                "variable": {
                    "value": "points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.extract_point_cloud_from_range_image(tf.expand_dims(range_image_tensor[..., 0], axis=0), tf.expand_dims(extrinsic, axis=0), tf.expand_dims(tf.convert_to_tensor(beam_inclinations), axis=0), pixel_pose=pixel_pose_local, frame_pose=frame_pose_local)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_image_cartesian, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_134": {
                "variable": {
                    "value": "points_NLZ_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_NLZ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 3]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_135": {
                "variable": {
                    "value": "points_intensity_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_intensity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_136": {
                "variable": {
                    "value": "points_elongation_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_elongation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 2]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "cp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(cp.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "cp.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_139": {
                "variable": {
                    "value": "cp_points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cp_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.convert_to_tensor(cp.data), cp.shape.dims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_90": {
                "value": {
                    "value": "range_image_top_pose.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c.beam_inclinations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "variable": {
                    "value": "pixel_pose_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_pose_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "range_image_top_pose_tensor",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(pixel_pose_local, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "frame_pose_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.reshape(np.array(frame.pose.transform), [4, 4]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_113": {
                "value": {
                    "value": "range_image.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "range_image_tensor[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "extrinsic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.array(c.extrinsic.transform), [4, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "input": {
                    "value": "tf.convert_to_tensor(beam_inclinations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_133": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_134": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_135": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_136": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "convert_to_tensor_138": {
                "value": {
                    "value": "cp.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_139": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_104": {
                "value": {
                    "value": "[c.beam_inclination_min, c.beam_inclination_max]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_127": {
                "value": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.compute_inclination(tf.constant([c.beam_inclination_min, c.beam_inclination_max]), height=range_image.shape.dims[0])",
                            "Call"
                        ],
                        [
                            "tf.constant(c.beam_inclinations)",
                            "Call"
                        ],
                        [
                            "tf.reverse(beam_inclinations, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/datasets/waymo_old/waymo_eval.py": {
        "tensorflow": {
            "get_logger_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_200": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self._pd_frame_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self._pd_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "self._pd_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "self._pd_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self._pd_overlap_nlz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self._gt_frame_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "self._gt_bbox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "self._gt_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "self._gt_difficulty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "disable_eager_execution_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_147": {
                "*inputs": {
                    "value": "[value[1] for value in metrics.values()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "local_variables_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "detection_metrics",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/datasets/waymo_old/waymo_utils.py": {
        "tensorflow": {
            "convert_to_tensor_85": {
                "variable": {
                    "value": "frame_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(np.array(frame.pose.transform), [4, 4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "range_image_top_pose_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(range_image_top_pose.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "range_image_top_pose.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_178": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "str(sequence_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "enable_eager_execution_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reverse_107": {
                "variable": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.compute_inclination(tf.constant([c.beam_inclination_min, c.beam_inclination_max]), height=range_image.shape.dims[0])",
                            "Call"
                        ],
                        [
                            "tf.constant(c.beam_inclinations)",
                            "Call"
                        ],
                        [
                            "tf.reverse(beam_inclinations, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "range_image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(range_image.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "range_image.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.extract_point_cloud_from_range_image(tf.expand_dims(range_image_tensor[..., 0], axis=0), tf.expand_dims(extrinsic, axis=0), tf.expand_dims(tf.convert_to_tensor(beam_inclinations), axis=0), pixel_pose=pixel_pose_local, frame_pose=frame_pose_local)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_image_cartesian, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_130": {
                "variable": {
                    "value": "points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_cartesian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.extract_point_cloud_from_range_image(tf.expand_dims(range_image_tensor[..., 0], axis=0), tf.expand_dims(extrinsic, axis=0), tf.expand_dims(tf.convert_to_tensor(beam_inclinations), axis=0), pixel_pose=pixel_pose_local, frame_pose=frame_pose_local)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(range_image_cartesian, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_132": {
                "variable": {
                    "value": "points_NLZ_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_NLZ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 3]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_133": {
                "variable": {
                    "value": "points_intensity_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_intensity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 1]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_134": {
                "variable": {
                    "value": "points_elongation_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "range_image_elongation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 2]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.compat.v1.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "cp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.convert_to_tensor(cp.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "cp.shape.dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_137": {
                "variable": {
                    "value": "cp_points_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cp_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.convert_to_tensor(cp.data), cp.shape.dims)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(range_image_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "value": {
                    "value": "range_image_top_pose.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_105": {
                "variable": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "c.beam_inclinations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_116": {
                "variable": {
                    "value": "pixel_pose_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_pose_local",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "range_image_top_pose_tensor",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(pixel_pose_local, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "variable": {
                    "value": "frame_pose_local",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(np.reshape(np.array(frame.pose.transform), [4, 4]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_111": {
                "value": {
                    "value": "range_image.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "input": {
                    "value": "range_image_tensor[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "input": {
                    "value": "extrinsic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(np.array(c.extrinsic.transform), [4, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_125": {
                "input": {
                    "value": "tf.convert_to_tensor(beam_inclinations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_131": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_132": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_133": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "where_134": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "convert_to_tensor_136": {
                "value": {
                    "value": "cp.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_137": {
                "condition": {
                    "value": "range_image_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_tensor[..., 0] > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "constant_102": {
                "value": {
                    "value": "[c.beam_inclination_min, c.beam_inclination_max]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_125": {
                "value": {
                    "value": "beam_inclinations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range_image_utils.compute_inclination(tf.constant([c.beam_inclination_min, c.beam_inclination_max]), height=range_image.shape.dims[0])",
                            "Call"
                        ],
                        [
                            "tf.constant(c.beam_inclinations)",
                            "Call"
                        ],
                        [
                            "tf.reverse(beam_inclinations, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/datasets/__init__.py": {
        "torch": {
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__all__[dataset_cfg.DATASET](dataset_cfg=dataset_cfg, class_names=class_names, root_path=root_path, training=training, logger=logger)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None and training",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "timeout": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Generator_28": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_30": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_32": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_60": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "__all__[dataset_cfg.DATASET](dataset_cfg=dataset_cfg, class_names=class_names, root_path=root_path, training=training, logger=logger)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/datasets/dataset.py": {
        "torch": {}
    },
    "pcdet/datasets/kitti/kitti_dataset.py": {
        "torch": {
            "from_numpy_218": {
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "annos['gt_boxes_lidar']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/datasets/nuscenes/nuscenes_dataset.py": {
        "torch": {
            "from_numpy_271": {
                "ndarray": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_271": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "ndarray": {
                    "value": "gt_boxes[:, 0:7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_272": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/datasets/waymo/waymo_dataset.py": {
        "torch": {
            "from_numpy_458": {
                "ndarray": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_458": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_459": {
                "ndarray": {
                    "value": "gt_boxes[:, 0:7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_459": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/datasets/waymo_old/waymo_dataset.py": {
        "torch": {
            "from_numpy_278": {
                "ndarray": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_278": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_279": {
                "ndarray": {
                    "value": "gt_boxes[:, 0:7]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_279": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/__init__.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "batch_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/models/backbones_2d/base_bev_backbone.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.deblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_32": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "c_in_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer_strides[idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.LAYER_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*cur_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "nn.ConvTranspose2d(c_in, c_in, upsample_strides[-1], stride=upsample_strides[-1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_74": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "upsample_strides[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_strides[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.UPSAMPLE_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "nn.ConvTranspose2d(num_filters[idx], num_upsample_filters[idx], upsample_strides[idx], stride=upsample_strides[idx], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "nn.Conv2d(num_filters[idx], num_upsample_filters[idx], stride, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_strides[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_strides[idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.UPSAMPLE_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_strides[idx]",
                            "Subscript"
                        ],
                        [
                            "np.round(1 / stride).astype(np.int)",
                            "Call"
                        ],
                        [
                            "int(spatial_features.shape[2] / x.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_strides[idx]",
                            "Subscript"
                        ],
                        [
                            "np.round(1 / stride).astype(np.int)",
                            "Call"
                        ],
                        [
                            "int(spatial_features.shape[2] / x.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_2d/dcn_bev_backbone.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.deblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_37": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "c_in_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "layer_strides[idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.LAYER_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "*cur_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "nn.ConvTranspose2d(c_in, c_in, upsample_strides[-1], stride=upsample_strides[-1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "upsample_strides[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_strides[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.UPSAMPLE_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(num_upsample_filters)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "*deblocks_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "*args": {
                    "value": "nn.Conv2d(num_filters[idx], num_upsample_filters[idx], stride, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_strides[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_strides[idx]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.model_cfg.UPSAMPLE_STRIDES",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_strides[idx]",
                            "Subscript"
                        ],
                        [
                            "np.round(1 / stride).astype(np.int)",
                            "Call"
                        ],
                        [
                            "int(spatial_features.shape[2] / x.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_strides[idx]",
                            "Subscript"
                        ],
                        [
                            "np.round(1 / stride).astype(np.int)",
                            "Call"
                        ],
                        [
                            "int(spatial_features.shape[2] / x.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "num_upsample_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "num_filters[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_2d/map_to_bev/height_compression.py": {
        "torch": {}
    },
    "pcdet/models/backbones_2d/map_to_bev/pointpillar_scatter.py": {
        "torch": {
            "stack_36": {
                "variable": {
                    "value": "batch_spatial_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_spatial_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch_spatial_features, 0)",
                            "Call"
                        ],
                        [
                            "batch_spatial_features.view(batch_size, self.num_bev_features * self.nz, self.ny, self.nx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "spatial_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_bev_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz * self.nx * self.ny",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pillar_features.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pillar_features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/pfe/bev_grid_pooling.py": {
        "torch": {
            "floor_21": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_24": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(x).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(x0, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x1, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(y).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(y0, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y1, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "point_bev_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_bev_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_41": {
                "input": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[y1, x0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.point_bev_feature_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_bev_features, compressed_bev_features, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.point_bev_feature_compress",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "in_bev_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.IN_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "compressed_bev_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "num_features": {
                    "value": "compressed_bev_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/pfe/residual_v2p_decoder.py": {
        "torch": {
            "floor_20": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_23": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(x).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(x0, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x1, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(y).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(y0, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y1, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "lateral_new_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_feats_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x_out_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bottom_point_bs_idx.unsqueeze(dim=-1).float(), bottom_point_xyz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_162": {
                "variable": {
                    "value": "self.decode_blocks_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.decode_block_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prefix_bottom_channels, OutBlock_cfg.OUT_CHANNELS, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keypoints_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_259": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_size']",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "keypoints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "out_point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx.view(-1, 1).float(), keypoints.view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_40": {
                "input": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[y1, x0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(lateral_channels, out_channels, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(bottom_channels, out_channels, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_185": {
                "in_features": {
                    "value": "prefix_bottom_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "InitBlock_cfg.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "OutBlock_cfg.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "cur_cfg.OUT_CHANNELS",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "OutBlock_cfg.OUT_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_186": {
                "num_features": {
                    "value": "OutBlock_cfg.OUT_CHANNELS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "lateral_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lateral_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "bottom_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bottom_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/pfe/voxel_set_abstraction.py": {
        "torch": {
            "floor_19": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_22": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_25": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(x).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(x0, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_26": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x1, 0, im.shape[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(y).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(y0, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_28": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y1, 0, im.shape[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "im.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.SA_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.vsa_point_feature_fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(c_in, self.model_cfg.NUM_OUTPUT_FEATURES, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "point_bev_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_bev_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "keypoints_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "point_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_231": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_size']",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "keypoints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "point_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx.view(-1, 1).float(), keypoints.view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_39": {
                "input": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im[y1, x0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "c_in + sum([x[-1] for x in mlps])",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.model_cfg.NUM_OUTPUT_FEATURES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_96": {
                "num_features": {
                    "value": "self.model_cfg.NUM_OUTPUT_FEATURES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/pointnet2_backbone.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "batch_dict[point_coords]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx[:, None].float(), l_xyz[0].view(-1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.FP_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "batch_dict[point_coords]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_idx[:, None].float(), l_xyz[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_xyz_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/spconv_backbone.py": {
        "torch": {
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/spconv_unet.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "x.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_bottom.features, x_trans.features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/vfe/mean_vfe.py": {
        "torch": {}
    },
    "pcdet/models/backbones_3d/vfe/pillar_vfe.py": {
        "torch": {
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(part_linear_out, dim=0)",
                            "Call"
                        ],
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1) if self.use_norm else x",
                            "IfExp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.pfn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "pfn_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_87": {
                "variable": {
                    "value": "actual_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actual_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(actual_num, axis + 1)",
                            "Call"
                        ],
                        [
                            "actual_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_90": {
                "variable": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_num, dtype=torch.int, device=actual_num.device).view(max_num_shape)",
                            "Call"
                        ],
                        [
                            "max_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "actual_num.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "f_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel_features[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[voxel_features, f_cluster, f_center]",
                            "List"
                        ],
                        [
                            "[voxel_features[..., 3:], f_cluster, f_center]",
                            "List"
                        ],
                        [
                            "torch.cat(features, dim=-1)",
                            "Call"
                        ],
                        [
                            "features * mask",
                            "BinOp"
                        ],
                        [
                            "pfn(features)",
                            "Call"
                        ],
                        [
                            "features.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_paddings_indicator(voxel_num_points, voxel_count, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(mask, -1).type_as(voxel_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "part_linear_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.linear(inputs[num_part * self.part:(num_part + 1) * self.part]) for num_part in range(num_parts + 1)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x_concatenated",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_repeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_111": {
                "variable": {
                    "value": "points_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxel_features[:, :, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(part_linear_out, dim=0)",
                            "Call"
                        ],
                        [
                            "self.linear(inputs)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1) if self.use_norm else x",
                            "IfExp"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/backbones_3d/vfe/vfe_template.py": {
        "torch": {}
    },
    "pcdet/models/dense_heads/anchor_head_multi.py": {
        "torch": {
            "ModuleList_196": {
                "variable": {
                    "value": "self.rpn_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rpn_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(cls_targets.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_class + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cls_preds[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_23": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_cls_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.code_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv_dir_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.model_cfg.NUM_DIR_BINS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "box_preds_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.shared_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, shared_conv_num_filter, 3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "variable": {
                    "value": "head_label_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([self.class_names.index(cur_name) + 1 for cur_name in rpn_head_cfg['HEAD_CLS_NAME']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_271": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_272": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_312": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv_box[fconv_{reg_name}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cur_conv_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor.permute(3, 4, 0, 1, 2, 5).contiguous().view(-1, anchor.shape[-1]) for anchor in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "shared_conv_num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.SHARED_CONV_NUM_FILTER",
                            "Attribute"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_165": {
                "num_features": {
                    "value": "shared_conv_num_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.SHARED_CONV_NUM_FILTER",
                            "Attribute"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_cls(spatial_features_2d)",
                            "Call"
                        ],
                        [
                            "cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "cls_preds.view(-1, self.num_anchors_per_location, self.num_class, H, W).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "cls_preds.view(batch_size, -1, self.num_class)",
                            "Call"
                        ],
                        [
                            "[ret_dict['cls_preds'] for ret_dict in ret_dicts]",
                            "ListComp"
                        ],
                        [
                            "self.forward_ret_dict['cls_preds']",
                            "Subscript"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_box(spatial_features_2d)",
                            "Call"
                        ],
                        [
                            "box_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "box_preds.view(-1, self.num_anchors_per_location, self.code_size, H, W).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "box_preds.view(batch_size, -1, self.code_size)",
                            "Call"
                        ],
                        [
                            "torch.cat(box_preds_list, dim=1)",
                            "Call"
                        ],
                        [
                            "[ret_dict['box_preds'] for ret_dict in ret_dicts]",
                            "ListComp"
                        ],
                        [
                            "self.forward_ret_dict['box_preds']",
                            "Subscript"
                        ],
                        [
                            "[box_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "dir_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_dir_cls(spatial_features_2d)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dir_cls_preds.view(-1, self.num_anchors_per_location, self.model_cfg.NUM_DIR_BINS, H, W).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "dir_cls_preds.view(batch_size, -1, self.model_cfg.NUM_DIR_BINS)",
                            "Call"
                        ],
                        [
                            "dir_cls_preds.permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "[ret_dict['dir_cls_preds'] for ret_dict in ret_dicts]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_363": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * int(reg_channel)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "num_middle_filter",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "num_middle_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.separate_reg_config.NUM_MIDDLE_FILTER",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/anchor_head_single.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv_box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.box_coder.code_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_60": {
                "variable": {
                    "value": "cls_preds_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.sigmoid(cls_preds[0].detach().clone())",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "cls_pred_decode",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_pred_decode_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv_dir_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_anchors_per_location * self.model_cfg.NUM_DIR_BINS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_60": {
                "input": {
                    "value": "cls_preds[0].detach().clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_63": {
                "input": {
                    "value": "cls_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds_split",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/anchor_head_template.py": {
        "torch": {
            "zeros_122": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(cls_targets.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_class + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cls_preds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes1[..., :dim], rad_pred_encoding, boxes1[..., dim + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes2[..., :dim], rad_tg_encoding, boxes2[..., dim + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_153": {
                "variable": {
                    "value": "dir_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_rot / (2 * np.pi / num_bins)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_154": {
                "variable": {
                    "value": "dir_cls_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_cls_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(offset_rot / (2 * np.pi / num_bins)).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(dir_cls_targets, min=0, max=num_bins - 1)",
                            "Call"
                        ],
                        [
                            "dir_targets",
                            "variable"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_bins - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_117": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "dir_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*list(dir_cls_targets.shape)",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "anchors.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dir_cls_targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_173": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "new_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchors, pad_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_141": {
                "input": {
                    "value": "boxes1[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_141": {
                "input": {
                    "value": "boxes2[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_142": {
                "input": {
                    "value": "boxes1[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_142": {
                "input": {
                    "value": "boxes2[..., dim:dim + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor.permute(3, 4, 0, 1, 2, 5).contiguous().view(-1, anchor.shape[-1]) for anchor in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_208": {
                "input": {
                    "value": "weights.sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor.permute(3, 4, 0, 1, 2, 5).contiguous().view(-1, anchor.shape[-1]) for anchor in self.anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "box_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_ret_dict['box_preds']",
                            "Subscript"
                        ],
                        [
                            "box_preds.view(batch_size, -1, box_preds.shape[-1] // self.num_anchors_per_location if not self.use_multihead else box_preds.shape[-1])",
                            "Call"
                        ],
                        [
                            "box_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "tensors": {
                    "value": "dir_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_cls_preds.view(batch_size, num_anchors, -1) if not isinstance(dir_cls_preds, list) else torch.cat(dir_cls_preds, dim=1).view(batch_size, num_anchors, -1)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_263": {
                "input": {
                    "value": "dir_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_cls_preds.view(batch_size, num_anchors, -1) if not isinstance(dir_cls_preds, list) else torch.cat(dir_cls_preds, dim=1).view(batch_size, num_anchors, -1)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/center_af_head_single.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.shared_conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_conv_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "segm_pred_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segm_pred.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/center_af_head_template.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "fc_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "fc_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_374": {
                "variable": {
                    "value": "(_, cls_ind_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.forward_ret_dict['batch_cls_preds']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_399": {
                "variable": {
                    "value": "roi_iou3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "roi_iou3d_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_509": {
                "variable": {
                    "value": "final_box_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xs, ys, height, dim, rot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "final_box_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xs, ys, height, dim, rot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_672": {
                "variable": {
                    "value": "final_box_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xs, ys, height, dim, rot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_331": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(1, keepdim=True).float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "head_cfg['head_conv']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_453": {
                "variable": {
                    "value": "original_gt_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels == k",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_456": {
                "variable": {
                    "value": "(cur_max_overlaps, cur_gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "head_cfg['head_conv']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "head_cfg['head_conv']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "head_cfg",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "head_cfg['head_conv']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "head_cfg['out_channel']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "head_cfg",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "head_cfg['final_kernel']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "head_cfg",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(head_cfg['final_kernel'] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_389": {
                "input": {
                    "value": "src_box_target_single",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_box_target[i, ...]",
                            "Subscript"
                        ],
                        [
                            "src_box_target_single[valid]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ],
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "head_cfg['head_conv']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks_list[k]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ks_list",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(ks_list[k] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "head_cfg['dp_ratio']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "head_cfg['head_conv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "head_cfg['head_conv']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/feature_adaptor/deformable_convs.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/feature_adaptor/mdeformable_convs.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * offset_mask_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_66": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(offset_mask, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/models/dense_heads/keypoint_assigner/centertarget_assigner.py": {
        "torch": {
            "from_numpy_72": {
                "ndarray": {
                    "value": "np.stack([t['hm'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "ndarray": {
                    "value": "np.stack([t['anno_box'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "np.stack([t['ind'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "np.stack([t['mask'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "np.stack([t['segm'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "np.stack([t['height'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "ndarray": {
                    "value": "np.stack([t['src_box'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "np.stack([t['xsys'] for t in target_list], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/point_head_box.py": {
        "torch": {
            "sigmoid_94": {
                "variable": {
                    "value": "batch_dict[point_cls_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cls_preds_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cls_preds.max(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/models/dense_heads/point_head_simple.py": {
        "torch": {
            "sigmoid_85": {
                "variable": {
                    "value": "point_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_layers(point_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "point_seg_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_dict['point_coords'], point_cls_scores.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/point_head_template.py": {
        "torch": {
            "binary_cross_entropy_206": {
                "variable": {
                    "value": "point_loss_part",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(point_part_preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "point_part_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.new_zeros((points.shape[0], 3)) if ret_part_labels else None",
                            "IfExp"
                        ],
                        [
                            "self.forward_ret_dict['point_part_labels']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "clamp_149": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "max(1, (pos_mask > 0).sum().item())",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_182": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "max(1, (pos_mask > 0).sum().item())",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_223": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "max(1, (pos_mask > 0).sum().item())",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_248": {
                "input": {
                    "value": "pos_normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "positives.sum(dim=0).float()",
                            "Call"
                        ],
                        [
                            "max(1, (pos_mask > 0).sum().item())",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ],
                        [
                            "pos_mask.sum().float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_cfg[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.5, 0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "input": {
                    "value": "point_part_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_ret_dict['point_part_preds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_cfg[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc_cfg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_42": {
                "num_features": {
                    "value": "fc_cfg[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/point_intra_part_head.py": {
        "torch": {
            "sigmoid_105": {
                "variable": {
                    "value": "point_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_layers(point_features)",
                            "Call"
                        ],
                        [
                            "self.generate_predicted_boxes(points=batch_dict['point_coords'][:, 1:4], point_cls_preds=point_cls_preds, point_box_preds=ret_dict['point_box_preds'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "point_part_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_part_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.part_reg_layers(point_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/models/dense_heads/target_assigner/anchor_generator.py": {
        "torch": {
            "arange_34": {
                "variable": {
                    "value": "x_shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.anchor_range[0] + x_offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "self.anchor_range[3] + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "x_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.anchor_range[3] - self.anchor_range[0]) / grid_size[0]",
                            "BinOp"
                        ],
                        [
                            "(self.anchor_range[3] - self.anchor_range[0]) / (grid_size[0] - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "y_shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.anchor_range[1] + y_offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "self.anchor_range[4] + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "y_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.anchor_range[4] - self.anchor_range[1]) / grid_size[1]",
                            "BinOp"
                        ],
                        [
                            "(self.anchor_range[4] - self.anchor_range[1]) / (grid_size[1] - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_45": {
                "variable": {
                    "value": "(x_shifts, y_shifts, z_shifts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[x_shifts, y_shifts, z_shifts]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_shifts, y_shifts, z_shifts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchors, anchor_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(anchors, anchor_rotation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/dense_heads/target_assigner/atss_target_assigner.py": {
        "torch": {
            "full_like_118": {
                "variable": {
                    "value": "ious_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(anchors[:, 0:7], gt_boxes[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou_bev(anchors[:, 0:7], gt_boxes[:, 0:7])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "INF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-2147483647",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "t_118": {
                "variable": {
                    "value": "ious_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_127": {
                "variable": {
                    "value": "anchors_to_gt_indexs[argmax_iou_of_each_gt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "ious.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cls_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "gt_classes[anchors_to_gt_indexs]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reg_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "matched_gts.new_zeros((num_anchor, self.box_coder.code_size))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reg_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "matched_gts.new_zeros(num_anchor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "cls_labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "reg_targets_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "reg_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_95": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/models/dense_heads/target_assigner/axis_aligned_target_assigner.py": {
        "torch": {
            "stack_119": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(bbox_targets, dim=0)",
                            "Call"
                        ],
                        [
                            "anchors.new_zeros((num_anchors, self.box_coder.code_size))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cls_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reg_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reg_weights, dim=0)",
                            "Call"
                        ],
                        [
                            "anchors.new_zeros((num_anchors,))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "anchor_to_gt_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_by_gt_overlap.cpu().numpy().argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "gt_to_anchor_argmax",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "anchor_by_gt_overlap.cpu().numpy().argmax(axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_168": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "target_dict[box_reg_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_reg_targets']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "target_dict[box_cls_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_cls_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "target_dict[reg_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['reg_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "target_dict[box_reg_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_reg_targets']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "target_dict[box_cls_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['box_cls_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "target_dict[reg_weights]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_dict['reg_weights']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_140": {
                "*size": {
                    "value": "(num_anchors,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_141": {
                "*size": {
                    "value": "(num_anchors,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.class_names[cur_gt_classes.cpu() - 1] == anchor_class_name",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.class_names[c - 1] == anchor_class_name for c in cur_gt_classes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_149": {
                "start": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_153": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "anchors.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_176": {
                "n": {
                    "value": "len(fg_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_182": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(bg_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_bg,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/detectors/PartA2_net.py": {
        "torch": {
            "synchronize_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/detectors/detector3d_template.py": {
        "torch": {
            "load_486": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_518": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_279": {
                "variable": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "final_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "final_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_283": {
                "variable": {
                    "value": "(cls_preds, label_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ],
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "final_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "final_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_393": {
                "variable": {
                    "value": "(cls_preds, label_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ],
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "variable": {
                    "value": "iou3d_rcnn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, cur_gt.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_485": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_517": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_249": {
                "variable": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ],
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                }
            },
            "max_296": {
                "variable": {
                    "value": "(max_cls_preds, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_359": {
                "variable": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ],
                        [
                            "batch_dict['batch_cls_preds'][batch_mask]",
                            "Subscript"
                        ],
                        [
                            "[x[batch_mask] for x in batch_dict['batch_cls_preds']]",
                            "ListComp"
                        ],
                        [
                            "[torch.sigmoid(x) for x in cls_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.sigmoid(cls_preds)",
                            "Call"
                        ],
                        [
                            "torch.max(cls_preds, dim=-1)",
                            "Call"
                        ],
                        [
                            "[cls_preds]",
                            "List"
                        ]
                    ]
                }
            },
            "max_410": {
                "variable": {
                    "value": "(max_cls_preds, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ],
                        [
                            "cls_preds",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_534": {
                "variable": {
                    "value": "optimizer_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_optim.%s' % (src_file, ext)",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ],
                        [
                            "torch.device('cpu') if to_cpu else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "sigmoid_254": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_259": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_preds[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_364": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_369": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cls_preds[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/detectors/point_rcnn.py": {
        "torch": {
            "synchronize_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/detectors/pv_rcnn.py": {
        "torch": {
            "synchronize_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/model_utils/model_nms_utils.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_scores, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_boxes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_15": {
                "variable": {
                    "value": "(box_scores_nms, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[scores_mask, k]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[:, k]",
                            "Subscript"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "min(nms_config.NMS_PRE_MAXSIZE, box_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_40": {
                "variable": {
                    "value": "(box_scores_nms, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[scores_mask, k]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[:, k]",
                            "Subscript"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "min(nms_config.NMS_PRE_MAXSIZE, box_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_75": {
                "variable": {
                    "value": "(box_scores_nms, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "box_scores[scores_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[scores_mask, k]",
                            "Subscript"
                        ],
                        [
                            "cls_scores[:, k]",
                            "Subscript"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "min(nms_config.NMS_PRE_MAXSIZE, box_scores.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/feature_adaptor/nn_modules.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.corners_up_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*corners_up_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.corners_inter_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*corners_inter_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.fuse_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fuse_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "cated_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "up_filters_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "up_filters_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "up_filters_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_29": {
                "in_channels": {
                    "value": "inter_filters_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inter_filters_list[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "num_features": {
                    "value": "inter_filters_list[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "in_channels": {
                    "value": "fuse_filters_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fuse_filters_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_70": {
                "num_features": {
                    "value": "fuse_filters_list[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/iouguided_roi_head.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.xyz_up_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.merge_down_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_out * 2, c_out, kernel_size=1, bias=not use_bn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.grid_interact_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*grid_interact_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "point_features_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[point_scores[:, None], point_depths[:, None], point_features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_213": {
                "variable": {
                    "value": "dense_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faked_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois.new_ones((grid_size, grid_size, grid_size))",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "merged_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xyz_features, point_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "grid_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_point_features, grid_bev_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_370": {
                "variable": {
                    "value": "batch_iouscore_preds_1_clamped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_iouscore_preds_1_renorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_iouscore_preds_1 * 0.5 + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "c_out * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "xyz_mlps[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_373": {
                "input": {
                    "value": "batch_cls_preds_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.generate_predicted_boxes(batch_size=batch_dict['batch_size'], rois=batch_dict['rois'], cls_preds=rcnn_cls_0, box_preds=rcnn_reg_0, iouscore_preds=rcnn_iouscore_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_82": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * (channel_in + channel_point_bev_feats)",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.GRID_INTERACT.INTERACT_FILTERS[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.model_cfg.GRID_INTERACT.INTERACT_FILTERS[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_83": {
                "num_features": {
                    "value": "self.model_cfg.GRID_INTERACT.INTERACT_FILTERS[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/partA2_head.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.shared_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "part_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_dict['point_part_offset'] if not self.model_cfg.get('DISABLE_PART', False) else point_coords, batch_dict['point_cls_scores'].view(-1, 1).detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "pooled_part_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_part_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "pooled_rpn_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_rpn_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_160": {
                "variable": {
                    "value": "bs_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size_rcnn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pooled_part_features.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size_rcnn",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_161": {
                "variable": {
                    "value": "sparse_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bs_idxs, sparse_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "merged_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_rpn.features, x_part.features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.ROI_AWARE_POOL.NUM_FEATURES * pool_size * pool_size * pool_size",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "num_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_91": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_98": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/pointrcnn_head.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.xyz_up_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.merge_down_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_out * 2, c_out, kernel_size=1, bias=not use_bn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "point_features_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[point_scores[:, None], point_depths[:, None], point_features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "merged_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xyz_features, point_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "c_out * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "xyz_mlps[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/pointrcnniou_head.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.xyz_up_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.merge_down_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_out * 2, c_out, kernel_size=1, bias=not use_bn)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "point_features_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "point_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[point_scores[:, None], point_depths[:, None], point_features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "batch_rcnn_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rcnn_iou3d_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "merged_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xyz_features, point_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "c_out * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_169": {
                "variable": {
                    "value": "(cur_max_overlaps, cur_gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "xyz_mlps[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "not use_bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "xyz_mlps[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_cfg.XYZ_UP_LAYER[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/pvrcnn_head.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "self.shared_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/roi_head_template.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "fc_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_127": {
                "variable": {
                    "value": "heading_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heading_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_of_rois[:, :, 6] % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(heading_label, min=-np.pi / 2, max=np.pi / 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(cur_roi_scores, cur_roi_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_cls_preds[batch_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_203": {
                "variable": {
                    "value": "batch_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(rcnn_cls_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rcnn_cls_labels.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_41": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_207": {
                "variable": {
                    "value": "batch_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rcnn_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_ret_dict['rcnn_cls']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "rcnn_cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_ret_dict['rcnn_cls_labels'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_203": {
                "input": {
                    "value": "rcnn_cls_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rcnn_cls.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_205": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "num_features": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_209": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/roi_withiou_head_template.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "fc_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_127": {
                "variable": {
                    "value": "heading_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heading_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_of_rois[:, :, 6] % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(heading_label, min=-np.pi / 2, max=np.pi / 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_81": {
                "variable": {
                    "value": "(cur_roi_scores, cur_roi_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_cls_preds[batch_mask]",
                            "Subscript"
                        ],
                        [
                            "cls_preds",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_207": {
                "variable": {
                    "value": "batch_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(rcnn_cls_flat)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "rcnn_cls_labels.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_41": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_211": {
                "variable": {
                    "value": "batch_loss_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rcnn_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_ret_dict['rcnn_cls']",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "rcnn_cls_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_ret_dict['rcnn_cls_labels'].view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_250": {
                "variable": {
                    "value": "rcnn_loss_iouscore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rcnn_iouscore_flat[reg_valid]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "rcnn_iouscore.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rcnn_iouscore_labels[reg_valid]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(rcnn_iouscore_labels_raw - 0.5) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_207": {
                "input": {
                    "value": "rcnn_cls_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rcnn_cls.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_209": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "in_channels": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_channels",
                            "variable"
                        ],
                        [
                            "fc_list[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "num_features": {
                    "value": "fc_list[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_213": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/target_assigner/proposal_target_layer.py": {
        "torch": {
            "nonzero_151": {
                "variable": {
                    "value": "fg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps >= fg_thresh",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_154": {
                "variable": {
                    "value": "easy_bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_overlaps < self.roi_sampler_cfg.CLS_BG_THRESH_LO",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_158": {
                "variable": {
                    "value": "hard_bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(max_overlaps < self.roi_sampler_cfg.REG_FG_THRESH) & (max_overlaps >= self.roi_sampler_cfg.CLS_BG_THRESH_LO)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fg_inds, bg_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.permutation(fg_num_rois)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_208": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "hard_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(hard_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_212": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "easy_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(easy_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "bg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hard_bg_inds, easy_bg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_133": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.random.permutation(fg_num_rois)).type_as(max_overlaps).long()",
                            "Call"
                        ],
                        [
                            "np.floor(np.random.rand(self.roi_sampler_cfg.ROI_PER_IMAGE) * fg_num_rois)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rand_num).type_as(max_overlaps).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_219": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "hard_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(hard_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nonzero_261": {
                "variable": {
                    "value": "original_gt_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels == k",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_267": {
                "variable": {
                    "value": "(cur_max_overlaps, cur_gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_224": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "easy_bg_inds.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(easy_bg_rois_num,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/target_assigner/refinedbox_target_layer.py": {
        "torch": {
            "max_137": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_179": {
                "variable": {
                    "value": "original_gt_assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels == k",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_185": {
                "variable": {
                    "value": "(cur_max_overlaps, cur_gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt[:, 0:7])",
                            "Call"
                        ],
                        [
                            "iou3d_nms_utils.boxes_iou3d_gpu(cur_roi, cur_gt)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/models/roi_heads/voxelrcnn_head.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.roi_grid_pool_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.shared_fc_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.cls_fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cls_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.cls_pred_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.CLS_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.REG_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.reg_fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reg_fc_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.reg_pred_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.CLS_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.REG_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.box_coder.code_size * self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "roi_grid_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[roi_grid_coords_x, roi_grid_coords_y, roi_grid_coords_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "ms_pooled_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_210": {
                "variable": {
                    "value": "dense_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faked_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois.new_ones((grid_size, grid_size, grid_size))",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "cur_roi_grid_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_idx, cur_roi_grid_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.CLS_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.REG_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_44": {
                "num_features": {
                    "value": "self.model_cfg.SHARED_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.CLS_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.REG_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.model_cfg.CLS_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_57": {
                "num_features": {
                    "value": "self.model_cfg.CLS_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "pre_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GRID_SIZE * GRID_SIZE * GRID_SIZE * c_out",
                            "BinOp"
                        ],
                        [
                            "self.model_cfg.SHARED_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.CLS_FC[k]",
                            "Subscript"
                        ],
                        [
                            "self.model_cfg.REG_FC[k]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.model_cfg.REG_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "num_features": {
                    "value": "self.model_cfg.REG_FC[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "self.model_cfg.DP_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/functions/deform_conv_func.py": {
        "torch": {}
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/functions/deform_psroi_pooling_func.py": {
        "torch": {}
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/functions/modulated_deform_conv_func.py": {
        "torch": {}
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/modules/deform_conv.py": {
        "torch": {
            "Parameter_37": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/modules/deform_psroi_pooling.py": {
        "torch": {
            "Sequential_74": {
                "variable": {
                    "value": "self.offset_mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pooled_size * self.pooled_size * self.output_dim, self.deform_fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_107": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset_mask_fc(roi.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset_mask.view(n, 3, self.pooled_size, self.pooled_size)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(offset_mask, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "self.pooled_size * self.pooled_size * self.output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooled_size * self.pooled_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/modules/mdeformable_conv_block.py": {
        "torch": {
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * offset_mask_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_84": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(offset_mask, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/modules/modulated_deform_conv.py": {
        "torch": {
            "Parameter_36": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_92": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_94": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/setup.py": {
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/DeformableConvolutionV2PyTorch/test.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "conv_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "pcn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "conv_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "conv_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 1 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "pcn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask * 2",
                            "BinOp"
                        ],
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.randn(N, deformable_groups * 1 * kW * kH, inH, inW).cuda())",
                            "Call"
                        ],
                        [
                            "torch.rand(N, deformable_groups * 1 * kW * kH, inH, inW).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "conv_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "conv_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "conv_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 1 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_168": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask * 2",
                            "BinOp"
                        ],
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.randn(N, deformable_groups * 1 * kW * kH, inH, inW).cuda())",
                            "Call"
                        ],
                        [
                            "torch.rand(N, deformable_groups * 1 * kW * kH, inH, inW).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "conv_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_190": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_220": {
                "variable": {
                    "value": "conv_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "conv_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * 1 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_232": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_276": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "int(inC // groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_279": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_283": {
                "variable": {
                    "value": "targert",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*output1.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_318": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(N, deformable_groups * 1 * kW * kH, inH, inW).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_321": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "int(inC // groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_324": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_328": {
                "variable": {
                    "value": "targert",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*output1.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_357": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_360": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_391": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "int(inC // groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_394": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_420": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "deformable_groups * 1 * kW * kH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "sigmoid_423": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask * 2",
                            "BinOp"
                        ],
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "conv_mask(input)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(torch.randn(N, deformable_groups * 1 * kW * kH, inH, inW).cuda())",
                            "Call"
                        ],
                        [
                            "torch.rand(N, deformable_groups * 1 * kW * kH, inH, inW).cuda()",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_425": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "int(inC // groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "kW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_428": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_439": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_442": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 65, 65, 103, 103], [1, 81, 41, 119, 79]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_464": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_474": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_480": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_507": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_520": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_534": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_535": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_536": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_537": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_538": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_539": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_541": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_577": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_579": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_580": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_581": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_582": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_583": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_268": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_271": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "deformable_groups * 2 * kW * kH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_310": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_313": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "deformable_groups * 2 * kW * kH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_318": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "deformable_groups * 1 * kW * kH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "rand_353": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "gradcheck_372": {
                "func": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(input, weight, bias, stride, padding, dilation, deformable_groups)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_383": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_386": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "deformable_groups * 2 * kW * kH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "gradcheck_398": {
                "func": {
                    "value": "_DeformConv",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(input, offset, weight, bias, stride, padding, dilation, groups, deformable_groups, im2col_step)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_412": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "randn_415": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "deformable_groups * 2 * kW * kH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                }
            },
            "gradcheck_432": {
                "func": {
                    "value": "_ModulatedDeformConv",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(input, offset, mask, weight, bias, stride, padding, dilation, groups, deformable_groups, im2col_step)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "raise_exception": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_472": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_475": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_476": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_477": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_478": {
                "*size": {
                    "value": "(N, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gradcheck_494": {
                "func": {
                    "value": "_DeformRoIPooling",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(input, rois, offset, spatial_scale, pooled_size, output_dim, no_trans, group_size, part_size, sample_per_part, trans_std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/iou3d_nms/iou3d_nms_utils.py": {
        "torch": {
            "arange_37": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dets.shape[0]",
                            "Subscript"
                        ],
                        [
                            "dets.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dets, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_41": {
                "variable": {
                    "value": "(box_scores, conf_sort_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(box_scores, descending=True)",
                            "Call"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ],
                        [
                            "box_scores",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dets, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "ret_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ret_boxes_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(boxes_ret, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros([0, 7])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "ret_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ret_scores_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(scores_ret, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros([0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_338": {
                "variable": {
                    "value": "ret_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ret_labels_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(labels_ret, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros([0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_380": {
                "variable": {
                    "value": "max_of_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_a[:, 2] - boxes_a[:, 5] / 2",
                            "BinOp"
                        ],
                        [
                            "(boxes_a[:, 2] - boxes_a[:, 5] / 2).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_381": {
                "variable": {
                    "value": "min_of_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_a[:, 2] + boxes_a[:, 5] / 2",
                            "BinOp"
                        ],
                        [
                            "(boxes_a[:, 2] + boxes_a[:, 5] / 2).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_382": {
                "variable": {
                    "value": "overlaps_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_404": {
                "variable": {
                    "value": "overlaps_bev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_overlaps_bev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(np_2dcorners_a.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_475": {
                "variable": {
                    "value": "max_of_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_a[:, 2] - boxes_a[:, 5] / 2",
                            "BinOp"
                        ],
                        [
                            "(boxes_a[:, 2] - boxes_a[:, 5] / 2).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_476": {
                "variable": {
                    "value": "min_of_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a_height_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes_a[:, 2] + boxes_a[:, 5] / 2",
                            "BinOp"
                        ],
                        [
                            "(boxes_a[:, 2] + boxes_a[:, 5] / 2).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_477": {
                "variable": {
                    "value": "overlaps_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_of_max - max_of_min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_560": {
                "variable": {
                    "value": "boxiou_a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxiou_a_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_74": {
                "variable": {
                    "value": "(box_scores_sorted, arg_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "box_scores[pos:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_118": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dets.shape[0]",
                            "Subscript"
                        ],
                        [
                            "dets.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_120": {
                "variable": {
                    "value": "indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dets.shape[0]",
                            "Subscript"
                        ],
                        [
                            "dets.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_152": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-(ovr * ovr) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_555": {
                "variable": {
                    "value": "(max_overlaps, gt_assignment)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "iou3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overlaps_3d / torch.clamp(vol_a + vol_b - overlaps_3d, min=1e-06)",
                            "BinOp"
                        ],
                        [
                            "overlaps_3d / torch.clamp(vol_a + vol_b - overlaps_3d, min=1e-06)",
                            "BinOp"
                        ],
                        [
                            "boxes_iou3d_gpu(boxes_a=boxes_a_single, boxes_b=boxes_b_single)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_132": {
                "variable": {
                    "value": "(maxscore, maxpos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores[pos:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "ovr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_357": {
                "input": {
                    "value": "boxes_a[:, 1] - boxes_b[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_358": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(boxes_a[:, 0] - boxes_b[:, 0], 2) + torch.pow(boxes_a[:, 1] - boxes_b[:, 1], 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_414": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_485": {
                "input": {
                    "value": "vol_a + vol_b - overlaps_3d",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "-(ious * ious) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_batch/pointnet2_modules.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_191": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_193": {
                "variable": {
                    "value": "self.mlps_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "new_features_conv * torch.sigmoid(gate)",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_260": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "new_features_conv * torch.sigmoid(gate)",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_273": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "new_features_conv * torch.sigmoid(gate)",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*shared_mlps_gated",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_257": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlps_gate[i](new_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_264": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.unsqueeze(-1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features).contiguous()",
                            "Call"
                        ],
                        [
                            "new_features_conv * torch.sigmoid(gate)",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "mlp[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "mlp_spec[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "mlp_spec[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "mlp_spec[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_batch/pointnet2_utils.py": {
        "torch": {
            "sum_317": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_365": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "threenn_xyz - new_xyz.unsqueeze(dim=1).expand(-1, idx.shape[-1], -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_371": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_379": {
                "variable": {
                    "value": "interpolated_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "threenn_feats * weight.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(B, N, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_257": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_stack/pointnet2_modules.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sum_124": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknown_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_78": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[k](xyz, xyz_batch_cnt, new_xyz, new_xyz_batch_cnt, features)",
                            "Call"
                        ],
                        [
                            "new_features.permute(1, 0, 2).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.mlps[k](new_features)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=1)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknown_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.permute(1, 0)[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).squeeze(dim=-1).permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "*shared_mlps",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groupers[k](xyz, xyz_batch_cnt, new_xyz, new_xyz_batch_cnt, features)",
                            "Call"
                        ],
                        [
                            "new_features.permute(1, 0, 2).unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "self.mlps[k](new_features)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=1)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknown_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "variable"
                        ],
                        [
                            "new_features.permute(1, 0)[None, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).squeeze(dim=-1).permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "mlp[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "mlp[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "mlp_spec[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "mlp_spec[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_stack/pointnet2_utils.py": {
        "torch": {
            "cat_148": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "input": {
                    "value": "dist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unknown.new_zeros(unknown.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_stack/voxel_pool_modules.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.mlps_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.mlps_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.mlps_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "cur_mlp_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(mlp_spec[0], mlp_spec[1], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "cur_mlp_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, mlp_spec[1], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "cur_mlp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(mlp_spec[1], mlp_spec[2], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_128": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_features + position_features",
                            "BinOp"
                        ],
                        [
                            "self.relu(new_features)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=1)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mlps_out[k](new_features)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "in_channels": {
                    "value": "mlp_spec[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "mlp_spec[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_132": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_features + position_features",
                            "BinOp"
                        ],
                        [
                            "self.relu(new_features)",
                            "Call"
                        ],
                        [
                            "torch.cat(new_features_list, dim=1)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.mlps_out[k](new_features)",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(dim=0).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)]).squeeze(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_132": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_stack/voxel_pool_trans_modules.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_25": {
                "variable": {
                    "value": "self.mlps_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.mlps_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.mlps_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "neighbor_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbor_feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "neighbor_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "neighbor_xyz_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MultiheadAttention_174": {
                "variable": {
                    "value": "self.multihead_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhead",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "kdim": {
                    "value": "nc_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc_mem",
                            "Method Argument"
                        ]
                    ]
                },
                "vdim": {
                    "value": "nc_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc_mem",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_176": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_177": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_180": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_181": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_182": {
                "variable": {
                    "value": "self.norm_mem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "nc_mem",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc_mem",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_184": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_185": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.pe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.nc_in // 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TransformerDecoder_243": {
                "variable": {
                    "value": "self.chunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decoder_layer": {
                    "value": "TransformerDecoderLayerPreNorm(d_model=self.nc_in, dim_feedforward=2 * self.nc_in, dropout=drop, nhead=nhead, nc_mem=dim_feature)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "cur_mlp_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(mlp_spec[0], mlp_spec[1], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "cur_mlp_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, mlp_spec[1], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "cur_mlp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(mlp_spec[1], mlp_spec[2], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_139": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grouped_new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_features + position_features",
                            "BinOp"
                        ],
                        [
                            "self.relu(grouped_new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_139": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_in // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_238": {
                "num_features": {
                    "value": "self.nc_in // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "self.nc_in // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "in_channels": {
                    "value": "mlp_spec[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv1d_46": {
                "in_channels": {
                    "value": "mlp_spec[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mlp_spec[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "num_features": {
                    "value": "mlp_spec[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_143": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grouped_new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_features + position_features",
                            "BinOp"
                        ],
                        [
                            "self.relu(grouped_new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/pointnet2/pointnet2_stack/voxel_query_utils.py": {
        "torch": {}
    },
    "pcdet/ops/roiaware_pool3d/roiaware_pool3d_utils.py": {
        "torch": {}
    },
    "pcdet/ops/roipoint_pool3d/roipoint_pool3d_utils.py": {
        "torch": {}
    },
    "pcdet/ops/spconv/conv.py": {
        "torch": {
            "Parameter_98": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*kernel_size, in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_138": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight.view(self.in_channels, self.out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/spconv/functional.py": {
        "torch": {}
    },
    "pcdet/ops/spconv/group.py": {
        "torch": {}
    },
    "pcdet/ops/spconv/modules.py": {
        "torch": {
            "sqrt_175": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "input": {
                    "value": "bn.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/ops/spconv/ops.py": {
        "torch": {}
    },
    "pcdet/ops/spconv/structure.py": {
        "torch": {
            "zeros_11": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "updates.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "updates.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/utils/box_coder_utils.py": {
        "torch": {
            "split_25": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_26": {
                "variable": {
                    "value": "(xg, yg, zg, dxg, dyg, dzg, rg, *cgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_32": {
                "variable": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxg / dxa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_33": {
                "variable": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dyg / dya",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_34": {
                "variable": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dzg / dza",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_95": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_96": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_98": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_127": {
                "variable": {
                    "value": "(xa, ya, za, dxa, dya, dza, ra, *cas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ],
                        [
                            "anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_128": {
                "variable": {
                    "value": "(xt, yt, zt, wt, lt, ht, rt, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_164": {
                "variable": {
                    "value": "(xg, yg, zg, dxg, dyg, dzg, rg, *cgs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_boxes",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_165": {
                "variable": {
                    "value": "(xa, ya, za)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_198": {
                "variable": {
                    "value": "(xt, yt, zt, dxt, dyt, dzt, cost, sint, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_199": {
                "variable": {
                    "value": "(xa, ya, za)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points",
                            "Method Argument"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_219": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(rot_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(rot_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_250": {
                "variable": {
                    "value": "rot_cos_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_encodings * (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(sint, cost)",
                            "Call"
                        ],
                        [
                            "rots",
                            "Method Argument"
                        ],
                        [
                            "rots",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_251": {
                "variable": {
                    "value": "rot_sin_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_encodings * (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.atan2(sint, cost)",
                            "Call"
                        ],
                        [
                            "rots",
                            "Method Argument"
                        ],
                        [
                            "rots",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "rot_encodings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rot_cos_encodings, rot_sin_encodings]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_263": {
                "variable": {
                    "value": "(cost, sint)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rots % (2 * np.pi) / (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([rot_cos_encodings, rot_sin_encodings], dim=-1)",
                            "Call"
                        ],
                        [
                            "rot_encodings",
                            "Method Argument"
                        ],
                        [
                            "rot_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_267": {
                "variable": {
                    "value": "rots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(rot_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(rot_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[xt, yt, zt, dxt, dyt, dzt, *rts, *cts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "(xt, yt, zt, dxt, dyt, dzt, rt, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "(xt, yt, zt, dxt, dyt, dzt, cost, sint, *cts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "box_encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ],
                        [
                            "box_encodings",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_72": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rg_sin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sint + torch.sin(ra)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rg_cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost + torch.cos(ra)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "self.mean_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(kwargs['mean_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_170": {
                "variable": {
                    "value": "(dxa, dya, dza)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean_size[gt_classes - 1]",
                            "Subscript"
                        ],
                        [
                            "self.mean_size[pred_classes - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_171": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_175": {
                "variable": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxg / dxa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_176": {
                "variable": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dyg / dya",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "variable": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dzg / dza",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_182": {
                "variable": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dxt) * dxa",
                            "BinOp"
                        ],
                        [
                            "torch.exp(lt) * dxa",
                            "BinOp"
                        ],
                        [
                            "torch.exp(lt) * dxa",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.exp(box_encodings[..., 3:6]), 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dxt) * dxa",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_183": {
                "variable": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dyg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dyt) * dya",
                            "BinOp"
                        ],
                        [
                            "torch.exp(wt) * dya",
                            "BinOp"
                        ],
                        [
                            "torch.exp(wt) * dya",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.exp(box_encodings[..., 3:6]), 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dyt) * dya",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_184": {
                "variable": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dzg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dzt) * dza",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ht) * dza",
                            "BinOp"
                        ],
                        [
                            "torch.exp(ht) * dza",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(torch.exp(box_encodings[..., 3:6]), 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.exp(dzt) * dza",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[xt, yt, zt, dxt, dyt, dzt, torch.cos(rg), torch.sin(rg), *cts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_204": {
                "variable": {
                    "value": "(dxa, dya, dza)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean_size[gt_classes - 1]",
                            "Subscript"
                        ],
                        [
                            "self.mean_size[pred_classes - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_205": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dxa ** 2 + dya ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "(dxg, dyg, dzg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.exp(box_encodings[..., 3:6])",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "[xg, yg, zg, dxg, dyg, dzg, rg, *cgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_66": {
                "input": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_67": {
                "input": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_103": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_104": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_105": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_135": {
                "input": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_136": {
                "input": {
                    "value": "wt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_137": {
                "input": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_36": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_37": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_70": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_71": {
                "input": {
                    "value": "ra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(anchors, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_187": {
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rg_sin, rg_cos)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "ra - rt",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(sint, cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_187": {
                "input": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(rg_sin, rg_cos)",
                            "Call"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "rt + ra",
                            "BinOp"
                        ],
                        [
                            "ra - rt",
                            "BinOp"
                        ],
                        [
                            "torch.split(gt_boxes, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.atan2(sint, cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_210": {
                "input": {
                    "value": "dxt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg)",
                            "Call"
                        ],
                        [
                            "torch.log(dxg / dxa)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_211": {
                "input": {
                    "value": "dyt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg)",
                            "Call"
                        ],
                        [
                            "torch.log(dyg / dya)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_212": {
                "input": {
                    "value": "dzt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg)",
                            "Call"
                        ],
                        [
                            "torch.log(dzg / dza)",
                            "Call"
                        ],
                        [
                            "torch.split(box_encodings, 1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_217": {
                "input": {
                    "value": "box_encodings[..., 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/utils/box_utils.py": {
        "torch": {
            "max_324": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 0, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_325": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 2, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_326": {
                "variable": {
                    "value": "y_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 1, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_327": {
                "variable": {
                    "value": "y_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes_a[:, 3, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_346": {
                "variable": {
                    "value": "choose_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "rot_angle[:, None] < np.pi / 4",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes3d[:, [3, 4]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes3d[:, [4, 3]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "aligned_bev_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes3d[:, 0:2] - choose_dims / 2, boxes3d[:, 0:2] + choose_dims / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_387": {
                "variable": {
                    "value": "ry_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_reg[:, ry_bin_l:ry_bin_r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_388": {
                "variable": {
                    "value": "ry_res_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_reg[:, ry_res_l:ry_res_r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ry_bin.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_388": {
                "variable": {
                    "value": "ry_res_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_415": {
                "variable": {
                    "value": "polar_point_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_416": {
                "variable": {
                    "value": "intervals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, polar_point_range[:, [2]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords_idx[:, [0]].float(), coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_418": {
                "input": {
                    "value": "polar_point_range[:, [1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_419": {
                "input": {
                    "value": "polar_point_range[:, [1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/utils/center_utils.py": {
        "torch": {
            "max_pool2d_254": {
                "variable": {
                    "value": "hmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_nms(heat)",
                            "Call"
                        ],
                        [
                            "heat",
                            "Method Argument"
                        ],
                        [
                            "heat",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel, kernel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel - 1) // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(hmax == heat).float()",
                            "Call"
                        ],
                        [
                            "np.array(circle_nms(boxes.cpu().numpy(), thresh=min_radius))[:post_max_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(keep).long().to(boxes.device)",
                            "Call"
                        ],
                        [
                            "_circle_nms(boxes, min_radius=cfg.min_radius[task_id], post_max_size=cfg.post_max_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_273": {
                "variable": {
                    "value": "(topk_scores, topk_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(batch, cat, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_divide_277": {
                "variable": {
                    "value": "topk_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(scores.view(batch, cat, -1), K)",
                            "Call"
                        ],
                        [
                            "topk_inds % (height * width)",
                            "BinOp"
                        ],
                        [
                            "_gather_feat(topk_inds.view(batch, -1, 1), topk_ind).view(batch, K)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_280": {
                "variable": {
                    "value": "(topk_score, topk_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_scores.view(batch, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_divide_282": {
                "variable": {
                    "value": "topk_clses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(topk_scores.view(batch, -1), K)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "atan2_325": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_transpose_and_gather_feat(rots, inds)",
                            "Call"
                        ],
                        [
                            "rots.view(batch, K, 1)",
                            "Call"
                        ],
                        [
                            "rots",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "rotc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_transpose_and_gather_feat(rotc, inds)",
                            "Call"
                        ],
                        [
                            "rotc.view(batch, K, 1)",
                            "Call"
                        ],
                        [
                            "rotc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_350": {
                "variable": {
                    "value": "final_box_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xs, ys, hei, dim, rot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "final_box_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xs, ys, hei, dim, vel, rot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_383": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[centers, scores.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/utils/common_utils.py": {
        "torch": {
            "cos_45": {
                "variable": {
                    "value": "cosa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_46": {
                "variable": {
                    "value": "sina",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_49": {
                "variable": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones), dim=1).view(-1, 3, 3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points_rot, points[:, :, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "pc_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "point_cloud_range[0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "voxel_centers.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_138": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_156": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_139": {
                "device": {
                    "value": "proc_id % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_157": {
                "device": {
                    "value": "local_rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "voxel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(voxel_size, device=voxel_centers.device).float() * downsample_times",
                            "BinOp"
                        ],
                        [
                            "voxel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "voxel_centers.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_173": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_22": {
                "input": {
                    "value": "val / period + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/utils/loss_utils.py": {
        "torch": {
            "min_236": {
                "variable": {
                    "value": "corner_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(pred_box_corners - gt_box_corners, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_274": {
                "variable": {
                    "value": "corner_loss_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_box_corners[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "box_utils.boxes_to_corners_3d(pred_bbox3d)",
                            "Call"
                        ],
                        [
                            "box_utils.boxes_to_corners_3d(pred_bbox3d)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_box_corners[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "box_utils.boxes_to_corners_3d(gt_bbox3d)",
                            "Call"
                        ],
                        [
                            "box_utils.boxes_to_corners_3d(gt_bbox3d)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_275": {
                "variable": {
                    "value": "corner_loss_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_box_corners[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "box_utils.boxes_to_corners_3d(pred_bbox3d)",
                            "Call"
                        ],
                        [
                            "box_utils.boxes_to_corners_3d(pred_bbox3d)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_box_corners[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "box_utils.boxes_to_corners_3d(gt_bbox3d)",
                            "Call"
                        ],
                        [
                            "box_utils.boxes_to_corners_3d(gt_bbox3d)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_276": {
                "variable": {
                    "value": "corner_loss_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_box_corners[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "box_utils.boxes_to_corners_3d(pred_bbox3d)",
                            "Call"
                        ],
                        [
                            "box_utils.boxes_to_corners_3d(pred_bbox3d)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_box_corners[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "box_utils.boxes_to_corners_3d(gt_bbox3d)",
                            "Call"
                        ],
                        [
                            "box_utils.boxes_to_corners_3d(gt_bbox3d)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_326": {
                "variable": {
                    "value": "loss_ioucls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(iou_preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "iou_cls_labels.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_397": {
                "variable": {
                    "value": "loss_ry_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_reg[:, ry_bin_l:ry_bin_r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "ry_bin_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shift_angle / angle_per_class).floor().long()",
                            "Call"
                        ],
                        [
                            "(shift_angle / angle_per_class).floor().long()",
                            "Call"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_398": {
                "variable": {
                    "value": "loss_ry_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pred_reg[:, ry_res_l:ry_res_r] * ry_bin_onehot).sum(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "ry_res_norm_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ry_res_label / (angle_per_class / 2)",
                            "BinOp"
                        ],
                        [
                            "ry_res_label / (angle_per_class / 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "pred_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_130": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_172": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "diff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_371": {
                "variable": {
                    "value": "shift_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift_angle - np.pi * 0.25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "np.pi * 0.5 - 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_421": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_438": {
                "variable": {
                    "value": "neg_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - gt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_599": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_110": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "diff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_112": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "input - target",
                            "BinOp"
                        ],
                        [
                            "diff * self.code_weights.view(1, 1, -1)",
                            "BinOp"
                        ],
                        [
                            "diff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "n < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.code_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_236": {
                "input": {
                    "value": "pred_box_corners - gt_box_corners",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_237": {
                "input": {
                    "value": "pred_box_corners - gt_box_corners_flip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_326": {
                "input": {
                    "value": "iou_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iou_preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_328": {
                "input": {
                    "value": "cls_valid_mask.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log1p_49": {
                "input": {
                    "value": "torch.exp(-torch.abs(input))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_68": {
                "input": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target * (1.0 - pred_sigmoid) + (1.0 - target) * pred_sigmoid",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_130": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_172": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_213": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.isnan(target), input, target)",
                            "Call"
                        ],
                        [
                            "target.argmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_421": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_495": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_flat[mask_flat]",
                            "Subscript"
                        ],
                        [
                            "pred_flat[mask_flat]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_flat[mask_flat]",
                            "Subscript"
                        ],
                        [
                            "target_flat[mask_flat]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dot_602": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(lovasz_grad(fg_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_645": {
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels != ignore",
                            "Compare"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_645": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_48": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "-torch.abs(input)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_444": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_utils._transpose_and_gather_feat(output, ind)",
                            "Call"
                        ],
                        [
                            "center_utils._transpose_and_gather_feat(output, ind)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_444": {
                "input": {
                    "value": "1 - pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l1_loss_497": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_flat[mask_flat]",
                            "Subscript"
                        ],
                        [
                            "pred_flat[mask_flat]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_flat[mask_flat]",
                            "Subscript"
                        ],
                        [
                            "target_flat[mask_flat]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_445": {
                "input": {
                    "value": "1 - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_445": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "center_utils._transpose_and_gather_feat(output, ind)",
                            "Call"
                        ],
                        [
                            "center_utils._transpose_and_gather_feat(output, ind)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_49": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pcdet/utils/misc.py": {
        "torch": {
            "tensor_106": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_357": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "padded_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_119": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_321": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_322": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_337": {
                "variable": {
                    "value": "max_size_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([img.shape[i] for img in tensor_list]).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_349": {
                "variable": {
                    "value": "padded_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor_list, tensor, mask)",
                            "Call"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1], 0, padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_352": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_353": {
                "variable": {
                    "value": "padded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(tensor_list, tensor, mask)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(img[0], dtype=torch.int, device=img.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, padding[2], 0, padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_421": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_403": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_117": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_435": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_459": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(size_list, tensor_list)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_337": {
                "tensors": {
                    "value": "[img.shape[i] for img in tensor_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_memory_allocated_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pcdet/utils/spconv_utils.py": {
        "torch": {
            "arange_18": {
                "variable": {
                    "value": "point_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "indices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_tensor.indices.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_5": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "point_inds.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "point_inds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/demo.py": {
        "torch": {
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/eval_utils/eval_utils.py": {
        "torch": {
            "device_count_42": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_44": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/eval_utils/mapvisulize_utils.py": {
        "torch": {
            "adaptive_avg_pool2d_19": {
                "variable": {
                    "value": "channel_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_map.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "feature_map",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "reduced_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(channel_weights * feature_map).sum(dim=1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.relu(reduced_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_28": {
                "variable": {
                    "value": "a_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(channel_weights * feature_map).sum(dim=1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.relu(reduced_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_29": {
                "variable": {
                    "value": "a_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reduced_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(channel_weights * feature_map).sum(dim=1).squeeze(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.relu(reduced_map)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "DistributedDataParallel_166": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_network(model_cfg=cfg.MODEL, num_class=len(cfg.CLASS_NAMES), dataset=train_set)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[cfg.LOCAL_RANK % torch.cuda.device_count()], find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[cfg.LOCAL_RANK % torch.cuda.device_count()]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_utils/optimization/__init__.py": {
        "torch": {
            "Adam_13": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optim_cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_73": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=optim_cfg.LR, weight_decay=optim_cfg.WEIGHT_DECAY)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=optim_cfg.LR, weight_decay=optim_cfg.WEIGHT_DECAY, momentum=optim_cfg.MOMENTUM)",
                            "Call"
                        ],
                        [
                            "OptimWrapper.create(optimizer_func, 0.003, get_layer_groups(model), wd=optim_cfg.WEIGHT_DECAY, true_wd=True, bn_wd=True)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lbmd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_lbmd",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_epoch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_15": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "optim_cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "optim_cfg.WEIGHT_DECAY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "optim_cfg.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "*flatten_model(m)",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_utils/optimization/fastai_optim.py": {
        "torch": {
            "Sequential_23": {
                "*args": {
                    "value": "*l2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "parameters_to_vector_35": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[param.data.float() for param in lg]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "master_params",
                            "variable"
                        ],
                        [
                            "parameters_to_vector([param.data.float() for param in lg])",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(mp, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "parameters_to_vector_54": {
                "parameters": {
                    "value": "[p.grad.data.float() for p in model_group]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train_utils/optimization/learning_schedules_fastai.py": {
        "torch": {}
    },
    "tools/train_utils/train_utils.py": {
        "torch": {
            "save_152": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}.pth'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__43": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "optim_cfg.GRAD_NORM_CLIP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_149": {
                "obj": {
                    "value": "{'optimizer_state': optimizer_state}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}_optim.pth'.format(filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/visual_utils/visualize_utils.py": {
        "torch": {
            "cos_30": {
                "variable": {
                    "value": "cosa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_31": {
                "variable": {
                    "value": "sina",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_numpy_to_torch(angle)",
                            "Call"
                        ],
                        [
                            "angle",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points[:, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "rot_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((cosa, sina, zeros, -sina, cosa, zeros, zeros, zeros, ones), dim=1).view(-1, 3, 3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_40": {
                "variable": {
                    "value": "points_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points_rot, points[:, :, 3:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_15": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(bv_range[0], bv_range[2], grid_size)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}