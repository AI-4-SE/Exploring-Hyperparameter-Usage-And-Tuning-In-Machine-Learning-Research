{
    "acquisitionScene.py": {
        "tensorflow": {
            "expand_dims_19": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_92": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(surfaceArray, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(surfaceArray, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_103": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_104": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_127": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_128": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_133": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_135": {
                "variable": {
                    "value": "currentLightPos2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings - 1, lowEps=minEps, highEps=maxEps) * lightDistance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[currentLightPos, currentLightPos2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_140": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_153": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[currentViewPos, currentViewPos2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_157": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_163": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_166": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_167": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_171": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, viewDistance]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_175": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_176": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "randomViewHemisphereOneSurface(batchSize, nbRenderings, useAugmentation)",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "fixedView()",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.25, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, tf.ones([batchSize, 1, 1]) * tf.expand_dims(viewDistanceLocal[:, 0, :], axis=1)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentViewPos, currentViewPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, viewDistance])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_181": {
                "variable": {
                    "value": "currentConeTargetPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[currentConeTargetPos, tf.zeros([batchSize, nbRenderings, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_183": {
                "variable": {
                    "value": "currentConeTargetPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentConeTargetPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedConeLightTargets(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.random_normal([batchSize, nbRenderings, 2], 0.0, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentConeTargetPos, tf.zeros([batchSize, nbRenderings, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "currentConeTargetPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentConeTargetPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedConeLightTargets(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.random_normal([batchSize, nbRenderings, 2], 0.0, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentConeTargetPos, tf.zeros([batchSize, nbRenderings, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_185": {
                "variable": {
                    "value": "currentConeTargetPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentConeTargetPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomConeLightTarget(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedConeLightTargets(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.random_normal([batchSize, nbRenderings, 2], 0.0, 0.25, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentConeTargetPos, tf.zeros([batchSize, nbRenderings, 1])], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentConeTargetPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_191": {
                "variable": {
                    "value": "ambiantDir",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ambiantDir",
                    "type": "Call",
                    "possible_values": [
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, 1, lowEps=minEps, highEps=0.2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "variable": {
                    "value": "ambiantDir",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ambiantDir",
                    "type": "Call",
                    "possible_values": [
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, 1, lowEps=minEps, highEps=0.2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_193": {
                "variable": {
                    "value": "ambiantDir",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ambiantDir",
                    "type": "Call",
                    "possible_values": [
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, 1, lowEps=minEps, highEps=0.2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(ambiantDir, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_196": {
                "variable": {
                    "value": "ambiantPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ambiantPos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ambiantDir * tf.exp(tf.random_normal((), np.log(30.0), 0.15, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.tile(ambiantPos, [1, tf.shape(currentLightPos)[1], 1, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, tf.shape(currentLightPos)[1], 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "variable": {
                    "value": "newTargets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "newTargets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "variable": {
                    "value": "newTargets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "newTargets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_233": {
                "variable": {
                    "value": "newTargets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "newTargets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "variable": {
                    "value": "newTargets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "newTargets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[[0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [-0.5, -0.5, 0.0], [0.4, 0.4, 0.0], [-0.7, 0.1, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(newTargets, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_225": {
                "value": {
                    "value": "coords",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate([np.expand_dims(x, axis=1), np.expand_dims(y, axis=1), np.expand_dims(z, axis=1)], axis=1)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(coords, axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(coords, axis=-2)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(coords, axis=-2)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(coords, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "shape": {
                    "value": "[batchSize, nbRenderings, 1, 1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_133": {
                "values": {
                    "value": "[currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_163": {
                "values": {
                    "value": "[currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_195": {
                "x": {
                    "value": "tf.random_normal((), np.log(30.0), 0.15, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_148": {
                "shape": {
                    "value": "[batchSize, nbRenderings, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "shape": {
                    "value": "[batchSize, nbRenderings, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_150": {
                "shape": {
                    "value": "[batchSize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_150": {
                "input": {
                    "value": "viewDistanceLocal[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fullRandomLightsSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fullRandomLightsHemisphere(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "randomLightsHemisphereOneSurface(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "fixedLightAngles(batchSize, nbRenderings)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.5) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=0.95) * lightDistance",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(helpers.tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=minEps, highEps=maxEps) * lightDistance, axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, 1, 2], -0.75, 0.75, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, 1, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([currentLightPos, currentLightPos2], axis=1)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.concat([currentLightPos, tf.ones([batchSize, nbRenderings, 1]) * lightDistance], axis=-1), axis=-2)",
                            "Call"
                        ],
                        [
                            "simulateFlash(currentLightPos)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_133": {
                "shape": {
                    "value": "[batchSize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_163": {
                "shape": {
                    "value": "[batchSize, nbRenderings, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dataReader.py": {
        "tensorflow": {
            "read_file_89": {
                "variable": {
                    "value": "material_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "decode_image_90": {
                "variable": {
                    "value": "decodedInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "material_string",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_91": {
                "variable": {
                    "value": "floatMaterial",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "decodedInput",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_image(material_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(image_string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_92": {
                "variable": {
                    "value": "assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(floatMaterial)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "message": {
                    "value": "image does not have 3 channels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.split(floatMaterial, self.nbTargetsToRead, axis=1, name='Split_input_data1')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "read_file_104": {
                "variable": {
                    "value": "image_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "decode_image_105": {
                "variable": {
                    "value": "decodedInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(material)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_106": {
                "variable": {
                    "value": "floatInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "decodedInput",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_image(material_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(image_string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_107": {
                "variable": {
                    "value": "assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(floatInput)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "message": {
                    "value": "image does not have 3 channels",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_114": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "floatInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_122": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(floatMaterial, self.nbTargetsToRead, axis=1, name='Split_input_data1'), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(input))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(targets, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(targets, (self.nbTargetsToRead, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "helpers.target_deshape(targetstoRender, self.nbTargetsToRead)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_123": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stack(tf.split(floatMaterial, self.nbTargetsToRead, axis=1, name='Split_input_data1'), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(input))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(targets, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(targets, (self.nbTargetsToRead, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "helpers.target_deshape(targetstoRender, self.nbTargetsToRead)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(self.nbTargetsToRead, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "read_file_129": {
                "variable": {
                    "value": "image_string",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "material",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_image_130": {
                "variable": {
                    "value": "decodedInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_string",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.read_file(filename)",
                            "Call"
                        ],
                        [
                            "tf.read_file(material)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_131": {
                "variable": {
                    "value": "floatMaterial",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "decodedInput",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.decode_image(material_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(image_string)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(image_string)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_167": {
                "variable": {
                    "value": "self.gammaCorrectedInputsBatch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "helpers.generateInputRenderings(rendererInstance, targetstoRender, self.batchSize, nbRenderings, surfaceArray, renderingScene, jitterLightPos, jitterViewPos, self.useAmbientLight, useAugmentationInRenderings=self.useAugmentationInRenderings)",
                            "Call"
                        ],
                        [
                            "tf.pow(inputs, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(inputs)",
                            "Call"
                        ],
                        [
                            "helpers.preprocess(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_169": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "helpers.generateInputRenderings(rendererInstance, targetstoRender, self.batchSize, nbRenderings, surfaceArray, renderingScene, jitterLightPos, jitterViewPos, self.useAmbientLight, useAugmentationInRenderings=self.useAugmentationInRenderings)",
                            "Call"
                        ],
                        [
                            "tf.pow(inputs, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(inputs)",
                            "Call"
                        ],
                        [
                            "helpers.preprocess(inputs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_180": {
                "variable": {
                    "value": "filenamesTensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pathList",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_210": {
                "variable": {
                    "value": "inputs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ],
                        [
                            "helpers.generateInputRenderings(rendererInstance, targetstoRender, self.batchSize, nbRenderings, surfaceArray, renderingScene, False, False, self.useAmbientLight, useAugmentationInRenderings=self.useAugmentationInRenderings)",
                            "Call"
                        ],
                        [
                            "tf.pow(inputs_batch, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(inputs_batch)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_225": {
                "variable": {
                    "value": "filenamesTensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pathList",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "filenamesTensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pathList",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_326": {
                "variable": {
                    "value": "self.gammaCorrectedInputsBatch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ],
                        [
                            "helpers.generateInputRenderings(rendererInstance, targetstoRender, self.batchSize, nbRenderings, surfaceArray, renderingScene, False, False, self.useAmbientLight, useAugmentationInRenderings=self.useAugmentationInRenderings)",
                            "Call"
                        ],
                        [
                            "tf.pow(inputs_batch, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(inputs_batch)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_328": {
                "variable": {
                    "value": "inputs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ],
                        [
                            "helpers.generateInputRenderings(rendererInstance, targetstoRender, self.batchSize, nbRenderings, surfaceArray, renderingScene, False, False, self.useAmbientLight, useAugmentationInRenderings=self.useAugmentationInRenderings)",
                            "Call"
                        ],
                        [
                            "tf.pow(inputs_batch, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(inputs_batch)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "2.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_344": {
                "variable": {
                    "value": "inputs_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ],
                        [
                            "helpers.generateInputRenderings(rendererInstance, targetstoRender, self.batchSize, nbRenderings, surfaceArray, renderingScene, False, False, self.useAmbientLight, useAugmentationInRenderings=self.useAugmentationInRenderings)",
                            "Call"
                        ],
                        [
                            "tf.pow(inputs_batch, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(inputs_batch)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(inputs_batch, [1])",
                            "Call"
                        ],
                        [
                            "inputs_batch[:, :, xyCropping[0]:xyCropping[0] + self.tileSize, xyCropping[0]:xyCropping[0] + self.tileSize, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_94": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_98": {
                "value": {
                    "value": "floatMaterial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nbTargetsToRead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "Split_input_data1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_121": {
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pow(floatInput, 2.2)",
                            "Call"
                        ],
                        [
                            "helpers.logTensor(input)",
                            "Call"
                        ],
                        [
                            "helpers.preprocess(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_133": {
                "value": {
                    "value": "floatMaterial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "self.nbTargetsToRead",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "Split_input_data1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_223": {
                "name": {
                    "value": "load_images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_273": {
                "name": {
                    "value": "load_images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_301": {
                "input": {
                    "value": "helpers.generate_perlin_noise_2d((inputRealSize, inputRealSize), (1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_304": {
                "variable": {
                    "value": "perlinNoise",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "perlinNoise",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(helpers.generate_perlin_noise_2d((inputRealSize, inputRealSize), (1, 1)), axis=-1), axis=0)",
                            "Call"
                        ],
                        [
                            "(perlinNoise + 1.0) * 0.5",
                            "BinOp"
                        ],
                        [
                            "perlinNoise >= threshold",
                            "Compare"
                        ],
                        [
                            "tf.cast(perlinNoise, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_92": {
                "input": {
                    "value": "floatMaterial",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_107": {
                "input": {
                    "value": "floatInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.convert_image_dtype(decodedInput, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helpers.py": {
        "tensorflow": {
            "sqrt_24": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([batchSize, nbRenderings, 1], 0.0 + lowEps, 1.0 - highEps, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_29": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - tf.square(r)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "finalVec",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y, z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_45": {
                "variable": {
                    "value": "target_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nbTargets",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_54": {
                "variable": {
                    "value": "maxValue",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_60": {
                "variable": {
                    "value": "Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(tensor), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "multiplier",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "multiplier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1.0, 1.0, 0.9, 1.0]",
                            "List"
                        ],
                        [
                            "tf.reshape(multiplier, [1, 4, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 4, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "addition",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "addition",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.0, 0.0, 0.1, 0.0]",
                            "List"
                        ],
                        [
                            "tf.reshape(addition, [1, 4, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 4, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_99": {
                "variable": {
                    "value": "final",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(normals, axis=1), mixedRest]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_106": {
                "variable": {
                    "value": "XsurfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.lin_space(-1.0, 1.0, totalSize)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_107": {
                "variable": {
                    "value": "XsurfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XsurfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.lin_space(-1.0, 1.0, totalSize), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(XsurfaceArray, [totalSize, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(XsurfaceArray, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[totalSize, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_109": {
                "variable": {
                    "value": "XsurfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XsurfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.lin_space(-1.0, 1.0, totalSize), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(XsurfaceArray, [totalSize, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(XsurfaceArray, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_110": {
                "variable": {
                    "value": "YsurfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "YsurfaceArray",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1 * tf.transpose(XsurfaceArray)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(YsurfaceArray, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "surfaceArray",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[XsurfaceArray, YsurfaceArray, tf.zeros([totalSize, totalSize, 1], dtype=tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "input": {
                    "value": "surfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat([XsurfaceArray, YsurfaceArray, tf.zeros([totalSize, totalSize, 1], dtype=tf.float32)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(surfaceArray, axis=0), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_127": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "grid",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "np.transpose(np.meshgrid(np.arange(0, res[0], delta[0]), np.arange(0, res[1], delta[1])), (1, 2, 0)) % 1",
                            "BinOp"
                        ],
                        [
                            "grid.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "grid * 3.0",
                            "BinOp"
                        ],
                        [
                            "tf.constant(grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_130": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.math.cos(angles), tf.math.sin(angles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_131": {
                "variable": {
                    "value": "g00",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients[0:-1, 0:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(d[0], d[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_132": {
                "variable": {
                    "value": "g10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients[1:, 0:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(d[0], d[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_133": {
                "variable": {
                    "value": "g01",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients[0:-1, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(d[0], d[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_134": {
                "variable": {
                    "value": "g11",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients[1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(d[0], d[1], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "variable": {
                    "value": "n00",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grid * g00",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "variable": {
                    "value": "n10",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((grid[:, :, 0] - 1, grid[:, :, 1]), axis=-1) * g10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "variable": {
                    "value": "n01",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((grid[:, :, 0], grid[:, :, 1] - 1), axis=-1) * g01",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "variable": {
                    "value": "n11",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.stack((grid[:, :, 0] - 1, grid[:, :, 1] - 1), axis=-1) * g11",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_148": {
                "variable": {
                    "value": "randomPerturbation",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.random_normal([batchSize, nbRenderings, 1, 1, 1, 3], mean, stddev, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.05",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_201": {
                "variable": {
                    "value": "renderings",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "renderings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rendererInstance.tf_Render(material, wi, wo, currentConeTargetPos, multiLight=True, currentLightPos=currentLightPos, lossRendering=False, isAmbient=False, useAugmentation=useAugmentation)[0]",
                            "Subscript"
                        ],
                        [
                            "renderings + renderingAmbient",
                            "BinOp"
                        ],
                        [
                            "addNoise(renderings)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(renderings, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.pow(renderings, 0.4545)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(convert(renderings), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_202": {
                "variable": {
                    "value": "renderings",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "renderings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rendererInstance.tf_Render(material, wi, wo, currentConeTargetPos, multiLight=True, currentLightPos=currentLightPos, lossRendering=False, isAmbient=False, useAugmentation=useAugmentation)[0]",
                            "Subscript"
                        ],
                        [
                            "renderings + renderingAmbient",
                            "BinOp"
                        ],
                        [
                            "addNoise(renderings)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(renderings, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.pow(renderings, 0.4545)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(convert(renderings), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_204": {
                "variable": {
                    "value": "renderings",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "convert(renderings)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_208": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "renderings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rendererInstance.tf_Render(material, wi, wo, currentConeTargetPos, multiLight=True, currentLightPos=currentLightPos, lossRendering=False, isAmbient=False, useAugmentation=useAugmentation)[0]",
                            "Subscript"
                        ],
                        [
                            "renderings + renderingAmbient",
                            "BinOp"
                        ],
                        [
                            "addNoise(renderings)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(renderings, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.pow(renderings, 0.4545)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(convert(renderings), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_209": {
                "variable": {
                    "value": "stddevNoise",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal((), mean=np.log(0.005), stddev=0.3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "variable": {
                    "value": "wi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "currentLightPos - surfaceArray",
                            "BinOp"
                        ],
                        [
                            "currentLightPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(wi, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wi, axis=2)",
                            "Call"
                        ],
                        [
                            "currentLightPos - surfaceArray",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "variable": {
                    "value": "wi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "currentLightPos - surfaceArray",
                            "BinOp"
                        ],
                        [
                            "currentLightPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(wi, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wi, axis=2)",
                            "Call"
                        ],
                        [
                            "currentLightPos - surfaceArray",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_222": {
                "variable": {
                    "value": "wo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "currentViewPos - surfaceArray",
                            "BinOp"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(wo, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wo, axis=2)",
                            "Call"
                        ],
                        [
                            "currentViewPos - surfaceArray",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_223": {
                "variable": {
                    "value": "wo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "currentViewPos - surfaceArray",
                            "BinOp"
                        ],
                        [
                            "currentViewPos",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(wo, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(wo, axis=2)",
                            "Call"
                        ],
                        [
                            "currentViewPos - surfaceArray",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_236": {
                "variable": {
                    "value": "currentShift",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.random_uniform([batchSize, nbRenderings, 2], -1.0, 1.0), tf.zeros([batchSize, nbRenderings, 1], dtype=tf.float32) + 0.0001]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_241": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "jitterPosAround(batchSize, nbRenderings, currentViewPos, 0.0, 0.03)",
                            "Call"
                        ],
                        [
                            "currentLightPos",
                            "Name"
                        ],
                        [
                            "tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=0.001, highEps=0.1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(currentViewDir, tf_generate_distance(batchSize, nbRenderings)) + currentShift",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_242": {
                "variable": {
                    "value": "currentViewPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentViewPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "jitterPosAround(batchSize, nbRenderings, currentViewPos, 0.0, 0.03)",
                            "Call"
                        ],
                        [
                            "currentLightPos",
                            "Name"
                        ],
                        [
                            "tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=0.001, highEps=0.1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(currentViewDir, tf_generate_distance(batchSize, nbRenderings)) + currentShift",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentViewPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_244": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "jitterPosAround(batchSize, nbRenderings, currentLightPos, 0.0, 0.01)",
                            "Call"
                        ],
                        [
                            "tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=0.001, highEps=0.1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(currentLightDir, tf_generate_distance(batchSize, nbRenderings)) + currentShift",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_245": {
                "variable": {
                    "value": "currentLightPos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "currentLightPos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "jitterPosAround(batchSize, nbRenderings, currentLightPos, 0.0, 0.01)",
                            "Call"
                        ],
                        [
                            "tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=0.001, highEps=0.1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(currentLightDir, tf_generate_distance(batchSize, nbRenderings)) + currentShift",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(currentLightPos, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_256": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "save_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_285": {
                "variable": {
                    "value": "normalShape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "partialOutputedNormals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, :, :, 0:2] * 3.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_288": {
                "variable": {
                    "value": "tmpNormals",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "newShape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[normalShape[0], normalShape[1], normalShape[2], 1]",
                            "List"
                        ],
                        [
                            "tf.concat([[shape[0] * shape[1]], shape[2:]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_291": {
                "variable": {
                    "value": "outputedRoughnessExpanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputedRoughness",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs[:, :, :, 5]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_295": {
                "variable": {
                    "value": "tensors_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "splitAmount",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axisToSplit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_306": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "tensors_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(tensor, splitAmount, axis=axisToSplit)",
                            "Call"
                        ],
                        [
                            "[tf.squeeze(tensor, axis=1) for tensor in tensors_list]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_307": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(tensors_list, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_308": {
                "variable": {
                    "value": "newShape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[shape[0] * shape[1]], shape[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_309": {
                "variable": {
                    "value": "tensors_reshaped",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(tensors_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "newShape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[normalShape[0], normalShape[1], normalShape[2], 1]",
                            "List"
                        ],
                        [
                            "tf.concat([[shape[0] * shape[1]], shape[2:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_318": {
                "variable": {
                    "value": "targetsList",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images[1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_319": {
                "variable": {
                    "value": "inputsList",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images[0]",
                            "Subscript"
                        ],
                        [
                            "deprocess(inputs)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_34": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "2.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_37": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "tf.unstack(targetBatch, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_46": {
                "values": {
                    "value": "target_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(target, nbTargets, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "gaussian",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_normal([batchSize, nbRenderings, 1], 0.5, 0.75, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_61": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_sum(tf.square(tensor), axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_66": {
                "input_tensor": {
                    "value": "tf.multiply(tensorA, tensorB)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_76": {
                "t": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_195": {
                "variable": {
                    "value": "renderingAmbient",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "renderingAmbient",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rendererInstance.tf_Render(material, wiAmbient, wo, None, multiLight=True, currentLightPos=ambientLightPos, lossRendering=False, isAmbient=True, useAugmentation=useAugmentation)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(renderingAmbient, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.pow(renderingAmbient, 0.4545)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(convert(renderingAmbient), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_196": {
                "variable": {
                    "value": "renderingAmbient",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "renderingAmbient",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rendererInstance.tf_Render(material, wiAmbient, wo, None, multiLight=True, currentLightPos=ambientLightPos, lossRendering=False, isAmbient=True, useAugmentation=useAugmentation)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(renderingAmbient, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.pow(renderingAmbient, 0.4545)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(convert(renderingAmbient), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_image_dtype_197": {
                "variable": {
                    "value": "renderingAmbient",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "convert(renderingAmbient)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_267": {
                "var_list": {
                    "value": "restore_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_277": {
                "values": {
                    "value": "[normals[:, :, :, 0:2], diffuse, tf.expand_dims(roughness[:, :, :, 0], axis=-1), specular]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_292": {
                "values": {
                    "value": "[normNormals, outputedDiffuse, outputedRoughnessExpanded, outputedRoughnessExpanded, outputedRoughnessExpanded, outputedSpecular]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_300": {
                "variable": {
                    "value": "tensors_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tensors_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_321": {
                "name": {
                    "value": "targets",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "targetsList[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "nbTargets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "image_322": {
                "name": {
                    "value": "inputs",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "inputsList[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_323": {
                "name": {
                    "value": "outputs",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "images[2]",
                            "Subscript"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "nbTargets",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_324": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "convert_image_dtype_391": {
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tempLog(imageVal) for imageVal in image]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "saturate": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_9": {
                "name": {
                    "value": "preprocess",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_14": {
                "name": {
                    "value": "deprocess",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_27": {
                "x": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * math.pi * r2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_28": {
                "x": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * math.pi * r2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unstack_41": {
                "value": {
                    "value": "targetBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "tf.square(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_66": {
                "x": {
                    "value": "tensorA",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tensorB",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_73": {
                "x": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "expand_dims_90": {
                "input": {
                    "value": "tf.maximum(0.01, normal1Corrected[:, :, :, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "tf.maximum(0.01, normal2Corrected[:, :, :, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(mixedNormals), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "a": {
                    "value": "XsurfaceArray",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.lin_space(-1.0, 1.0, totalSize), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(XsurfaceArray, [totalSize, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(XsurfaceArray, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_129": {
                "shape": {
                    "value": "(res[0] + 1, res[1] + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_198": {
                "name": {
                    "value": "renderingAmbient",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "convert(renderingAmbient[0, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_234": {
                "input": {
                    "value": "[-1.0, -1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_238": {
                "x": {
                    "value": "currentViewDir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_generate_normalized_random_direction(batchSize, nbRenderings, lowEps=0.001, highEps=0.1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf_generate_distance(batchSize, nbRenderings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_239": {
                "x": {
                    "value": "currentLightDir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "currentViewDir * tf.expand_dims([-1.0, -1.0, 1.0], axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf_generate_distance(batchSize, nbRenderings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_290": {
                "values": {
                    "value": "[partialOutputedNormals, tmpNormals]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_302": {
                "variable": {
                    "value": "tensors_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tensors_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_304": {
                "variable": {
                    "value": "tensors_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tensors_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_305": {
                "variable": {
                    "value": "tensors_list[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tensors_list[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.4545",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_327": {
                "name": {
                    "value": "targets renderings",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.unstack(tf.log(targetsRenderings[0] + 0.01), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_328": {
                "name": {
                    "value": "outputs renderings",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.unstack(tf.log(outputsRenderings[0] + 0.01), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_332": {
                "name": {
                    "value": "transform_images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_334": {
                "name": {
                    "value": "convert_images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_339": {
                "name": {
                    "value": "convert_images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_361": {
                "name": {
                    "value": "encode_images",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_382": {
                "variable": {
                    "value": "imageValue",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "imageValue + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_19": {
                "x": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sqrt(r1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_60": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_90": {
                "x": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "normal1Corrected[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_91": {
                "x": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "normal2Corrected[:, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_94": {
                "input_tensor": {
                    "value": "tf.square(mixedNormals)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "normals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "normalizedNormals * 0.5 + 0.5",
                            "BinOp"
                        ],
                        [
                            "targets[:, :, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "shape": {
                    "value": "[totalSize, totalSize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_130": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * np.pi * tf.random.uniform((res[0] + 1, res[1] + 1), dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_130": {
                "x": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * np.pi * tf.random.uniform((res[0] + 1, res[1] + 1), dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_137": {
                "values": {
                    "value": "(grid[:, :, 0] - 1, grid[:, :, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_138": {
                "values": {
                    "value": "(grid[:, :, 0], grid[:, :, 1] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_139": {
                "values": {
                    "value": "(grid[:, :, 0] - 1, grid[:, :, 1] - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_277": {
                "input": {
                    "value": "roughness[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_297": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_327": {
                "value": {
                    "value": "tf.log(targetsRenderings[0] + 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_328": {
                "value": {
                    "value": "tf.log(outputsRenderings[0] + 0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_364": {
                "fn": {
                    "value": "tf.image.encode_png",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "converted_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deprocess_input(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_pngs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_365": {
                "fn": {
                    "value": "tf.image.encode_png",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "converted_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deprocess_image(targets, nbTargets, logAlbedo, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target_pngs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_366": {
                "fn": {
                    "value": "tf.image.encode_png",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "converted_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deprocess_image(outputs, nbTargets, logAlbedo, 3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "output_pngs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_367": {
                "fn": {
                    "value": "tf.image.encode_png",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "converted_gammaCorrectedInputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deprocess_input(gammaCorrectedInputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gammaInput_pngs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_368": {
                "fn": {
                    "value": "tf.image.encode_png",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "converted_outputs_gammad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deprocess_image(outputs, nbTargets, True, 3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gammaOutputs_pngs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_369": {
                "fn": {
                    "value": "tf.image.encode_png",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "converted_targets_gammad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deprocess_image(targets, nbTargets, True, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gammaTargets_pngs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_19": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_70": {
                "x": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_94": {
                "x": {
                    "value": "mixedNormals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * normal1Projected + (1.0 - alpha) * normal2Projected",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_236": {
                "shape": {
                    "value": "[batchSize, nbRenderings, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_327": {
                "x": {
                    "value": "targetsRenderings[0] + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_328": {
                "x": {
                    "value": "outputsRenderings[0] + 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_383": {
                "input_tensor": {
                    "value": "imageValue",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.log(imageValue + 0.01)",
                            "Call"
                        ],
                        [
                            "imageValue - tf.reduce_min(imageValue)",
                            "BinOp"
                        ],
                        [
                            "imageValue / tf.reduce_max(imageValue)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_384": {
                "input_tensor": {
                    "value": "imageValue",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.log(imageValue + 0.01)",
                            "Call"
                        ],
                        [
                            "imageValue - tf.reduce_min(imageValue)",
                            "BinOp"
                        ],
                        [
                            "imageValue / tf.reduce_max(imageValue)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "largeScale_net.py": {
        "tensorflow": {
            "ConfigProto_113": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_171": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Supervisor_179": {
                "variable": {
                    "value": "sv",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a.output_dir if a.summary_freq > 0 else None",
                            "IfExp"
                        ]
                    ]
                },
                "save_summaries_secs": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_108": {
                "seed": {
                    "value": "a.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_170": {
                "variable": {
                    "value": "parameter_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_prod(tf.shape(v)) for v in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_175": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "a.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "parameter_count",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_136": {
                "name": {
                    "value": "recurrentTest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RunOptions_247": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_248": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_prod_170": {
                "input_tensor": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_170": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "reduce_mean_9": {
                "variable": {
                    "value": "ssim",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.image.ssim_multiscale(x, y, scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_6": {
                "input_tensor": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_50": {
                "variable": {
                    "value": "outputsDiffuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epsilonL1 + helpers.deprocess(outputs[:, :, :, 3:6])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "outputsSpecular",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epsilonL1 + helpers.deprocess(outputs[:, :, :, 9:12])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_55": {
                "variable": {
                    "value": "targetsDiffuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epsilonL1 + helpers.deprocess(targets[:, :, :, 3:6])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_57": {
                "variable": {
                    "value": "targetsSpecular",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epsilonL1 + helpers.deprocess(targets[:, :, :, 9:12])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "targetsRendered",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[diffuses[0], speculars[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "outputsRendered",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[diffuses[1], speculars[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "reshapedTargetsRendering",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "targetsRenderings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(targetsRenderings.get_shape()[2]), int(targetsRenderings.get_shape()[3]), int(targetsRenderings.get_shape()[4])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "reshapedOutputsRendering",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputsRenderings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(outputsRenderings.get_shape()[2]), int(outputsRenderings.get_shape()[3]), int(outputsRenderings.get_shape()[4])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_98": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_107": {
                "variable": {
                    "value": "ema",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_110": {
                "variable": {
                    "value": "incr_global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_111": {
                "variable": {
                    "value": "self.trainOp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "update_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ema.apply([self.lossValue])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "incr_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.assign(global_step, global_step + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_6": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ssim_multiscale_9": {
                "img1": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "img2": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_val": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_99": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_76": {
                "x": {
                    "value": "reshapedOutputsRendering + epsilonRender",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_78": {
                "x": {
                    "value": "reshapedOutputsRendering + epsilonRender",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "model_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_103": {
                "variable": {
                    "value": "gen_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.beta1Adam",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "model_train0",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_bool",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "trainable_variables_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "expand_dims_26": {
                "input": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tfHelpers.fullyConnected(inputs, channels, False, 'fc_global_to_unet', 0.01)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_35": {
                "variable": {
                    "value": "(inputMean, inputVariance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "generator_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "trainableModel",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "GlobalToGenerator1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse_bool",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_129": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layers[-1], layers[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tfHelpers.conv(generator_inputs, self.ngf, stride=2)",
                            "Call"
                        ],
                        [
                            "tfHelpers.deconv(rectified, generator_outputs_channels)",
                            "Call"
                        ],
                        [
                            "output + lastGlobalNet",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tfHelpers.deconv(rectified, out_channels)",
                            "Call"
                        ],
                        [
                            "output + self.GlobalToGenerator(globalNetworkOutputs[-1], out_channels)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(output, rate=dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_29": {
                "x": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "globalNetwork_fc_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "encoder_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "encoder_8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "moments_85": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "convolved",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tfHelpers.conv(rectified, out_channels, stride=2)",
                            "Call"
                        ],
                        [
                            "tfHelpers.conv(rectified, self.ngf * 8, stride=2)",
                            "Call"
                        ],
                        [
                            "convolved + self.GlobalToGenerator(globalNetworkOutputs[-1], self.ngf * 8)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "nextGlobalInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.expand_dims(globalNetworkOutputs[-1], axis=1), axis=1), mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "decoder_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_29": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "selu_41": {
                "features": {
                    "value": "globalNetwork_fc_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tfHelpers.fullyConnected(globalNetworkInput, self.ngf * 2, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "'encoder_%d' % (len(layers) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "nextGlobalInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.expand_dims(globalNetworkOutputs[-1], axis=1), axis=1), mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "'globalNetwork_fc_%d' % (len(globalNetworkOutputs) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "'decoder_%d' % (skip_layer + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[layers[-1], layers[skip_layer]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_119": {
                "variable": {
                    "value": "nextGlobalInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tf.expand_dims(globalNetworkOutputs[-1], axis=1), axis=1), mean]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_123": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tfHelpers.conv(generator_inputs, self.ngf, stride=2)",
                            "Call"
                        ],
                        [
                            "tfHelpers.deconv(rectified, generator_outputs_channels)",
                            "Call"
                        ],
                        [
                            "output + lastGlobalNet",
                            "BinOp"
                        ],
                        [
                            "tf.tanh(output)",
                            "Call"
                        ],
                        [
                            "tfHelpers.deconv(rectified, out_channels)",
                            "Call"
                        ],
                        [
                            "output + self.GlobalToGenerator(globalNetworkOutputs[-1], out_channels)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(output, rate=dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "'globalNetwork_fc_%d' % (len(globalNetworkOutputs) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "selu_88": {
                "features": {
                    "value": "globalNetwork_fc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, self.ngf * 8, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, layer_specs[layerCount + 1], True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, layer_specs[layerCount], True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, out_channels, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "'globalNetwork_fc_%d' % (len(globalNetworkOutputs) + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "selu_75": {
                "features": {
                    "value": "globalNetwork_fc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, self.ngf * 8, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, layer_specs[layerCount + 1], True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, layer_specs[layerCount], True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, out_channels, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "globalNetworkOutputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "selu_121": {
                "features": {
                    "value": "globalNetwork_fc",
                    "type": "Call",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, self.ngf * 8, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, layer_specs[layerCount + 1], True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, layer_specs[layerCount], True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ],
                        [
                            "tfHelpers.fullyConnected(nextGlobalInput, out_channels, True, 'globalNetworkLayer' + str(len(globalNetworkOutputs) + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "globalNetworkOutputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "input": {
                    "value": "globalNetworkOutputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "renderer.py": {
        "tensorflow": {
            "square_16": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "roughness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 6:9]), 0.0, 1.0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(roughness, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(roughness, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_21": {
                "variable": {
                    "value": "sphg",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "(-5.55473 * VdotH - 6.98316) * VdotH",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "variable": {
                    "value": "diffuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 3:6]), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "svbrdf[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "variable": {
                    "value": "specular",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 9:12]), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_38": {
                "variable": {
                    "value": "roughness",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 6:9]), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_39": {
                "variable": {
                    "value": "roughness",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "roughness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 6:9]), 0.0, 1.0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(roughness, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(roughness, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_73": {
                "variable": {
                    "value": "resultShape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "specular_rendered",
                            "Name"
                        ],
                        [
                            "result + diffuse_rendered",
                            "BinOp"
                        ],
                        [
                            "result * lampFactor",
                            "BinOp"
                        ],
                        [
                            "result * tf.maximum(0.0, NdotL)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(result, axis=2) * 1.0",
                            "BinOp"
                        ],
                        [
                            "result / tf.expand_dims(tf.maximum(wiNorm[:, :, :, :, 2], 0.001), axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_46": {
                "variable": {
                    "value": "diffuse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diffuse",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 3:6]), 0.0, 1.0), axis=1)",
                            "Call"
                        ],
                        [
                            "diffuse + 0.15 * specular",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(diffuse, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_47": {
                "variable": {
                    "value": "normals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normals",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(svbrdf[:, :, :, 0:3], axis=1)",
                            "Call"
                        ],
                        [
                            "helpers.tf_Normalize(normals)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(normals, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "specular",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "specular",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 9:12]), 0.0, 1.0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(specular, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "variable": {
                    "value": "roughness",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roughness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 6:9]), 0.0, 1.0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(roughness, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(roughness, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_78": {
                "variable": {
                    "value": "distanceToConeCenter",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "helpers.tf_DotProduct(wiNorm, coneTargetNorm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_17": {
                "x": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(NdotH) * (tf.square(alpha) - 1.0) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_18": {
                "x": {
                    "value": "alpha * underD",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_28": {
                "x": {
                    "value": "NdotW * (1.0 - k) + k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_58": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "NdotH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "helpers.tf_DotProduct(normals, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_59": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "NdotV",
                    "type": "Name",
                    "possible_values": [
                        [
                            "helpers.tf_DotProduct(normals, woNorm)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_60": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "VdotH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "helpers.tf_DotProduct(woNorm, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_96": {
                "variable": {
                    "value": "lampIntensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lampIntensity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1.5",
                            "Constant"
                        ],
                        [
                            "tf.abs(tf.random_normal((resultShape[0], resultShape[1], 1, 1, 1), mean=5.0, stddev=0.15))",
                            "Call"
                        ],
                        [
                            "lampIntensity * autoExposure",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(tf.constant(5.0), [1, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.exp(tf.random_normal((resultShape[0], 1, 1, 1, 1), mean=tf.log(0.15), stddev=0.5))",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.constant(0.15), [1, 1, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lampIntensity, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "variable": {
                    "value": "lampDistance",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(wi), axis=-1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_115": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "NdotL",
                    "type": "Name",
                    "possible_values": [
                        [
                            "helpers.tf_DotProduct(normals, wiNorm)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_33": {
                "x": {
                    "value": "wiNorm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "helpers.tf_Normalize(wi)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "woNorm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "helpers.tf_Normalize(wo)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_82": {
                "variable": {
                    "value": "stdDevWholeBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal((), mean=-2.0, stddev=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_83": {
                "variable": {
                    "value": "lampIntensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal((resultShape[0], resultShape[1], 1, 1, 1), mean=5.0, stddev=0.15)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_85": {
                "variable": {
                    "value": "autoExposure",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal((), mean=np.log(1.0), stddev=0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "lampIntensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant(5.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "lampIntensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal((resultShape[0], 1, 1, 1, 1), mean=tf.log(0.15), stddev=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "lampIntensity",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant(0.15)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_105": {
                "variable": {
                    "value": "exponent",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_normal((), mean=np.log(5), stddev=0.15)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "specular_rendered",
                            "Name"
                        ],
                        [
                            "result + diffuse_rendered",
                            "BinOp"
                        ],
                        [
                            "result * lampFactor",
                            "BinOp"
                        ],
                        [
                            "result * tf.maximum(0.0, NdotL)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(result, axis=2) * 1.0",
                            "BinOp"
                        ],
                        [
                            "result / tf.expand_dims(tf.maximum(wiNorm[:, :, :, :, 2], 0.001), axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "input": {
                    "value": "tf.maximum(wiNorm[:, :, :, :, 2], 0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_25": {
                "x": {
                    "value": "roughness",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(helpers.squeezeValues(helpers.deprocess(svbrdf[:, :, :, 6:9]), 0.0, 1.0), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(roughness, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(roughness, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "input_tensor": {
                    "value": "tf.square(wi)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_110": {
                "x": {
                    "value": "distanceToConeCenter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, helpers.tf_DotProduct(wiNorm, coneTargetNorm))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "exponent",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "tf.exp(tf.random_normal((), mean=np.log(5), stddev=0.15))",
                            "Call"
                        ],
                        [
                            "5.0",
                            "Constant"
                        ],
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "maximum_119": {
                "x": {
                    "value": "wiNorm[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_17": {
                "x": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(roughness)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_88": {
                "value": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_93": {
                "value": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_100": {
                "x": {
                    "value": "wi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_91": {
                "x": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tfHelpers.py": {
        "tensorflow": {
            "moments_18": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_9": {
                "variable": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filterSize, filterSize, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, np.sqrt(2.0 / (int(in_channels) + int(out_channels))) * initScale) if useXavier else tf.random_normal_initializer(0, initScale)",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "pad_10": {
                "variable": {
                    "value": "padded_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(batch_input, [[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]], mode='REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', [filterSize, filterSize, in_channels, out_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(0, np.sqrt(2.0 / (int(in_channels) + int(out_channels))) * initScale) if useXavier else tf.random_normal_initializer(0, initScale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filter', [3, 3, in_channels, out_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, in_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "filter1",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filter1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 3, out_channels, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_44": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "resized_images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(batch_input, [in_height * 2, in_width * 2], method=tf.image.ResizeMethod.BILINEAR, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(resized_images, [[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.pad(conv, [[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]], mode='SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', [filterSize, filterSize, in_channels, out_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(0, np.sqrt(2.0 / (int(in_channels) + int(out_channels))) * initScale) if useXavier else tf.random_normal_initializer(0, initScale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('filter', [3, 3, in_channels, out_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_47": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(padded_input, filter, [1, stride, stride, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "conv + offset",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(padded, filter, [1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(padded, filter1, [1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(resized_images, [[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]], mode='REFLECT')",
                            "Call"
                        ],
                        [
                            "tf.pad(conv, [[0, 0], [paddingSize, paddingSize], [paddingSize, paddingSize], [0, 0]], mode='SYMMETRIC')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('filter1', [3, 3, out_channels, out_channels], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputChannels, outputDim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, initMultiplyer * tf.sqrt(1.0 / float(inputChannels)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_59": {
                "variable": {
                    "value": "weightsTiled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(weights, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchSize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(squeezedInput, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weightsTiled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(weights, axis=0), [batchSize, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(squeezedInput, axis=1), weightsTiled)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(outputs, [1])",
                            "Call"
                        ],
                        [
                            "outputs + tf.expand_dims(bias, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fullyConnected(inputs, channels, False, 'fullyConnected_global_to_unet', 0.01)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_83": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(input)",
                            "Call"
                        ],
                        [
                            "tf.identity(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_88": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(input)",
                            "Call"
                        ],
                        [
                            "tf.identity(input)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_100": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(input)",
                            "Call"
                        ],
                        [
                            "tf.identity(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(1.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "moments_105": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(input)",
                            "Call"
                        ],
                        [
                            "tf.identity(input)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_107": {
                "variable": {
                    "value": "normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(input)",
                            "Call"
                        ],
                        [
                            "tf.identity(input)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "offset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('offset', [1, 1, 1, out_channels], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('offset', [1, 1, 1, channels], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('offset', [channels], dtype=tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('scale', [1, 1, 1, channels], dtype=tf.float32, initializer=tf.random_normal_initializer(1.0, 0.02))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('scale', [channels], dtype=tf.float32, initializer=tf.random_normal_initializer(1.0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "variance_epsilon",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ],
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_7": {
                "name_or_scope": {
                    "value": "conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, out_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "lrelu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "deconv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "layerName",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "squeezedInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squeezedInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.squeeze(squeezedInput, [1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(squeezedInput, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "squeezedInput",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squeezedInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.squeeze(squeezedInput, [1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(squeezedInput, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[outputDim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.002)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "GlobalToGenerator1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "instancenorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "batchnorm",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(input)",
                            "Call"
                        ],
                        [
                            "tf.identity(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', [inputChannels, outputDim], dtype=tf.float32, initializer=tf.random_normal_initializer(0, initMultiplyer * tf.sqrt(1.0 / float(inputChannels))))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "squeezedInput",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.squeeze(squeezedInput, [1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(squeezedInput, [1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_32": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_37": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_38": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_58": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "initMultiplyer * tf.sqrt(1.0 / float(inputChannels))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', [outputDim], dtype=tf.float32, initializer=tf.random_normal_initializer(0, 0.002))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_87": {
                "mean": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_104": {
                "mean": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_9": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "initScale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_69": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.002",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "x": {
                    "value": "variance + variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_58": {
                "x": {
                    "value": "1.0 / float(inputChannels)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}