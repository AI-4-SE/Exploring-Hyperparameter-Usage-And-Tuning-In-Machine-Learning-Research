{
    "ex/instance-embedding/ex_text.py": {
        "sklearn": {},
        "torch": {
            "Embedding_93": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dataset_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_97": {
                "variable": {
                    "value": "model.embed_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "embed.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "embed_lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000000000.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_100": {
                "variable": {
                    "value": "model.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "dataset_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_117": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "confidence * outputs.logits",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.pop('labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_95": {
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ex/instance-embedding/core.py": {
        "torch": {
            "Embedding_7": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "c * F.softmax(t, dim=1) + (1 - c) * 1 / t.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_18": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ex/instance-embedding/ex_image.py": {
        "torch": {
            "DataLoader_137": {
                "variable": {
                    "value": "loader_tr",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loader_tr.dataset.dataset",
                            "Attribute"
                        ],
                        [
                            "add_noise(dataset_tr, transition_matrix)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_138": {
                "variable": {
                    "value": "loader_vl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_vl",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "loader_ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_ts",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Adam_147": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ExponentialLR_148": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(embed.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SGD_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LambdaLR_161": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(embed.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ],
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "model",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "embed.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LambdaLR_183": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(embed.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ],
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ]
                    ]
                }
            },
            "arange_205": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "len(loader_tr.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_158": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mnist.cnn(dim_output=dim_output).to(device)",
                            "Call"
                        ],
                        [
                            "resnet.resnet18(dim_output=dim_output).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "nn.Sequential(model, nn.BatchNorm1d(dim_output).to(device))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_173": {
                "num_features": {
                    "value": "dim_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_classes",
                            "Name"
                        ]
                    ]
                }
            },
            "DataLoader_237": {
                "dataset": {
                    "value": "dataset_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loader_tr.dataset.dataset",
                            "Attribute"
                        ],
                        [
                            "add_noise(dataset_tr, transition_matrix)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_80": {
                "*tensors": {
                    "value": "*load_all_data(dataset)",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "transition_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_identity(num_classes)",
                            "Call"
                        ],
                        [
                            "get_symmetric_noise(num_classes, 0.5)",
                            "Call"
                        ],
                        [
                            "get_transition_matrix()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_83": {
                "*tensors": {
                    "value": "*load_all_data(dataset)",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_115": {
                "start": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ex/instance-embedding/utils.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_8": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "ex/transition-matrix/core.py": {
        "torch": {
            "softmax_11": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_95": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.activation_output(t.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_112": {
                "variable": {
                    "value": "(idx1, idx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "t.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, num_pairs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nll_loss_58": {
                "input": {
                    "value": "torch.log(p_y + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "[Dirichlet(c).sample() for c in self.concentrations]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "nll_loss_90": {
                "input": {
                    "value": "torch.log(p_y + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_58": {
                "input": {
                    "value": "p_y + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "p_y + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dirichlet_85": {
                "concentration": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "ex/transition-matrix/ex.py": {
        "torch": {
            "DataLoader_126": {
                "variable": {
                    "value": "loader_tr",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_noise(dataset_tr)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "loader_ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_ts",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ExponentialLR_135": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SGD_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LambdaLR_147": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ],
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ]
                    ]
                }
            },
            "DataParallel_144": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mnist.cnn().to(device)",
                            "Call"
                        ],
                        [
                            "resnet.resnet18(dim_output=num_classes).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_165": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LambdaLR_167": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ],
                        [
                            "lambda i: np.interp([i], [0, num_iter_warmup, num_iter_total], [0, 1, 0])[0]",
                            "Lambda"
                        ]
                    ]
                }
            },
            "TensorDataset_79": {
                "*tensors": {
                    "value": "*load_all_data(dataset)",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ex/transition-matrix/ex_clothing1m.py": {
        "torch": {
            "DataLoader_97": {
                "variable": {
                    "value": "loader_tr",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(Path(data_dir) / folder_tr, transform=transform_tr)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "DistributedSampler(dataset_tr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "loader_ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(Path(data_dir) / folder_ts, transform=transform_ts)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "DistributedSampler(dataset_ts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "14",
                            "Constant"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_115": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "StepLR_120": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, momentum=momentum, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "step_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_iter_total / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "num_correct",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_state_dict_from_url(url, model_dir=model_dir, progress=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(model_dir) / 'pretrained.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{model_dir}/{save_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "set_device_256": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_97": {
                "dataset": {
                    "value": "dataset_tr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(Path(data_dir) / folder_tr, transform=transform_tr)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_98": {
                "dataset": {
                    "value": "dataset_ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ImageFolder(Path(data_dir) / folder_ts, transform=transform_ts)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_112": {
                "f": {
                    "value": "load_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{model_dir}/{load_name}'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "ex/transition-matrix/utils.py": {
        "torch": {
            "quantile_58": {
                "variable": {
                    "value": "threshold",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                },
                "q": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_59": {
                "condition": {
                    "value": "p >= threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(p)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "eye_22": {
                "n": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "m": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "transition_matrix",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "lio/losses/classification.py": {
        "torch": {
            "cross_entropy_9": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_34": {
                "variable": {
                    "value": "p_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_y0, p_y1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "p_y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_y0, p_y1, p_y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_67": {
                "variable": {
                    "value": "nll",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cross_entropy_79": {
                "variable": {
                    "value": "nll",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cross_entropy_80": {
                "variable": {
                    "value": "reg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "t.argmax(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_19": {
                "input": {
                    "value": "torch.log(p_y + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "nll_loss_35": {
                "input": {
                    "value": "torch.log(p_y + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "nll_loss_55": {
                "input": {
                    "value": "torch.log(p_y + 1e-32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_14": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_19": {
                "input": {
                    "value": "p_y + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_35": {
                "input": {
                    "value": "p_y + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "p_y + 1e-32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Categorical_68": {
                "probs": {
                    "value": "F.softmax(t, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_91": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lio/losses/regression.py": {
        "torch": {
            "cat_22": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_9": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ],
                        [
                            "t + torch.randn_like(t) * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mse_loss_23": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ],
                        [
                            "t + torch.randn_like(t) * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_28": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log1p_14": {
                "input": {
                    "value": "((t - y) / scale).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log1p_29": {
                "input": {
                    "value": "((t - y) / scale).pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_39": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * (1 + torch.erf((ts[0] - ts[1]) / (2 * scale)))",
                            "BinOp"
                        ],
                        [
                            "torch.atan((ts[0] - ts[1]) / (2 * scale)) / math.pi + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_47": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * (1 + torch.erf((ts[0] - ts[1]) / (2 * scale)))",
                            "BinOp"
                        ],
                        [
                            "torch.atan((ts[0] - ts[1]) / (2 * scale)) / math.pi + 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_54": {
                "input": {
                    "value": "(ts[0] - ts[1]) / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mse_loss_65": {
                "input": {
                    "value": "t.min(dim=1, keepdim=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mse_loss_76": {
                "input": {
                    "value": "t.max(dim=1, keepdim=True)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_like_64": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ],
                        [
                            "t + torch.randn_like(t) * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_75": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1).mean(dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ],
                        [
                            "t + torch.randn_like(t) * scale",
                            "BinOp"
                        ],
                        [
                            "torch.cat(ts, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_38": {
                "input": {
                    "value": "(ts[0] - ts[1]) / (2 * scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_46": {
                "input": {
                    "value": "(ts[0] - ts[1]) / (2 * scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lio/models/layers.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_planes)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_planes)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "planes",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lio/models/mnist.py": {
        "torch": {
            "Sequential_7": {
                "*args": {
                    "value": "FlattenLayer()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(1, 32, kernel_size=3, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "28 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "64 * 10 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "lio/models/resnet.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_17": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_output",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "lio/observations/observers.py": {
        "torch": {
            "stack_11": {
                "tensors": {
                    "value": "[f(*zs[i]) for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Categorical_17": {
                "probs": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randperm_34": {
                "n": {
                    "value": "len(zs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lio/utils/data/dataset.py": {
        "torch": {}
    },
    "lio/utils/data/load.py": {
        "torch": {
            "tensor_123": {
                "variable": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_10": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'mnist': datasets.MNIST, 'fashion-mnist': datasets.FashionMNIST, 'kmnist': datasets.KMNIST}[dataset_name]",
                            "Subscript"
                        ],
                        [
                            "{'cifar10': datasets.CIFAR10, 'cifar100': datasets.CIFAR100}[dataset_name]",
                            "Subscript"
                        ],
                        [
                            "[dataset_tr, dataset_ts]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lio/utils/data/sampler.py": {
        "torch": {
            "randint_11": {
                "high": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lio/utils/metrics.py": {
        "torch": {
            "cat_18": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_19": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v1.max().item() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "n2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "v2.max().item() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unique_30": {
                "variable": {
                    "value": "(pairs, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((v1, v2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "(conf, y_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(ts)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_36": {
                "variable": {
                    "value": "(conf, y_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "ece",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_39": {
                "variable": {
                    "value": "bins",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_30": {
                "tensors": {
                    "value": "(v1, v2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}