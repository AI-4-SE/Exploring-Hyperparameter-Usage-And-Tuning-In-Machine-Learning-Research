{
    "cluster.py": {
        "sklearn": {
            "KMeans_115": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "niter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "random_state": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "cluster_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(cluster_set, root=dataset.images_dir, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(np.random.choice(len(cluster_set), nIm, replace=False))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "models.create(args.arch, cut_at_pooling=True, log_dir='logs', branch_1_dim=args.branch_1_dim, branch_m_dim=args.branch_m_dim, branch_h_dim=args.branch_h_dim)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "get_model(args)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_99": {
                "variable": {
                    "value": "image_descriptors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_descriptors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(input)",
                            "Call"
                        ],
                        [
                            "F.normalize(image_descriptors, p=2, dim=1).view(input.size(0), encoder_dim, -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_99": {
                "variable": {
                    "value": "image_descriptors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "haf/evaluators.py": {
        "sklearn": {},
        "torch": {
            "cat_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[f].unsqueeze(0) for (f, _, _, _) in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[f].unsqueeze(0) for (f, _, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_35": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "F.normalize(outputs, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_vlad, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(x_pool, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "extract_cnn_feature(model, imgs, vlad, gpu=gpu)",
                            "Call"
                        ],
                        [
                            "pca.infer(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features).cuda(gpu)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, query, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, dataset, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "bc_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features).cuda(gpu)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, query, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, dataset, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(features.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_31": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_129": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_129": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_130": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_130": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_82": {
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features).cuda(gpu)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, query, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, dataset, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "all_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.empty_like(features) for _ in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(all_features).cpu()[:len(dataset)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "broadcast_99": {
                "tensor": {
                    "value": "bc_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(features).cuda(gpu)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(world_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_114": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_114": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features).cuda(gpu)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, query, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ],
                        [
                            "extract_features(self.model, query_loader, dataset, vlad=vlad, pca=pca, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_115": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "haf/pca.py": {
        "sklearn": {},
        "torch": {
            "symeig_53": {
                "variable": {
                    "value": "(L, U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(x, x.t()) / (nPoints - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(x.t(), x) / (nPoints - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "Utmu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.mean(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "h5file['.']['mu'][...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "U.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "-Utmu",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_119": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.view(N, D, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_121": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.conv2d(data, self.weight, bias=self.bias, stride=1, padding=0).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(output, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_56": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(L, 0, k_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "k_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.argsort(L, descending=True)[:self.pca_n_components]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_57": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "U",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(U, 1, k_indices)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, torch.matmul(U, torch.diag(1.0 / torch.sqrt(lams)) / np.sqrt(nPoints - 1)))",
                            "Call"
                        ],
                        [
                            "h5file['.']['U'][...][:, :self.pca_n_components]",
                            "Subscript"
                        ],
                        [
                            "np.matmul(U, np.diag(1.0 / np.sqrt(lams)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "k_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.argsort(L, descending=True)[:self.pca_n_components]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "input": {
                    "value": "U",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.index_select(U, 1, k_indices)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, torch.matmul(U, torch.diag(1.0 / torch.sqrt(lams)) / np.sqrt(nPoints - 1)))",
                            "Call"
                        ],
                        [
                            "h5file['.']['U'][...][:, :self.pca_n_components]",
                            "Subscript"
                        ],
                        [
                            "np.matmul(U, np.diag(1.0 / np.sqrt(lams)))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.diag(1.0 / torch.sqrt(lams)) / np.sqrt(nPoints - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.t()",
                            "Call"
                        ],
                        [
                            "x - mu",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "input": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.t()",
                            "Call"
                        ],
                        [
                            "x - mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argsort_55": {
                "input": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.index_select(L, 0, k_indices)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_63": {
                "input": {
                    "value": "1.0 / torch.sqrt(lams)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_63": {
                "input": {
                    "value": "lams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "L",
                            "Name"
                        ],
                        [
                            "h5file['.']['lams'][...][:self.pca_n_components]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "haf/utils/data/dataset.py": {
        "sklearn": {
            "NearestNeighbors_26": {
                "variable": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "Feature_branch.py": {
        "torch": {
            "device_count_47": {
                "variable": {
                    "value": "args.ngpus_per_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_265": {
                "variable": {
                    "value": "train_data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(arch_train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "dist.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_266": {
                "variable": {
                    "value": "test_data_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(arch_test_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "dist.get_rank()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_275": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(arch_train_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_data_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset, num_replicas=args.world_size, rank=dist.get_rank())",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_280": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(arch_test_dir, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_data_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedSampler(test_dataset, num_replicas=args.world_size, rank=dist.get_rank())",
                            "Call"
                        ]
                    ]
                }
            },
            "device_322": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:%d % args.gpu if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_326": {
                "variable": {
                    "value": "haf",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "haf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "HAF(lower_branch, middle_branch, higher_branch, args)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(haf, device_ids=[args.gpu], output_device=args.gpu, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_331": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_332": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, haf.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_device_50": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "lower_branch",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.conv_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "middle_branch",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "higher_branch",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_115": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=args.branch_1_dim + args.branch_m_dim + args.branch_h_dim, out_features=2048, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_x, m_x, h_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_204": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "UpsamplingNearest2d_93": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.branch_1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_98": {
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.branch_m_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_103": {
                "scale_factor": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.branch_h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "args.branch_1_dim + args.branch_m_dim + args.branch_h_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "model.module.conv_1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(weight_save_root, 'haf_vgg16_conv_1_dim-%d.pth' % args.branch_1_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_189": {
                "obj": {
                    "value": "model.module.conv_m.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(weight_save_root, 'haf_vgg16_conv_m_dim-%d.pth' % args.branch_m_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_190": {
                "obj": {
                    "value": "model.module.conv_h.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(weight_save_root, 'haf_vgg16_conv_h_dim-%d.pth' % args.branch_h_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "haf/datasets/pitts.py": {
        "torch": {}
    },
    "haf/models/netvlad.py": {
        "torch": {
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.centroids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(num_clusters, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "soft_assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_assign",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv(x).view(N, self.num_clusters, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(soft_assign, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.pca_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "net_vlad.num_clusters * net_vlad.dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_100": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_102": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "vlad_A",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vlad_A_global, vlad_A_half, vlad_A_quarter)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "vlad_B",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vlad_B_global, vlad_B_half, vlad_B_quarter)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_182": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_A.expand_as(vlad_B).view(-1, B, L)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "vlad_B.view(-1, B, L).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, 2, int(H / 2), 2, int(W / 2))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 2, 4, 3, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, C, -1, int(H / 2), int(W / 2))",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1, 3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "x.view(self.tuple_size, -1, C, H, W)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_168": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_170": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_202": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_204": {
                "variable": {
                    "value": "vlad_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad_x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, D, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.pca_layer(vlad_x).view(N, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, cluster_num, feat_dim)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=3)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(N, B, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "self.net_vlad(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=2)",
                            "Call"
                        ],
                        [
                            "vlad_x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad_x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "num_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "self.clsts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "ndarray": {
                    "value": "self.alpha * clstsAssign",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "(vlad_x[:, 0] + vlad_x[:, 1], vlad_x[:, 2] + vlad_x[:, 3], vlad_x[:, 0] + vlad_x[:, 2], vlad_x[:, 1] + vlad_x[:, 3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "haf/models/vgg.py": {
        "torch": {
            "Sequential_71": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "lower_branch",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.conv_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "middle_branch",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "higher_branch",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_87": {
                "variable": {
                    "value": "self.gap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_x, m_x, h_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_73": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.branch_1_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_78": {
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.branch_m_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_83": {
                "scale_factor": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.branch_h_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_112": {
                "f": {
                    "value": "os.path.join(self.log_dir, 'haf_vgg16_conv_1_dim-%d.pth' % self.branch_1_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "os.path.join(self.log_dir, 'haf_vgg16_conv_m_dim-%d.pth' % self.branch_m_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "os.path.join(self.log_dir, 'haf_vgg16_conv_h_dim-%d.pth' % self.branch_h_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "haf/trainers.py": {
        "torch": {
            "stack_67": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[input[0] for input in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs).permute(1, 0, 2, 3, 4)",
                            "Call"
                        ],
                        [
                            "[input[0] for input in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs).permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_67": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_231": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[input[0] for input in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs).permute(1, 0, 2, 3, 4)",
                            "Call"
                        ],
                        [
                            "[input[0] for input in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(imgs).permute(1, 0, 2, 3, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_231": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "imgs_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(imgs[:, 0].unsqueeze(1).contiguous(), imgs[:, self.neg_num + 2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_257": {
                "variable": {
                    "value": "log_sim_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_diff[:, :, 0].contiguous().view(B, -1) / self.temp[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_266": {
                "variable": {
                    "value": "select_negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "negatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "score_arg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "score_neg.view(self.neg_num, -1).argmax(1)",
                            "Call"
                        ],
                        [
                            "score_arg.unsqueeze(-1).unsqueeze(-1).expand_as(negatives).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "triplet_margin_loss_95": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output_anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "positive": {
                    "value": "output_positives",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 1]",
                            "Subscript"
                        ],
                        [
                            "output_positives.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_positives.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "negative": {
                    "value": "output_negatives",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triplet_margin_loss_280": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "anchor": {
                    "value": "output_anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "positive": {
                    "value": "output_positives",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 1]",
                            "Subscript"
                        ],
                        [
                            "output_positives.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_positives.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "negative": {
                    "value": "output_negatives",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 2:]",
                            "Subscript"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_negatives.contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_109": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-torch.cat((dist_pos, dist_neg), 1)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "-torch.cat((dist_pos, dist_neg), 2).view(-1, 2)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 1) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 2).view(-1, 2) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_284": {
                "variable": {
                    "value": "dist_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_positives.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_290": {
                "variable": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_negatives.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_296": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-torch.cat((dist_pos, dist_neg), 1)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "-torch.cat((dist_pos, dist_neg), 2).view(-1, 2)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 1) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 2).view(-1, 2) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_140": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-torch.cat((dist_pos, dist_neg), 1)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "-torch.cat((dist_pos, dist_neg), 2).view(-1, 2)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 1) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 2).view(-1, 2) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_300": {
                "variable": {
                    "value": "dist_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_positives.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_306": {
                "variable": {
                    "value": "dist_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ],
                        [
                            "output_anchors.unsqueeze(1).expand_as(output_negatives).contiguous().view(-1, L)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "output_negatives.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_315": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "-torch.cat((dist_pos, dist_neg), 1)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "-torch.cat((dist_pos, dist_neg), 2).view(-1, 2)",
                            "UnaryOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 1) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((dist_pos, dist_neg), 2).view(-1, 2) / self.temp[0]",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(dist, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "(dist_pos, dist_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "(dist_pos, dist_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "tensors": {
                    "value": "(dist_pos, dist_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "(dist_pos, dist_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "input": {
                    "value": "sim_diff_label[:, :, 0].contiguous().view(B, -1) / self.temp[gen]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "haf/utils/__init__.py": {
        "torch": {
            "is_tensor_7": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_18": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "haf/utils/data/preprocessor.py": {
        "torch": {}
    },
    "haf/utils/data/sampler.py": {
        "torch": {
            "arange_36": {
                "variable": {
                    "value": "self.sub_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "len(query_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_49": {
                "variable": {
                    "value": "self.sort_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distmat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_63": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.sub_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_116": {
                "variable": {
                    "value": "self.sub_set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "len(query_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_129": {
                "variable": {
                    "value": "self.sort_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "distmat",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_144": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.sub_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_208": {
                "variable": {
                    "value": "self.slices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_214": {
                "variable": {
                    "value": "self.slices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_166": {
                "variable": {
                    "value": "pos_jac_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_jac_dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.distmat_jac[anchor_index][torch.Tensor(pos_indices).long()]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_170": {
                "variable": {
                    "value": "sort_gap_ind_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inds_gap[inds_gap < 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_167": {
                "start": {
                    "value": "pos_jac_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_169": {
                "start": {
                    "value": "pos_jac_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_173": {
                "start": {
                    "value": "pos_jac_inds.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(sort_gap_ind_neg, sort_gap_ind_zero)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "haf/utils/dist_utils.py": {
        "torch": {
            "device_count_23": {
                "variable": {
                    "value": "args.ngpus_per_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_33": {
                "variable": {
                    "value": "args.ngpus_per_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_26": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_35": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "haf/utils/serialization.py": {
        "torch": {
            "save_33": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint.pth'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_40": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint.pth'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "torch": {
            "DistributedDataParallel_41": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "models.create('embednet', base_model, pool_layer)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], output_device=args.gpu, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "vgg16_netvlad(args, pretrained=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "test_loader_db",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.db_test, root=dataset.images_dir, transform=test_transformer_db)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(dataset.db_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[args.img_path].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features_db[f].unsqueeze(0) for (f, _, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_93": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_vlad",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_95": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(img.unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "F.normalize(x_vlad, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(outputs, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "pca.infer(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.data.cpu()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_135": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([features[args.img_path].unsqueeze(0)], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_135": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_136": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([features_db[f].unsqueeze(0) for (f, _, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_136": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "netvlad_img.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "train_extract_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(sorted(list(set(dataset.q_train) | set(dataset.db_train))), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(sorted(list(set(dataset.q_train) | set(dataset.db_train))))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(sorted(list(set(dataset.q_val) | set(dataset.db_val))), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(sorted(list(set(dataset.q_val) | set(dataset.db_val))))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(sorted(list(set(dataset.q_test) | set(dataset.db_test))), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(sorted(list(set(dataset.q_test) | set(dataset.db_test))))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "base_model",
                            "Name"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], output_device=args.gpu, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "models.create('embednet', base_model, pool_layer)",
                            "Call"
                        ],
                        [
                            "get_model(args)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_166": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_168": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_225": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "extract_features(model, loader, sorted(list(set(query) | set(gallery))), vlad=vlad, gpu=gpu, sync_gather=sync_gather)",
                            "Call"
                        ],
                        [
                            "list(dict_f.values())",
                            "Call"
                        ],
                        [
                            "random.sample(features, 10000)",
                            "Call"
                        ],
                        [
                            "torch.stack(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Generator_180": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_182": {
                "variable": {
                    "value": "subset_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(dataset.q_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "split_182": {
                "variable": {
                    "value": "subset_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "args.cache_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "dataset": {
                    "value": "Preprocessor(dataset.q_train + dataset.db_train, root=dataset.images_dir, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.tuple_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DistributedRandomTupleSampler(dataset.q_train, dataset.db_train, dataset.train_pos, dataset.train_neg, neg_num=args.neg_num, neg_pool=args.neg_pool)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "train_extract_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(pitts_train, root=pitts.images_dir, transform=test_transformer_db)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(pitts_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader_q",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.q_test, root=dataset.images_dir, transform=test_transformer_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1 if args.dataset == 'tokyo' else args.test_batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(dataset.q_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "test_loader_db",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.db_test, root=dataset.images_dir, transform=test_transformer_db)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "DistributedSliceSampler(dataset.db_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_68": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "models.create('embednet', base_model, pool_layer)",
                            "Call"
                        ],
                        [
                            "base_model",
                            "Name"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu], output_device=args.gpu, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "get_model(args)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(dict_f.values())",
                            "Call"
                        ],
                        [
                            "random.sample(features, 10000)",
                            "Call"
                        ],
                        [
                            "torch.stack(features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}