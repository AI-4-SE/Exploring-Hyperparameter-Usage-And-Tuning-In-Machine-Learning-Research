{
    "ReNom/example/simple_mnist_lstm.py": {
        "sklearn": {
            "LabelBinarizer_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "confusion_matrix_61": {
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_dist.y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(np.array(ret), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_62": {
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_dist.y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(np.array(ret), axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ReNom/example/simple_mnist_model.py": {
        "sklearn": {
            "train_test_split_37": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LabelBinarizer_38": {
                "variable": {
                    "value": "labels_train",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelBinarizer_39": {
                "variable": {
                    "value": "labels_test",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "confusion_matrix_98": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(np.array(ret), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_99": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(np.array(ret), axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ReNom/example/simple_mnist_train.py": {
        "sklearn": {
            "LabelBinarizer_27": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "confusion_matrix_99": {
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_dist.y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(np.array(ret), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_100": {
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_dist.y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(np.array(ret), axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "darkflow-master/darkflow/net/build.py": {
        "tensorflow": {
            "Graph_70": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_94": {
                "variable": {
                    "value": "self.inp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_96": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.inp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "inp_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None] + self.meta['inp_size']",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_121": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "state.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_145": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(**cfg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_149": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.FLAGS.keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_168": {
                "variable": {
                    "value": "tfnet_pb.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "tfnet_pb.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_49": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_82": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_85": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ],
                        [
                            "tfnet_pb.sess.graph_def",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GPUOptions_132": {
                "variable": {
                    "value": "cfg[gpu_options]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "utility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.FLAGS.gpu, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_142": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_143": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.FLAGS.summary + 'train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "write_graph_177": {
                "graph_or_graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ],
                        [
                            "tfnet_pb.sess.graph_def",
                            "Attribute"
                        ]
                    ]
                },
                "logdir": {
                    "value": "./",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'built_graph/{}.pb'.format(self.meta['name'])",
                            "Call"
                        ]
                    ]
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_73": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.gpuName if FLAGS.gpu > 0.0 else None",
                            "IfExp"
                        ],
                        [
                            "FLAGS.gpuName if FLAGS.gpu > 0.0 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "FastGFile_81": {
                "name": {
                    "value": "self.FLAGS.pbLoad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_52": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.gpuName if FLAGS.gpu > 0.0 else None",
                            "IfExp"
                        ],
                        [
                            "FLAGS.gpuName if FLAGS.gpu > 0.0 else None",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "darkflow-master/darkflow/net/flow.py": {
        "tensorflow": {}
    },
    "darkflow-master/darkflow/net/ops/baseop.py": {
        "tensorflow": {
            "constant_initializer_68": {
                "variable": {
                    "value": "self.lay.w[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lay.w.get(var, None)",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "self.lay.w[var]",
                            "Subscript"
                        ],
                        [
                            "np.ones(shape)",
                            "Call"
                        ],
                        [
                            "np.random.normal(*args)",
                            "Call"
                        ],
                        [
                            "self.lay.h[ph]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "placeholder_with_default_84": {
                "variable": {
                    "value": "self.lay.h[ph]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "val['dfault']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "val['shape']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}'.format(self.scope, ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "self.lay.w[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lay.wshape",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.lay.wshape[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.lay.w[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "darkflow-master/darkflow/utils/loader.py": {
        "tensorflow": {
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_89": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt + '.meta'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "darknet/bdfs.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "X0",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_cl, n_H0, n_W0, n_C0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_H1, n_W1, n_C1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_cl, n_cell, n_cell, n_box, n_res]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "A1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "Z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(meta_data, [1, 3, 3, 4, 32], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool3d_83": {
                "variable": {
                    "value": "P1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(Z1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(P1, [1, 3, 3, 32, 64], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool3d_92": {
                "variable": {
                    "value": "P2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(Z2)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "A3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "Z3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(P2, [1, 30, 30, 64, 1024], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_100": {
                "variable": {
                    "value": "reweights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_input_darknet",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "A3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(Z3)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_184": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "1e-05",
                            "float"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "10 ** (-9)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_186": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_ref_187": {
                "variable": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_188": {
                "variable": {
                    "value": "temp_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in all_variables if all((elem not in v.name for elem in ['beta1_power_1', 'beta2_power_1']))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_189": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_120": {
                "variable": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "output_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_names or []",
                            "BoolOp"
                        ],
                        [
                            "output_names + [v.op.name for v in tf.global_variables()]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "variable_names_whitelist": {
                    "value": "freeze_var_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set((v.op.name for v in tf.global_variables())).difference(keep_var_names or []))",
                            "Call"
                        ]
                    ]
                }
            },
            "GraphDef_130": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_330": {
                "variable": {
                    "value": "meta_train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "meta_train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(meta_train_x)",
                            "Call"
                        ],
                        [
                            "meta_train_x.reshape(1, meta_train_x.shape[0], meta_train_x.shape[1], meta_train_x.shape[2], meta_train_x.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_129": {
                "name": {
                    "value": "frozen_graph_filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_137": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_190": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "write_graph_214": {
                "graph_or_graph_def": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(session, input_graph_def, output_names, freeze_var_names)",
                            "Call"
                        ],
                        [
                            "freeze_session(sess, output_names=['out'])",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "/darknet/models/",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "my_model.pb",
                    "type": "str",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_283": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_graph('./built_graph/yolov2-voc.pb')",
                            "Call"
                        ],
                        [
                            "session.graph",
                            "Attribute"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_194": {
                "var_list": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(tf.GraphKeys.GLOBAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "darknet/tf_few_shot_ft.py": {
        "tensorflow": {
            "ConfigProto_25": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "X0",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_H0, n_W0, n_C0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "variable": {
                    "value": "X1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_H1, n_W1, n_C1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_cl, n_cell, n_cell, n_box, n_res]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "A1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "Z1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(meta_data, [3, 3, 4, 32], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_142": {
                "variable": {
                    "value": "P1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(Z1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "Z2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(P1, [3, 3, 32, 64], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_148": {
                "variable": {
                    "value": "P2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(Z2)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "A3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "Z3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(P2, [30, 30, 64, 1024], padding='VALID')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_153": {
                "variable": {
                    "value": "reweights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x_input_darknet",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "A3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(Z3)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "yolov2.conv_layer(reweights, [3, 3, 1024, 1024])",
                            "Call"
                        ],
                        [
                            "yolov2.conv_layer(net, [3, 3, 1024, 1024])",
                            "Call"
                        ],
                        [
                            "yolov2.conv_layer(net24, [3, 3, int(net24.get_shape()[3]), 1024])",
                            "Call"
                        ],
                        [
                            "yolov2.conv_layer(net, [1, 1, 1024, 5 * (num_classes + 5)], batch_norm=False, name='out')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[b_size, num_classes, 13, 13, 5, num_classes + 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_204": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "10 ** (-9)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_206": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_ref_207": {
                "variable": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_210": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_112": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_186": {
                "variable": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "output_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_names or []",
                            "BoolOp"
                        ],
                        [
                            "output_names + [v.op.name for v in tf.global_variables()]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "variable_names_whitelist": {
                    "value": "freeze_var_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(set((v.op.name for v in tf.global_variables())).difference(keep_var_names or []))",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_213": {
                "variable": {
                    "value": "temp_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in all_variables if all((elem not in v.name for elem in ['beta1_power_1', 'beta2_power_1', 'biases_7/Adam_1', 'biases_7/Adam', 'weight_7/Adam', 'weight_7/Adam_1', 'weight_7', 'biases_7']))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_215": {
                "variable": {
                    "value": "temp_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in all_variables if all((elem not in v.name for elem in ['beta1_power_1', 'beta2_power_1']))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_371": {
                "variable": {
                    "value": "meta_train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "meta_train_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(meta_train_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_111": {
                "name": {
                    "value": "frozen_graph_filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_119": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "prefix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_216": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "write_graph_238": {
                "graph_or_graph_def": {
                    "value": "frozen_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(session, input_graph_def, output_names, freeze_var_names)",
                            "Call"
                        ],
                        [
                            "freeze_session(sess, output_names=['out'])",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "/darknet/models/",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "my_model_ft.pb",
                    "type": "str",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variables_initializer_218": {
                "var_list": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection_ref(tf.GraphKeys.GLOBAL_VARIABLES)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_324": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_graph('./built_graph/yolov2-voc.pb')",
                            "Call"
                        ],
                        [
                            "session.graph",
                            "Attribute"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "darknet/yolo_layer_utils.py": {
        "tensorflow": {}
    },
    "darknet/yolo_v2.py": {
        "tensorflow": {
            "concat_74": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[net, net24]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[shape[4]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv3d_86": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(shape, stddev=0.1), name='weight')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'0_conv'",
                            "Method Argument"
                        ],
                        [
                            "'1_pool'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_105": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'0_conv'",
                            "Method Argument"
                        ],
                        [
                            "'1_pool'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_114": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outputs_1, outputs_2, outputs_3, outputs_4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_156": {
                "variable": {
                    "value": "boxx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes1[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes1[..., 0] - boxx[..., 0] * 0.5, boxes1[..., 1] - boxx[..., 1] * 0.5, boxes1[..., 0] + boxx[..., 0] * 0.5, boxes1[..., 1] + boxx[..., 1] * 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([boxes1[..., 0] - boxx[..., 0] * 0.5, boxes1[..., 1] - boxx[..., 1] * 0.5, boxes1[..., 0] + boxx[..., 0] * 0.5, boxes1[..., 1] + boxx[..., 1] * 0.5])",
                            "Call"
                        ],
                        [
                            "tf.stack([boxes2[..., 0] - boxx[..., 0] * 0.5, boxes2[..., 1] - boxx[..., 1] * 0.5, boxes2[..., 0] + boxx[..., 0] * 0.5, boxes2[..., 1] + boxx[..., 1] * 0.5])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 4, 5, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_164": {
                "variable": {
                    "value": "boxx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes2[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes2[..., 0] - boxx[..., 0] * 0.5, boxes2[..., 1] - boxx[..., 1] * 0.5, boxes2[..., 0] + boxx[..., 0] * 0.5, boxes2[..., 1] + boxx[..., 1] * 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_170": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([boxes1[..., 0] - boxx[..., 0] * 0.5, boxes1[..., 1] - boxx[..., 1] * 0.5, boxes1[..., 0] + boxx[..., 0] * 0.5, boxes1[..., 1] + boxx[..., 1] * 0.5])",
                            "Call"
                        ],
                        [
                            "tf.stack([boxes2[..., 0] - boxx[..., 0] * 0.5, boxes2[..., 1] - boxx[..., 1] * 0.5, boxes2[..., 0] + boxx[..., 0] * 0.5, boxes2[..., 1] + boxx[..., 1] * 0.5])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 4, 5, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_172": {
                "variable": {
                    "value": "left_up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes1[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes2[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_173": {
                "variable": {
                    "value": "right_down",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes1[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes2[..., 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_175": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "right_down - left_up",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "shift",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rolling_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rolling_variance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_95": {
                "variable": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(inputs, weight, strides=[1, 1, 1, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(conv_bn, biases)",
                            "Call"
                        ],
                        [
                            "tf.maximum(self.alpha * conv, conv)",
                            "Call"
                        ],
                        [
                            "tf.add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([depth], dtype='float32'), name='rolling_mean')",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([depth], dtype='float32'), name='rolling_variance')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([depth], dtype='float32'), name='shift')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([depth], dtype='float32'), name='scale')",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_96": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(conv, mean, variance, shift, scale, 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[shape[4]]), name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.alpha * conv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(inputs, weight, strides=[1, 1, 1, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(conv_bn, biases)",
                            "Call"
                        ],
                        [
                            "tf.maximum(self.alpha * conv, conv)",
                            "Call"
                        ],
                        [
                            "tf.add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_99": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(inputs, weight, strides=[1, 1, 1, 1, 1], padding=padding, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(conv_bn, biases)",
                            "Call"
                        ],
                        [
                            "tf.maximum(self.alpha * conv, conv)",
                            "Call"
                        ],
                        [
                            "tf.add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[shape[4]]), name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_179": {
                "t": {
                    "value": "1.0 * inter_square / union_square",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_83": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_84": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_90": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_92": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_93": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "darknet/yolov2_tensorflow.py": {
        "tensorflow": {
            "reshape_27": {
                "variable": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant(self.offset, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.cell_size, self.cell_size, self.box_per_cell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_28": {
                "variable": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(self.batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[net, net24]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[shape[3]])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_86": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(shape, stddev=0.1), name='weight')",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'0_conv'",
                            "Method Argument"
                        ],
                        [
                            "'1_pool'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool_105": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'0_conv'",
                            "Method Argument"
                        ],
                        [
                            "'1_pool'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_114": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outputs_1, outputs_2, outputs_3, outputs_4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(predict, [self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, self.num_class + 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, self.num_class + 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "box_coordinate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predict[:, :, :, :, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "box_confidence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predict[:, :, :, :, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predict[:, :, :, :, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, self.num_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[(1.0 / (1.0 + tf.exp(-1.0 * box_coordinate[:, :, :, :, 0])) + self.offset) / self.cell_size, (1.0 / (1.0 + tf.exp(-1.0 * box_coordinate[:, :, :, :, 1])) + tf.transpose(self.offset, (0, 2, 1, 3))) / self.cell_size, tf.sqrt(tf.exp(box_coordinate[:, :, :, :, 2]) * np.reshape(self.anchor[:5], [1, 1, 1, 5]) / self.cell_size), tf.sqrt(tf.exp(box_coordinate[:, :, :, :, 3]) * np.reshape(self.anchor[5:], [1, 1, 1, 5]) / self.cell_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_128": {
                "variable": {
                    "value": "box_coor_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([(1.0 / (1.0 + tf.exp(-1.0 * box_coordinate[:, :, :, :, 0])) + self.offset) / self.cell_size, (1.0 / (1.0 + tf.exp(-1.0 * box_coordinate[:, :, :, :, 1])) + tf.transpose(self.offset, (0, 2, 1, 3))) / self.cell_size, tf.sqrt(tf.exp(box_coordinate[:, :, :, :, 2]) * np.reshape(self.anchor[:5], [1, 1, 1, 5]) / self.cell_size), tf.sqrt(tf.exp(box_coordinate[:, :, :, :, 3]) * np.reshape(self.anchor[5:], [1, 1, 1, 5]) / self.cell_size)])",
                            "Call"
                        ],
                        [
                            "tf.transpose(box, (1, 2, 3, 4, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "box_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(predict[:, :, :, :, 5:], [self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, self.num_class])",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(box_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "response",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label[:, :, :, :, 1:5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label[:, :, :, :, 5:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.cell_size, self.cell_size, self.box_per_cell, self.num_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_137": {
                "variable": {
                    "value": "best_box",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(iou, tf.reduce_max(iou, axis=-1, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_138": {
                "variable": {
                    "value": "confs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "best_box * response",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[coo_loss, con_loss, pro_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(loss, axis=[1, 2, 3, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_155": {
                "variable": {
                    "value": "boxx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes1[:, :, :, :, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes1[:, :, :, :, 0] - boxx[:, :, :, :, 0] * 0.5, boxes1[:, :, :, :, 1] - boxx[:, :, :, :, 1] * 0.5, boxes1[:, :, :, :, 0] + boxx[:, :, :, :, 0] * 0.5, boxes1[:, :, :, :, 1] + boxx[:, :, :, :, 1] * 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "variable": {
                    "value": "boxes1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([boxes1[:, :, :, :, 0] - boxx[:, :, :, :, 0] * 0.5, boxes1[:, :, :, :, 1] - boxx[:, :, :, :, 1] * 0.5, boxes1[:, :, :, :, 0] + boxx[:, :, :, :, 0] * 0.5, boxes1[:, :, :, :, 1] + boxx[:, :, :, :, 1] * 0.5])",
                            "Call"
                        ],
                        [
                            "tf.stack([boxes2[:, :, :, :, 0] - boxx[:, :, :, :, 0] * 0.5, boxes2[:, :, :, :, 1] - boxx[:, :, :, :, 1] * 0.5, boxes2[:, :, :, :, 0] + boxx[:, :, :, :, 0] * 0.5, boxes2[:, :, :, :, 1] + boxx[:, :, :, :, 1] * 0.5])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_163": {
                "variable": {
                    "value": "boxx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes2[:, :, :, :, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[boxes2[:, :, :, :, 0] - boxx[:, :, :, :, 0] * 0.5, boxes2[:, :, :, :, 1] - boxx[:, :, :, :, 1] * 0.5, boxes2[:, :, :, :, 0] + boxx[:, :, :, :, 0] * 0.5, boxes2[:, :, :, :, 1] + boxx[:, :, :, :, 1] * 0.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "boxes2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([boxes1[:, :, :, :, 0] - boxx[:, :, :, :, 0] * 0.5, boxes1[:, :, :, :, 1] - boxx[:, :, :, :, 1] * 0.5, boxes1[:, :, :, :, 0] + boxx[:, :, :, :, 0] * 0.5, boxes1[:, :, :, :, 1] + boxx[:, :, :, :, 1] * 0.5])",
                            "Call"
                        ],
                        [
                            "tf.stack([boxes2[:, :, :, :, 0] - boxx[:, :, :, :, 0] * 0.5, boxes2[:, :, :, :, 1] - boxx[:, :, :, :, 1] * 0.5, boxes2[:, :, :, :, 0] + boxx[:, :, :, :, 0] * 0.5, boxes2[:, :, :, :, 1] + boxx[:, :, :, :, 1] * 0.5])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 3, 4, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "maximum_171": {
                "variable": {
                    "value": "left_up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes1[:, :, :, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes2[:, :, :, :, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "minimum_172": {
                "variable": {
                    "value": "right_down",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "boxes1[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "boxes2[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_174": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "right_down - left_up",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.cell_size, self.cell_size, self.box_per_cell, self.num_class + 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "shift",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rolling_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([depth], dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rolling_variance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_95": {
                "variable": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, weight, strides=[1, 1, 1, 1], padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(conv_bn, biases)",
                            "Call"
                        ],
                        [
                            "tf.maximum(self.alpha * conv, conv)",
                            "Call"
                        ],
                        [
                            "tf.add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([depth], dtype='float32'), name='rolling_mean')",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([depth], dtype='float32'), name='rolling_variance')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([depth], dtype='float32'), name='shift')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.ones([depth], dtype='float32'), name='scale')",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_96": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(conv, mean, variance, shift, scale, 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[shape[3]]), name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.alpha * conv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, weight, strides=[1, 1, 1, 1], padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(conv_bn, biases)",
                            "Call"
                        ],
                        [
                            "tf.maximum(self.alpha * conv, conv)",
                            "Call"
                        ],
                        [
                            "tf.add(conv, biases)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_99": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, weight, strides=[1, 1, 1, 1], padding='SAME', name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(conv_bn, biases)",
                            "Call"
                        ],
                        [
                            "tf.maximum(self.alpha * conv, conv)",
                            "Call"
                        ],
                        [
                            "tf.add(conv, biases)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.1, shape=[shape[3]]), name='biases')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_178": {
                "t": {
                    "value": "1.0 * inter_square / union_square",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_27": {
                "value": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_36": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_83": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_84": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_137": {
                "x": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_iou(box_coor_trans, boxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_max(iou, axis=-1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_144": {
                "x": {
                    "value": "box_coor_trans - boxes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_145": {
                "x": {
                    "value": "box_confidence - confs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_146": {
                "x": {
                    "value": "box_classes - classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([coo_loss, con_loss, pro_loss], axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(loss, axis=[1, 2, 3, 4]), name='loss')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_90": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_92": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_93": {
                "shape": {
                    "value": "[depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_126": {
                "x": {
                    "value": "tf.exp(box_coordinate[:, :, :, :, 2]) * np.reshape(self.anchor[:5], [1, 1, 1, 5]) / self.cell_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_127": {
                "x": {
                    "value": "tf.exp(box_coordinate[:, :, :, :, 3]) * np.reshape(self.anchor[5:], [1, 1, 1, 5]) / self.cell_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_129": {
                "x": {
                    "value": "-1.0 * box_confidence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_137": {
                "input_tensor": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_iou(box_coor_trans, boxes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_125": {
                "a": {
                    "value": "self.offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_126": {
                "x": {
                    "value": "box_coordinate[:, :, :, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_127": {
                "x": {
                    "value": "box_coordinate[:, :, :, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_124": {
                "x": {
                    "value": "-1.0 * box_coordinate[:, :, :, :, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_125": {
                "x": {
                    "value": "-1.0 * box_coordinate[:, :, :, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "darknet/yolov2_train.py": {
        "tensorflow": {
            "reshape_65": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, [-1, n_cl, 13, 13, 5, 1 + 5])",
                            "Call"
                        ],
                        [
                            "tf.identity(y_pred, name='y_pred')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_cl, 13, 13, 5, 1 + 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_68": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(y_pred, [-1, n_cl, 13, 13, 5, 1 + 5])",
                            "Call"
                        ],
                        [
                            "tf.identity(y_pred, name='y_pred')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y_pred",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "predicted_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[..., :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "range_75": {
                "variable": {
                    "value": "cell_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "predicted_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(predicted_xy[..., 0] + tf.reshape(cell_inds, [1, 1, -1, 1]), predicted_xy[..., 1] + tf.reshape(cell_inds, [1, -1, 1, 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "predicted_objectedness",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_89": {
                "variable": {
                    "value": "predicted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.nn.sigmoid(y_pred[..., 5:])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_101": {
                "variable": {
                    "value": "intersect_mins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_xy - predicted_wh / 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "true_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_xy - true_wh / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_102": {
                "variable": {
                    "value": "intersect_maxes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_xy + predicted_wh / 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "true_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_xy + true_wh / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_103": {
                "variable": {
                    "value": "intersect_wh",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "intersect_maxes - intersect_mins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "variable": {
                    "value": "xy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "xy_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(true_xy - predicted_xy) * responsibility_selector[..., None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "wh_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "wh_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.sqrt(true_wh) - tf.sqrt(predicted_wh)) * responsibility_selector[..., None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_124": {
                "variable": {
                    "value": "obj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "obj_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(iou_scores - predicted_objectedness) * responsibility_selector",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_127": {
                "variable": {
                    "value": "best_iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iou_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersect_areas / union_areas",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "variable": {
                    "value": "no_obj_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "no_obj_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(0 - predicted_objectedness) * tf.to_float(best_iou < 0.6)[..., None] * (1 - responsibility_selector)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "clf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "clf_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(true_logits - predicted_logits) * responsibility_selector[..., None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(object_coord_scale * (xy_loss + wh_loss) + object_conf_scale * obj_loss + noobject_conf_scale * no_obj_loss + object_class_scale * clf_loss, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_82": {
                "x": {
                    "value": "y_pred[..., 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "x": {
                    "value": "y_pred[..., 5:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "true_xy - predicted_xy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_119": {
                "x": {
                    "value": "tf.sqrt(true_wh) - tf.sqrt(predicted_wh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_123": {
                "x": {
                    "value": "iou_scores - predicted_objectedness",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_132": {
                "x": {
                    "value": "true_logits - predicted_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_141": {
                "input": {
                    "value": "object_coord_scale * (xy_loss + wh_loss) + object_conf_scale * obj_loss + noobject_conf_scale * no_obj_loss + object_class_scale * clf_loss",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "0 - predicted_objectedness",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "tensor": {
                    "value": "cell_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_cells, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "tensor": {
                    "value": "cell_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_cells, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_119": {
                "x": {
                    "value": "predicted_wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.priors * tf.exp(y_pred[..., 2:4])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_128": {
                "x": {
                    "value": "best_iou < 0.6",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}