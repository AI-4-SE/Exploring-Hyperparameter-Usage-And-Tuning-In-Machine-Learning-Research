{
    "TorchTools/ArgsTools/base_args.py": {
        "torch": {
            "device_159": {
                "variable": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_259": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_260": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_261": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TorchTools/ArgsTools/pipe_args.py": {
        "torch": {
            "device_148": {
                "variable": {
                    "value": "self.args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_215": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_216": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_217": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "TorchTools/DataTools/FileTools.py": {
        "torch": {
            "clamp_129": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_138": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_164": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "TorchTools/DataTools/Prepro.py": {
        "torch": {
            "from_numpy_57": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack((img[:, :, 0], g, img[:, :, 3]), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "rggb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(np.transpose(img, [2, 0, 1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_60": {
                "variable": {
                    "value": "lr_rggb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rggb.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_90": {
                "variable": {
                    "value": "avgpool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(rgb, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_96": {
                "*size": {
                    "value": "[1, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_185": {
                "variable": {
                    "value": "lr_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TF.hflip(img)",
                            "Call"
                        ],
                        [
                            "TF.vflip(img)",
                            "Call"
                        ],
                        [
                            "TF.rotate(img, degree)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "TorchTools/DataTools/vis.py": {
        "torch": {
            "PixelShuffle_29": {
                "variable": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "TorchTools/LossTools/VGG.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channelss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "TorchTools/LossTools/loss.py": {
        "torch": {
            "BCELoss_16": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_17": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_186": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_192": {
                "variable": {
                    "value": "srgb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x < b",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k0 * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gammafn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_195": {
                "variable": {
                    "value": "srgb",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k1 * x - k1 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "srgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(x < b, k0 * x, gammafn(x))",
                            "Call"
                        ],
                        [
                            "torch.where(x > 1, k1 * x - k1 + 1, srgb)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_32": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(diff ** 2 + self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_42": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, 1:, :] - x[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_43": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, 1:] - x[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_54": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, 1:, :] - x[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "h_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(h_tv ** 2 + self.e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_56": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, 1:] - x[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_57": {
                "variable": {
                    "value": "w_tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(w_tv ** 2 + self.e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_67": {
                "variable": {
                    "value": "h_tv_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, 1:, :] - x[:, :, :-1, :] - (y[:, :, 1:, :] - y[:, :, :-1, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "h_tv_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_68": {
                "variable": {
                    "value": "w_tv_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, :, 1:] - x[:, :, :, :-1] - (y[:, :, :, 1:] - y[:, :, :, :-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "w_tv_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_80": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "-Y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "sum_square_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_115": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_201": {
                "tensors": {
                    "value": "[0.5 * (imgs[:, :, 1:, :-1] - imgs[:, :, :-1, :-1]), 0.5 * (imgs[:, :, :-1, 1:] - imgs[:, :, :-1, :-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_337": {
                "input": {
                    "value": "torch.abs(input - output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_215": {
                "input": {
                    "value": "torch.abs(gi - gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "(img - truth) * (img - truth)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_337": {
                "input": {
                    "value": "input - output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_418": {
                "variable": {
                    "value": "(input_R, input_G, input_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'RGB'",
                            "MethodArgument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_419": {
                "variable": {
                    "value": "(target_R, target_G, target_B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "input_BGR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_B, input_G, input_R]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "target_BGR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_B, target_G, target_R]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_32": {
                "input": {
                    "value": "diff ** 2 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "h_tv ** 2 + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_57": {
                "input": {
                    "value": "w_tv ** 2 + self.e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_215": {
                "input": {
                    "value": "gi - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_306": {
                "variable": {
                    "value": "m.weight.data[i, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_blur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussianKernal(weight_shape[2], sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_190": {
                "input": {
                    "value": "torch.max(x, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / 2.4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_394": {
                "f": {
                    "value": "vgg_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_409": {
                "*args": {
                    "value": "*list(vgg.features.children())[layers_dict[i]:layers_dict[j]]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_190": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "TorchTools/model_util.py": {
        "torch": {
            "save_24": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state_dict': model_cpu, 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                            "Dict"
                        ],
                        [
                            "optimizer.state.values()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_{}.pth'.format(save_path, name_pre, name_post)",
                            "Call"
                        ],
                        [
                            "'{}/{}_{}.pth'.format(save_path, postname, int(state['epoch']))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_114": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state_dict': model_cpu, 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                            "Dict"
                        ],
                        [
                            "optimizer.state.values()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_{}.pth'.format(save_path, name_pre, name_post)",
                            "Call"
                        ],
                        [
                            "'{}/{}_{}.pth'.format(save_path, postname, int(state['epoch']))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_38": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_104": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/generate_benchmark.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_246": {
                "variable": {
                    "value": "linrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linrgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((rggb[:, :, 0], np.mean(rggb[:, :, 1:3], axis=-1), rggb[:, :, 3]), axis=2)",
                            "Call"
                        ],
                        [
                            "TF.to_tensor(linrgb)",
                            "Call"
                        ],
                        [
                            "torch.clamp(linrgb, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "self.datas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.data_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "self.datas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.data_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "lr_srgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_srgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_tensor(srgb, scale=self.scale, downsampler=self.downsampler)",
                            "Call"
                        ],
                        [
                            "torch.clamp(lr_srgb, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "inverse_103": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unprocess.random_ccm()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_208": {
                "variable": {
                    "value": "self.datas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.data_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "self.datas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.data_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_259": {
                "variable": {
                    "value": "lr_linrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_linrgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_tensor(linrgb, scale=self.scale, downsampler=self.downsampler)",
                            "Call"
                        ],
                        [
                            "torch.clamp(lr_linrgb, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/generate_pixelshift.py": {
        "torch": {
            "unsqueeze_137": {
                "variable": {
                    "value": "linrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(linrgb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(bayer_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/generate_testdata.py": {
        "torch": {
            "unsqueeze_98": {
                "variable": {
                    "value": "linrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(linrgb.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(bayer_image)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "save_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'rggb': np.floor(linrggb * (2 ** BIT - 1)).astype(np.int16), 'metadata': metadata}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(save_dir, root_name + '.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/load_dataset.py": {
        "torch": {
            "clamp_81": {
                "variable": {
                    "value": "linrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linrgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((rggb[:, :, 0], np.mean(rggb[:, :, 1:3], axis=-1), rggb[:, :, 3]), axis=2)",
                            "Call"
                        ],
                        [
                            "aug_img_np(linrgb, random.randint(0, 7))",
                            "Call"
                        ],
                        [
                            "TF.to_tensor(linrgb)",
                            "Call"
                        ],
                        [
                            "torch.clamp(linrgb, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "variable": {
                    "value": "lr_linrgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_linrgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_tensor(linrgb, scale=self.scale, downsampler=self.downsampler)",
                            "Call"
                        ],
                        [
                            "torch.clamp(lr_linrgb, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_194": {
                "variable": {
                    "value": "lr_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_tensor(rgb, scale=self.scale, downsampler=self.downsampler)",
                            "Call"
                        ],
                        [
                            "torch.clamp(lr_rgb, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_301": {
                "variable": {
                    "value": "lr_srgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lr_srgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_tensor(srgb, scale=self.scale, downsampler=self.downsampler)",
                            "Call"
                        ],
                        [
                            "torch.clamp(lr_srgb, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "downsample_tensor(srgb)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "inverse_310": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unprocess.random_ccm()",
                            "Call"
                        ],
                        [
                            "unprocess.random_ccm()",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_426": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unprocess.random_ccm()",
                            "Call"
                        ],
                        [
                            "unprocess.random_ccm()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/process.py": {
        "torch": {
            "ones_like_35": {
                "variable": {
                    "value": "green_gains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_gains.squeeze()",
                            "Call"
                        ],
                        [
                            "red_gains.unsqueeze(0) if len(red_gains.shape) == 0 else red_gains",
                            "IfExp"
                        ],
                        [
                            "red_gains.squeeze()",
                            "Call"
                        ],
                        [
                            "red_gains.unsqueeze(0) if len(red_gains.shape) == 0 else red_gains",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_36": {
                "variable": {
                    "value": "gains",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[red_gains, green_gains, green_gains, blue_gains]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_50": {
                "variable": {
                    "value": "green_gains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_gains.squeeze()",
                            "Call"
                        ],
                        [
                            "red_gains.unsqueeze(0) if len(red_gains.shape) == 0 else red_gains",
                            "IfExp"
                        ],
                        [
                            "red_gains.squeeze()",
                            "Call"
                        ],
                        [
                            "red_gains.unsqueeze(0) if len(red_gains.shape) == 0 else red_gains",
                            "IfExp"
                        ]
                    ]
                }
            },
            "stack_51": {
                "variable": {
                    "value": "gains",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[red_gains, green_gains, blue_gains]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Upsample_84": {
                "variable": {
                    "value": "upsamplebyX",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images.size()",
                            "Call"
                        ],
                        [
                            "[shape[1] * 2, shape[2] * 2]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flip_88": {
                "variable": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_90": {
                "variable": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_94": {
                "variable": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_96": {
                "variable": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_110": {
                "input": {
                    "value": "blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 3:4]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_112": {
                "input": {
                    "value": "blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 3:4]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "rgb_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[red, green, blue]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images.permute(0, 2, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ccms.permute(0, 2, 1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_125": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_141": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(metadata['colormatrix'])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]])",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_143": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_156": {
                "variable": {
                    "value": "bayer_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bayer_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "bayer_images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "apply_gains_bayer(bayer_images, red_gains, blue_gains)",
                            "Call"
                        ],
                        [
                            "torch.clamp(bayer_images, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_161": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demosaic(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_170": {
                "variable": {
                    "value": "rgb_wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_wb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_gains_rgb(linrgb, red_gains, blue_gains)",
                            "Call"
                        ],
                        [
                            "torch.clamp(rgb_wb, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "rgb_wb_ccm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_wb_ccm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_ccms(rgb_wb, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(rgb_wb_ccm, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_132": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "demosaic(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_142": {
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_107": {
                "tensors": {
                    "value": "green_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[green_at_red, green_at_green_red, green_at_green_blue, green_at_blue]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_107": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/processdnd.py": {
        "torch": {
            "ones_like_33": {
                "variable": {
                    "value": "green_gains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_gains.squeeze(1)",
                            "Call"
                        ],
                        [
                            "red_gains.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "gains",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[red_gains, green_gains, green_gains, blue_gains]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_46": {
                "variable": {
                    "value": "green_gains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "red_gains.squeeze(1)",
                            "Call"
                        ],
                        [
                            "red_gains.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_47": {
                "variable": {
                    "value": "gains",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[red_gains, green_gains, blue_gains]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Upsample_80": {
                "variable": {
                    "value": "upsamplebyX",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images.size()",
                            "Call"
                        ],
                        [
                            "[shape[1] * 2, shape[2] * 2]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flip_84": {
                "variable": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_86": {
                "variable": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_red, dims=[1])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_red.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_90": {
                "variable": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_92": {
                "variable": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "green_blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 2:3]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(green_blue, dims=[0])",
                            "Call"
                        ],
                        [
                            "SpaceToDepth_fact2(green_blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_106": {
                "input": {
                    "value": "blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 3:4]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_108": {
                "input": {
                    "value": "blue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images[Ellipsis, 3:4]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ],
                        [
                            "upsamplebyX(blue.permute(0, 3, 1, 2)).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.flip(torch.flip(blue, dims=[1]), dims=[0])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "rgb_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[red, green, blue]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images * ccms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mm_139": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(metadata['colormatrix'])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]])",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_141": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_146": {
                "variable": {
                    "value": "ccm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(rgb2cam)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "red_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(metadata['red_gain'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "blue_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blue_gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(metadata['blue_gain'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_157": {
                "variable": {
                    "value": "bayer_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bayer_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayer_images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "bayer_images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "apply_gains_bayer(bayer_images, red_gains, blue_gains)",
                            "Call"
                        ],
                        [
                            "torch.clamp(bayer_images, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_162": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "images[:, :, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "demosaic(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_171": {
                "variable": {
                    "value": "rgb_wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_wb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_gains_rgb(linrgb, red_gains, blue_gains)",
                            "Call"
                        ],
                        [
                            "torch.clamp(rgb_wb, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_175": {
                "variable": {
                    "value": "rgb_wb_ccm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_wb_ccm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_ccms(rgb_wb, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(rgb_wb_ccm, min=0.0, max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_129": {
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "images[:, :, :, None, :]",
                            "Subscript"
                        ],
                        [
                            "images.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "demosaic(bayer_images)",
                            "Call"
                        ],
                        [
                            "apply_ccms(images, cam2rgbs)",
                            "Call"
                        ],
                        [
                            "torch.clamp(images, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "gamma_compression(images)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_103": {
                "tensors": {
                    "value": "green_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[green_at_red, green_at_green_red, green_at_green_blue, green_at_blue]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_103": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/unprocess.py": {
        "torch": {
            "sum_45": {
                "variable": {
                    "value": "weights_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(num_ccms, 1, 1).uniform_(1e-08, 100000000.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_52": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(xyz2cams * weights, dim=0) / weights_sum",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]])",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_62": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.8])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_73": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(image, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "image.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "inverse_smoothstep(image)",
                            "Call"
                        ],
                        [
                            "gamma_expansion(image)",
                            "Call"
                        ],
                        [
                            "apply_ccm(image, rgb2cam)",
                            "Call"
                        ],
                        [
                            "safe_invert_gains(image, rgb_gain, red_gain, blue_gain)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ccm",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.clone().reshape(3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_100": {
                "variable": {
                    "value": "gray",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(image, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "image.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "inverse_smoothstep(image)",
                            "Call"
                        ],
                        [
                            "gamma_expansion(image)",
                            "Call"
                        ],
                        [
                            "apply_ccm(image, rgb2cam)",
                            "Call"
                        ],
                        [
                            "safe_invert_gains(image, rgb_gain, red_gain, blue_gain)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_103": {
                "variable": {
                    "value": "safe_gains",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask + (1.0 - mask) * gains",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(red, green_red, green_blue, blue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_165": {
                "variable": {
                    "value": "lin_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(image, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "image.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "inverse_smoothstep(image)",
                            "Call"
                        ],
                        [
                            "gamma_expansion(image)",
                            "Call"
                        ],
                        [
                            "apply_ccm(image, rgb2cam)",
                            "Call"
                        ],
                        [
                            "safe_invert_gains(image, rgb_gain, red_gain, blue_gain)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "inverse_176": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "random_ccm()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_192": {
                "variable": {
                    "value": "shot_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_shot_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(1).uniform_(log_min_shot_noise, log_max_shot_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_195": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([0.26])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_197": {
                "variable": {
                    "value": "read_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_read_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line(log_shot_noise) + n.sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_204": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.sqrt(variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "xyz2cams * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "random_ccm()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sin_74": {
                "input": {
                    "value": "torch.asin(1.0 - 2.0 * image) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_81": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(image, min=0.0, max=1.0)",
                            "Call"
                        ],
                        [
                            "image.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "inverse_smoothstep(image)",
                            "Call"
                        ],
                        [
                            "gamma_expansion(image)",
                            "Call"
                        ],
                        [
                            "apply_ccm(image, rgb2cam)",
                            "Call"
                        ],
                        [
                            "safe_invert_gains(image, rgb_gain, red_gain, blue_gain)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_96": {
                "tensors": {
                    "value": "(1.0 / red_gain, torch.tensor([1.0]), 1.0 / blue_gain)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_102": {
                "input": {
                    "value": "gray - inflection",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "[0.26]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image * shot_noise + read_noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_204": {
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image * shot_noise + read_noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "asin_74": {
                "input": {
                    "value": "1.0 - 2.0 * image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model/antialias.py": {
        "torch": {
            "Tensor_46": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_59": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(a[:, None] * a[None, :])",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor(a)",
                            "Call"
                        ],
                        [
                            "filt / torch.sum(filt)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_113": {
                "input": {
                    "value": "self.pad(inp)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.filt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/attention.py": {
        "torch": {
            "randn_24": {
                "variable": {
                    "value": "random_rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rotations_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, x.shape[-1], self.n_hashes, hash_buckets // 2)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "einsum_27": {
                "variable": {
                    "value": "rotated_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "btf,bfhi->bhti",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "rotated_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rotated_vecs, -rotated_vecs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "variable": {
                    "value": "hash_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotated_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('btf,bfhi->bhti', x, random_rotations)",
                            "Call"
                        ],
                        [
                            "torch.cat([rotated_vecs, -rotated_vecs], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_34": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_hashes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets * hash_buckets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "hash_codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hash_codes + offsets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(N, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "x_extra_back",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, -1:, ...], x[:, :, :-1, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "x_extra_forward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, 1:, ...], x[:, :, :1, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "x_att_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_embed_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common.batched_index_select(x_embed, mod_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, -1, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "y_att_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_embed_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common.batched_index_select(y_embed, mod_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, -1, C * self.reduction)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "x_att_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_att_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x_embed_sorted, (N, self.n_hashes, -1, C))",
                            "Call"
                        ],
                        [
                            "torch.cat([x_att_buckets, pad_x], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_att_buckets, (N, self.n_hashes, -1, self.chunk_size, C))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, -1, self.chunk_size, C)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "y_att_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_att_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(y_embed_sorted, (N, self.n_hashes, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "torch.cat([y_att_buckets, pad_y], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y_att_buckets, (N, self.n_hashes, -1, self.chunk_size, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "self.add_adjacent_buckets(y_att_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, -1, self.chunk_size, C * self.reduction)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_79": {
                "variable": {
                    "value": "x_match",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_att_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x_embed_sorted, (N, self.n_hashes, -1, C))",
                            "Call"
                        ],
                        [
                            "torch.cat([x_att_buckets, pad_x], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_att_buckets, (N, self.n_hashes, -1, self.chunk_size, C))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "einsum_86": {
                "variable": {
                    "value": "raw_score",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhkie,bhkje->bhkij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x_att_buckets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x_embed_sorted, (N, self.n_hashes, -1, C))",
                            "Call"
                        ],
                        [
                            "torch.cat([x_att_buckets, pad_x], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x_att_buckets, (N, self.n_hashes, -1, self.chunk_size, C))",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_89": {
                "variable": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bhkie,bhkje->bhkij', x_att_buckets, x_match)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_90": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_score - bucket_score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(raw_score, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, [N, self.n_hashes, -1])",
                            "Call"
                        ],
                        [
                            "bucket_score[:, :, :-padding].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, -1))",
                            "Call"
                        ],
                        [
                            "bucket_score.gather(1, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, self.n_hashes, L, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, self.n_hashes, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_94": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bukij,bukje->bukie",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(raw_score - bucket_score)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_embed_1, x_embed_2)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bukij,bukje->bukie', score, y_att_buckets)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, self.n_hashes, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "ret[:, :, :-padding, :].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "common.batched_index_select(ret, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, self.n_hashes, L, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "torch.sum(ret * probs, dim=1)",
                            "Call"
                        ],
                        [
                            "ret.permute(0, 2, 1).view(N, -1, H, W).contiguous() * self.res_scale + input",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, -1, C * self.reduction)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bukij,bukje->bukie', score, y_att_buckets)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, self.n_hashes, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "ret[:, :, :-padding, :].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "common.batched_index_select(ret, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, self.n_hashes, L, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "torch.sum(ret * probs, dim=1)",
                            "Call"
                        ],
                        [
                            "ret.permute(0, 2, 1).view(N, -1, H, W).contiguous() * self.res_scale + input",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, -1, C * self.reduction)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(raw_score, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, [N, self.n_hashes, -1])",
                            "Call"
                        ],
                        [
                            "bucket_score[:, :, :-padding].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, -1))",
                            "Call"
                        ],
                        [
                            "bucket_score.gather(1, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, self.n_hashes, L, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bukij,bukje->bukie', score, y_att_buckets)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, self.n_hashes, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "ret[:, :, :-padding, :].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, -1, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "common.batched_index_select(ret, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(ret, (N, self.n_hashes, L, C * self.reduction))",
                            "Call"
                        ],
                        [
                            "torch.sum(ret * probs, dim=1)",
                            "Call"
                        ],
                        [
                            "ret.permute(0, 2, 1).view(N, -1, H, W).contiguous() * self.res_scale + input",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, L, C * self.reduction)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(raw_score, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, [N, self.n_hashes, -1])",
                            "Call"
                        ],
                        [
                            "bucket_score[:, :, :-padding].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, -1))",
                            "Call"
                        ],
                        [
                            "bucket_score.gather(1, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, self.n_hashes, L, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(N, self.n_hashes, L, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bucket_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(raw_score, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, [N, self.n_hashes, -1])",
                            "Call"
                        ],
                        [
                            "bucket_score[:, :, :-padding].clone()",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, -1))",
                            "Call"
                        ],
                        [
                            "bucket_score.gather(1, undo_sort)",
                            "Call"
                        ],
                        [
                            "torch.reshape(bucket_score, (N, self.n_hashes, L, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_embed_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_match1(input)",
                            "Call"
                        ],
                        [
                            "x_embed_1.permute(0, 2, 3, 1).view((N, H * W, C))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_embed_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_match2(input)",
                            "Call"
                        ],
                        [
                            "x_embed_2.view(N, C, H * W)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(raw_score - bucket_score)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_embed_1, x_embed_2)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "x_final",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(raw_score - bucket_score)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_embed_1, x_embed_2)",
                            "Call"
                        ],
                        [
                            "F.softmax(score, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_assembly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_assembly(input)",
                            "Call"
                        ],
                        [
                            "x_assembly.view(N, -1, H * W).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[x, x_extra_back, x_extra_forward]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "x_att_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_att_buckets, pad_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "y_att_buckets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_att_buckets, pad_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/common.py": {
        "torch": {
            "PixelShuffle_790": {
                "variable": {
                    "value": "demo",
                    "type": "variable",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channelss",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_71": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "PixelShuffle_193": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_194": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.body1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, ksize, stride, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.body2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, ksize, stride, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.body3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels * 2, out_channels, ksize, stride, pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_266": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c0, r1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c1, r2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c2, r3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_343": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "variable": {
                    "value": "self.conv_du",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, d, 1, padding=0, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_346": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Softmax_350": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "inp_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(inp_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "inp_feats.view(batch_size, self.height, n_feats, inp_feats.shape[2], inp_feats.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_359": {
                "variable": {
                    "value": "feats_U",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(inp_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "inp_feats.view(batch_size, self.height, n_feats, inp_feats.shape[2], inp_feats.shape[3])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "attention_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attention_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fc(feats_Z) for fc in self.fcs]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(attention_vectors, dim=1)",
                            "Call"
                        ],
                        [
                            "attention_vectors.view(batch_size, self.height, n_feats, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.softmax(attention_vectors)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "feats_V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_feats * attention_vectors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_389": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.spatial(x_compress)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_401": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_feat * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_415": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sa_branch, ca_branch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_426": {
                "variable": {
                    "value": "self.top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 1, stride=1, padding=0, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "variable": {
                    "value": "self.bot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "downsamp(channels=in_channels, filt_size=3, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_453": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_464": {
                "variable": {
                    "value": "self.top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, 1, stride=1, padding=0, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_471": {
                "variable": {
                    "value": "self.bot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_491": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_504": {
                "modules": {
                    "value": "[DAU(int(n_feat * stride ** i))] * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleDict_510": {
                "variable": {
                    "value": "self.last_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_514": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_515": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_531": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_533": {
                "variable": {
                    "value": "self.selective_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SKFF(n_feat * stride ** i, height) for i in range(height)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_603": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_622": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_624": {
                "variable": {
                    "value": "self.conv_du",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, channel // reduction, 1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_650": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_669": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_689": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_40": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_376": {
                "tensors": {
                    "value": "(torch.max(x, 1)[0].unsqueeze(1), torch.mean(x, 1).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_641": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_26": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "n_prelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "init": {
                    "value": "neg_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_73": {},
            "cat_147": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "(x, x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "tensors": {
                    "value": "(x, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_237": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "in_channels": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_250": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(in_channels / reduction), 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PReLU_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PReLU_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_428": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PReLU_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_434": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_464": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PReLU_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_466": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PReLU_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_469": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_471": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_472": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_625": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_626": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_627": {
                "in_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_628": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_28": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(in_channels / reduction), 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(in_channels * stride)",
                            "Call"
                        ],
                        [
                            "int(in_channels // stride)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_376": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_376": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.body(x)",
                            "Call"
                        ],
                        [
                            "self.body(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_647": {
                "num_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_666": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PixelShuffle_705": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_711": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_729": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_735": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_376": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.body(x)",
                            "Call"
                        ],
                        [
                            "self.body(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/resnet.py": {
        "torch": {}
    },
    "model/tenet.py": {
        "torch": {
            "Sequential_123": {
                "*args": {
                    "value": "*m_resblock1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.mid_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_branch1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "*args": {
                    "value": "*m_resblock2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "pretrain_other",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "mm_47": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(np.reshape(np.asarray(info[info['camera'][0][i]]['ColorMatrix2']), (3, 3)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]])",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_50": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "ccm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(rgb2cam)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "red_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(asshotneutral[1] / asshotneutral[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "blue_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blue_gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(asshotneutral[1] / asshotneutral[2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "raw_image_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(noisy_bayer)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "raw_image_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(raw_image_in, raw_image_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_benchmark.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadBenchmarkPixelShift(args.benchmark_path, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ],
                        [
                            "LoadBenchmark(args.benchmark_path, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "img_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_img, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_pipe_dnd.py": {
        "torch": {
            "mm_51": {
                "variable": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(np.reshape(np.asarray(info[info['camera'][0][i]]['ColorMatrix2']), (3, 3)))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rgb2xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[0.4124564, 0.3575761, 0.1804375], [0.2126729, 0.7151522, 0.072175], [0.0193339, 0.119192, 0.9503041]])",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_54": {
                "variable": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "ccm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cam2rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(rgb2cam)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "red_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "red_gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(asshotneutral[1] / asshotneutral[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "blue_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blue_gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(asshotneutral[1] / asshotneutral[2])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "raw_image_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totensor_(raw_image_tmp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "raw_image_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "totensor_(variance)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "rgb2cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(xyz2cam, rgb2xyz)",
                            "Call"
                        ],
                        [
                            "rgb2cam / torch.sum(rgb2cam, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(raw_image_in, raw_image_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_pipe_pixelshift.py": {
        "torch": {
            "DataLoader_32": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadBenchmarkPixelShift(args.test_data, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "src_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(raw_image_tmp['img_out'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "img_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(src_img, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_realshot.py": {
        "torch": {
            "unsqueeze_65": {
                "variable": {
                    "value": "raw_image_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TF.to_tensor(rggb.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "img_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "w * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "raw_image_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(raw_image_in, raw_image_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadPixelShiftData(args.train_list, 'train', args.patch_size, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ],
                        [
                            "LoadSimDataUnproc(args.train_list, 'train', args.patch_size, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LoadPixelShiftData(args.val_list, 'val', args.patch_size, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ],
                        [
                            "LoadSimDataUnproc(args.val_list, 'val', args.patch_size, args.downsampler, args.scale, args.in_type, args.mid_type, args.out_type)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "L1Loss_66": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_235": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.exp_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.NET(args)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_69": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_decay_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/{}_checkpoint_latest.pth'.format(args.ckpt_dir, args.jobname)",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_71": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.max_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.lr * 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data[args.in_type], data['variance'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data[args.in_type], data['variance'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_216": {
                "tensors": {
                    "value": "(rgb_gt, rgb_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}