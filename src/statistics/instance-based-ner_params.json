{
    "models/base_model.py": {
        "tensorflow": {
            "ConfigProto_63": {
                "variable": {
                    "value": "sess_config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_65": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "self.saver",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.cfg['max_to_keep']",
                    "possible_values": []
                }
            },
            "merge_all_93": {
                "variable": {
                    "value": "self.summary",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "FileWriter_94": {
                "variable": {
                    "value": "self.train_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.cfg['summary_path'], 'train')",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "possible_values": []
                }
            },
            "FileWriter_97": {
                "variable": {
                    "value": "self.test_writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(self.cfg['summary_path'], 'test')",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_71": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_path",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_73": {
                "variable": {
                    "value": "ckpt",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.cfg['checkpoint_path']",
                    "possible_values": []
                }
            },
            "trainable_variables_79": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "variable",
                    "possible_values": []
                }
            },
            "sqrt_113": {
                "variable": {
                    "value": "stddev",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(variable - mean))",
                    "possible_values": []
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "name or 'summary'",
                    "possible_values": []
                }
            },
            "scalar_112": {
                "name": {
                    "value": "mean",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "tf.reduce_mean(variable)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_114": {
                "name": {
                    "value": "stddev",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(variable - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_115": {
                "name": {
                    "value": "max",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(variable)",
                    "possible_values": []
                }
            },
            "scalar_116": {
                "name": {
                    "value": "min",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(variable)",
                    "possible_values": []
                }
            },
            "histogram_117": {
                "name": {
                    "value": "histogram",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_120": {
                "units": {
                    "value": "num_units",
                    "possible_values": []
                }
            },
            "LSTMCell_121": {
                "units": {
                    "value": "num_units",
                    "possible_values": []
                }
            },
            "MultiRNNCell_127": {
                "cells": {
                    "value": "[self._create_single_rnn_cell(self.cfg['num_units']) for _ in range(self.cfg['num_layers'])]",
                    "possible_values": []
                }
            },
            "global_variables_initializer_103": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variables_initializer_106": {
                "var_list": {
                    "value": "variables",
                    "possible_values": [
                        [
                            "tf.contrib.framework.get_variables(scope_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_113": {
                "input_tensor": {
                    "value": "tf.square(variable - mean)",
                    "possible_values": []
                }
            },
            "reduce_max_115": {
                "input_tensor": {
                    "value": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_116": {
                "input_tensor": {
                    "value": "variable",
                    "possible_values": []
                }
            },
            "square_113": {
                "x": {
                    "value": "variable - mean",
                    "possible_values": []
                }
            },
            "trainable_variables_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/knn_models.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.words",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "words",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.tags",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "tags",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.neighbor_reps",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "neighbor_reps",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.neighbor_tags",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "neighbor_tags",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.neighbor_tag_one_hots",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "neighbor_tag_one_hots",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.keep_prob",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_keep_probability",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_rate",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.chars",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "chars",
                    "possible_values": []
                }
            },
            "tensordot_78": {
                "variable": {
                    "value": "self.similarity",
                    "possible_values": []
                },
                "a": {
                    "value": "self.span_rep",
                    "possible_values": []
                },
                "b": {
                    "value": "self.neighbor_reps",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1, -1]",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "self.neighbor_proba",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.similarity",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "variable": {
                    "value": "tags",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(self.tags, dtype=tf.float32)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "gold_label_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.neighbor_tags, tags)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reduce_sum_96": {
                "variable": {
                    "value": "self.gold_label_proba",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.clip_by_value(proba, 1e-10, 1.0)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "log_102": {
                "variable": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "x": {
                    "value": "self.gold_label_proba",
                    "possible_values": []
                }
            },
            "argmax_108": {
                "variable": {
                    "value": "neighbor_indices",
                    "possible_values": []
                },
                "input": {
                    "value": "self.similarity",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "gather_109": {
                "variable": {
                    "value": "knn_predicts",
                    "possible_values": []
                },
                "params": {
                    "value": "self.neighbor_tags",
                    "possible_values": []
                },
                "indices": {
                    "value": "neighbor_indices",
                    "possible_values": [
                        [
                            "tf.argmax(self.similarity, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "self.predicts",
                    "possible_values": []
                },
                "tensor": {
                    "value": "knn_predicts",
                    "possible_values": [
                        [
                            "tf.gather(self.neighbor_tags, neighbor_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(self.words)[0], -1)",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "one_hot_tags",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.neighbor_tag_one_hots",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, -1, self.tag_vocab_size]",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "proba",
                    "possible_values": []
                },
                "input": {
                    "value": "self.neighbor_proba",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "variable": {
                    "value": "self.marginal_proba",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "proba",
                    "possible_values": [
                        [
                            "self.neighbor_proba * gold_label_mask",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(self.neighbor_proba, axis=3)",
                            "Call"
                        ],
                        [
                            "proba * one_hot_tags",
                            "BinOp"
                        ],
                        [
                            "self.sess.run([self.marginal_proba], feed_dict)[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "argmax_124": {
                "variable": {
                    "value": "self.predicts",
                    "possible_values": []
                },
                "input": {
                    "value": "self.marginal_proba",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "similarity",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "neighbor_prob",
                    "possible_values": []
                }
            },
            "name_scope_87": {
                "name": {
                    "value": "gold_label_prob",
                    "possible_values": []
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                }
            },
            "scalar_104": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "prediction",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "prediction",
                    "possible_values": []
                }
            },
            "cast_89": {
                "x": {
                    "value": "self.tags",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "equal_92": {
                "x": {
                    "value": "self.neighbor_tags",
                    "possible_values": []
                },
                "y": {
                    "value": "tags",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.cast(self.tags, dtype=tf.float32), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_97": {
                "t": {
                    "value": "proba",
                    "possible_values": [
                        [
                            "self.neighbor_proba * gold_label_mask",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(self.neighbor_proba, axis=3)",
                            "Call"
                        ],
                        [
                            "proba * one_hot_tags",
                            "BinOp"
                        ],
                        [
                            "self.sess.run([self.marginal_proba], feed_dict)[0][0]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.losses, axis=-1)",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "shape_111": {
                "input": {
                    "value": "self.words",
                    "possible_values": []
                }
            }
        }
    },
    "models/network_components.py": {
        "tensorflow": {
            "get_variable_47": {
                "variable": {
                    "value": "filter_",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, height, num_channels, filter_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "bias",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "in_",
                    "possible_values": []
                },
                "x": {
                    "value": "in_",
                    "possible_values": [
                        [
                            "tf.layers.dropout(in_, rate=drop_rate, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_max_55": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.relu(xxc)",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "concat_out",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "values": {
                    "value": "outs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "scope or 'highway_layer'",
                    "possible_values": []
                }
            },
            "dropout_15": {
                "variable": {
                    "value": "trans",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - keep_prob",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_17": {
                "variable": {
                    "value": "trans",
                    "possible_values": []
                },
                "inputs": {
                    "value": "trans",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=1.0 - keep_prob, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(trans, units=hidden, use_bias=use_bias, bias_initializer=tf.constant_initializer(bias_init), activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(trans)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "trans",
                    "possible_values": []
                },
                "features": {
                    "value": "trans",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=1.0 - keep_prob, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(trans, units=hidden, use_bias=use_bias, bias_initializer=tf.constant_initializer(bias_init), activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(trans)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_22": {
                "variable": {
                    "value": "gate",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - keep_prob",
                    "possible_values": []
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_23": {
                "variable": {
                    "value": "gate",
                    "possible_values": []
                },
                "inputs": {
                    "value": "gate",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=1.0 - keep_prob, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(gate, units=hidden, use_bias=use_bias, bias_initializer=tf.constant_initializer(bias_init), activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "inputs.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "variable": {
                    "value": "gate",
                    "possible_values": []
                },
                "x": {
                    "value": "gate",
                    "possible_values": [
                        [
                            "tf.layers.dropout(inputs, rate=1.0 - keep_prob, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(gate, units=hidden, use_bias=use_bias, bias_initializer=tf.constant_initializer(bias_init), activation=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "scope or 'highway_network'",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "scope or 'conv1d'",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope or 'multi_conv1d'",
                    "possible_values": []
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "trans",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "gate",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "input": {
                    "value": "in_",
                    "possible_values": [
                        [
                            "tf.layers.dropout(in_, rate=drop_rate, training=is_train)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter_",
                    "possible_values": [
                        [
                            "tf.get_variable('filter', shape=[1, height, num_channels, filter_size], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "possible_values": [
                        [
                            "[1, 1, 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_55": {
                "features": {
                    "value": "xxc",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(in_, filter_, strides, padding) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_18": {
                "value": {
                    "value": "bias_init",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_24": {
                "value": {
                    "value": "bias_init",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/span_models.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "self.words",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "words",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.tags",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "tags",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.keep_prob",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_keep_probability",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_rate",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_261": {
                "variable": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.tags",
                    "possible_values": []
                }
            },
            "reduce_mean_263": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(self.losses, axis=-1)",
                    "possible_values": []
                }
            },
            "cast_277": {
                "variable": {
                    "value": "self.predicts",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.logits, axis=-1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "softmax_280": {
                "variable": {
                    "value": "self.proba",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "possible_values": []
                }
            },
            "placeholder_616": {
                "variable": {
                    "value": "self.words",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "words",
                    "possible_values": []
                }
            },
            "placeholder_617": {
                "variable": {
                    "value": "self.tags",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "tags",
                    "possible_values": []
                }
            },
            "placeholder_618": {
                "variable": {
                    "value": "self.seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "seq_len",
                    "possible_values": []
                }
            },
            "placeholder_619": {
                "variable": {
                    "value": "self.masks",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "possible_values": []
                }
            },
            "placeholder_624": {
                "variable": {
                    "value": "self.is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "placeholder_625": {
                "variable": {
                    "value": "self.keep_prob",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "rnn_keep_probability",
                    "possible_values": []
                }
            },
            "placeholder_626": {
                "variable": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_rate",
                    "possible_values": []
                }
            },
            "placeholder_627": {
                "variable": {
                    "value": "self.lr",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_665": {
                "variable": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.tags",
                    "possible_values": []
                }
            },
            "reduce_mean_668": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(self.losses, axis=-1)",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.chars",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "chars",
                    "possible_values": []
                }
            },
            "embedding_lookup_107": {
                "variable": {
                    "value": "word_emb",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.words",
                    "possible_values": []
                },
                "name": {
                    "value": "words_emb",
                    "possible_values": []
                }
            },
            "concat_150": {
                "variable": {
                    "value": "rnn_outs",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_outs",
                    "possible_values": [
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ],
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "rnn_outs",
                    "possible_values": []
                },
                "x": {
                    "value": "rnn_outs",
                    "possible_values": [
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ],
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_train",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "n_spans",
                    "possible_values": []
                },
                "x": {
                    "value": "n_words * (n_words + 1) / 2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "minimum_162": {
                "variable": {
                    "value": "num_upper",
                    "possible_values": []
                },
                "x": {
                    "value": "n_words",
                    "possible_values": [
                        [
                            "tf.shape(self.rnn_outs)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.cfg['max_span_len'] - 1",
                    "possible_values": []
                }
            },
            "band_part_163": {
                "variable": {
                    "value": "ones",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.fill_triangular(tf.ones(shape=[n_spans]), upper=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(ones, num_lower=tf.cast(0, dtype=tf.int32), num_upper=num_upper)",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "tf.cast(0, dtype=tf.int32)",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "num_upper",
                    "possible_values": [
                        [
                            "tf.minimum(n_words, self.cfg['max_span_len'] - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "self.span_indices",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.where(tf.not_equal(ones, tf.constant(0, dtype=tf.float32)))",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1, dim)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_178": {
                "variable": {
                    "value": "x_fw_pad",
                    "possible_values": []
                },
                "values": {
                    "value": "[pad, x_fw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_179": {
                "variable": {
                    "value": "x_bw_pad",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_bw, pad]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_181": {
                "variable": {
                    "value": "h_fw_i",
                    "possible_values": []
                },
                "params": {
                    "value": "x_fw_pad",
                    "possible_values": [
                        [
                            "tf.concat([pad, x_fw], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pad, x_fw], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(self.cfg['num_layers'])",
                            "Call"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_182": {
                "variable": {
                    "value": "h_fw_j",
                    "possible_values": []
                },
                "params": {
                    "value": "x_fw",
                    "possible_values": [
                        [
                            "self.rnn_outs[:, :, :dim]",
                            "Subscript"
                        ],
                        [
                            "self.rnn_outs[:, :, :dim]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "j",
                    "possible_values": [
                        [
                            "self.span_indices[1]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_183": {
                "variable": {
                    "value": "h_bw_i",
                    "possible_values": []
                },
                "params": {
                    "value": "x_bw",
                    "possible_values": [
                        [
                            "self.rnn_outs[:, :, dim:]",
                            "Subscript"
                        ],
                        [
                            "self.rnn_outs[:, :, dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(self.cfg['num_layers'])",
                            "Call"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_184": {
                "variable": {
                    "value": "h_bw_j",
                    "possible_values": []
                },
                "params": {
                    "value": "x_bw_pad",
                    "possible_values": [
                        [
                            "tf.concat([x_bw, pad], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_bw, pad], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "j + 1",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_188": {
                "variable": {
                    "value": "self.rnn_span_rep",
                    "possible_values": []
                },
                "values": {
                    "value": "[span_fw, span_bw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1, dim)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "x_fw_pad",
                    "possible_values": []
                },
                "values": {
                    "value": "[pad, x_fw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_204": {
                "variable": {
                    "value": "x_bw_pad",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_bw, pad]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_206": {
                "variable": {
                    "value": "h_fw_i",
                    "possible_values": []
                },
                "params": {
                    "value": "x_fw",
                    "possible_values": [
                        [
                            "self.rnn_outs[:, :, :dim]",
                            "Subscript"
                        ],
                        [
                            "self.rnn_outs[:, :, :dim]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(self.cfg['num_layers'])",
                            "Call"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_207": {
                "variable": {
                    "value": "h_fw_i_pad",
                    "possible_values": []
                },
                "params": {
                    "value": "x_fw_pad",
                    "possible_values": [
                        [
                            "tf.concat([pad, x_fw], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([pad, x_fw], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(self.cfg['num_layers'])",
                            "Call"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_208": {
                "variable": {
                    "value": "h_fw_j",
                    "possible_values": []
                },
                "params": {
                    "value": "x_fw",
                    "possible_values": [
                        [
                            "self.rnn_outs[:, :, :dim]",
                            "Subscript"
                        ],
                        [
                            "self.rnn_outs[:, :, :dim]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "j",
                    "possible_values": [
                        [
                            "self.span_indices[1]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_209": {
                "variable": {
                    "value": "h_bw_i",
                    "possible_values": []
                },
                "params": {
                    "value": "x_bw",
                    "possible_values": [
                        [
                            "self.rnn_outs[:, :, dim:]",
                            "Subscript"
                        ],
                        [
                            "self.rnn_outs[:, :, dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(self.cfg['num_layers'])",
                            "Call"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_210": {
                "variable": {
                    "value": "h_bw_j",
                    "possible_values": []
                },
                "params": {
                    "value": "x_bw",
                    "possible_values": [
                        [
                            "self.rnn_outs[:, :, dim:]",
                            "Subscript"
                        ],
                        [
                            "self.rnn_outs[:, :, dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "j",
                    "possible_values": [
                        [
                            "self.span_indices[1]",
                            "Subscript"
                        ],
                        [
                            "self.span_indices[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_211": {
                "variable": {
                    "value": "h_bw_j_pad",
                    "possible_values": []
                },
                "params": {
                    "value": "x_bw_pad",
                    "possible_values": [
                        [
                            "tf.concat([x_bw, pad], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x_bw, pad], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "j + 1",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_217": {
                "variable": {
                    "value": "self.rnn_span_rep",
                    "possible_values": []
                },
                "values": {
                    "value": "[span_add_fw, span_add_bw, span_minus_fw, span_minus_bw]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dense_225": {
                "variable": {
                    "value": "span_rep",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.rnn_span_rep",
                    "possible_values": []
                },
                "units": {
                    "value": "self.cfg['num_units']",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_228": {
                "variable": {
                    "value": "self.span_rep",
                    "possible_values": []
                },
                "x": {
                    "value": "span_rep",
                    "possible_values": [
                        [
                            "tf.layers.dense(self.rnn_span_rep, units=self.cfg['num_units'], use_bias=True)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_train",
                    "possible_values": []
                }
            },
            "get_variable_235": {
                "variable": {
                    "value": "null_label_emb",
                    "possible_values": []
                },
                "name": {
                    "value": "null_label_emb",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.cfg['num_units']]",
                    "possible_values": []
                }
            },
            "get_variable_238": {
                "variable": {
                    "value": "label_emb",
                    "possible_values": []
                },
                "name": {
                    "value": "label_emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.tag_vocab_size - 1, self.cfg['num_units']]",
                    "possible_values": []
                }
            },
            "concat_243": {
                "variable": {
                    "value": "self.label_embeddings",
                    "possible_values": []
                },
                "values": {
                    "value": "[null_label_emb, label_emb]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensordot_244": {
                "variable": {
                    "value": "self.logits",
                    "possible_values": []
                },
                "a": {
                    "value": "self.span_rep",
                    "possible_values": []
                },
                "b": {
                    "value": "self.label_embeddings",
                    "possible_values": []
                },
                "axes": {
                    "value": "[-1, -1]",
                    "possible_values": []
                }
            },
            "scalar_264": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "AdamOptimizer_268": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "possible_values": []
                }
            },
            "placeholder_621": {
                "variable": {
                    "value": "self.chars",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "chars",
                    "possible_values": []
                }
            },
            "concat_657": {
                "variable": {
                    "value": "rnn_outs",
                    "possible_values": []
                },
                "values": {
                    "value": "rnn_outs",
                    "possible_values": [
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ],
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dropout_658": {
                "variable": {
                    "value": "rnn_outs",
                    "possible_values": []
                },
                "x": {
                    "value": "rnn_outs",
                    "possible_values": [
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ],
                        [
                            "tf.concat(rnn_outs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(rnn_outs, rate=self.drop_rate, training=self.is_train)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_train",
                    "possible_values": []
                }
            },
            "scalar_669": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "embeddings",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.word_vocab_size, self.cfg['emb_dim']]",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "padding_token_emb",
                    "possible_values": []
                },
                "name": {
                    "value": "padding_emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.cfg['emb_dim']]",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "special_token_emb",
                    "possible_values": []
                },
                "name": {
                    "value": "spacial_emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, self.cfg['emb_dim']]",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "token_emb",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.load(self.cfg['pretrained_emb'])['embeddings']",
                    "possible_values": []
                },
                "name": {
                    "value": "emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.cfg['tuning_emb']",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "values": {
                    "value": "[padding_token_emb, special_token_emb, token_emb]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "self.char_embeddings",
                    "possible_values": []
                },
                "name": {
                    "value": "char_emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.char_vocab_size, self.cfg['char_emb_dim']]",
                    "possible_values": []
                }
            },
            "embedding_lookup_118": {
                "variable": {
                    "value": "char_emb",
                    "possible_values": []
                },
                "params": {
                    "value": "self.char_embeddings",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.chars",
                    "possible_values": []
                },
                "name": {
                    "value": "chars_emb",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "word_emb",
                    "possible_values": []
                },
                "values": {
                    "value": "[word_emb, char_represent]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dropout_134": {
                "variable": {
                    "value": "self.word_emb",
                    "possible_values": []
                },
                "x": {
                    "value": "word_emb",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.word_embeddings, self.words, name='words_emb')",
                            "Call"
                        ],
                        [
                            "tf.concat([word_emb, char_represent], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.drop_rate",
                    "possible_values": []
                },
                "training": {
                    "value": "self.is_train",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "bi_directional_rnn",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_148": {
                "variable": {
                    "value": "(rnn_outs, *_)",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ],
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ],
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.word_emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "name_scope_157": {
                "name": {
                    "value": "span_indices",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "rnn_span_rep",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "rnn_span_rep",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "span_projection",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "label_projection",
                    "possible_values": []
                }
            },
            "reduce_sum_263": {
                "input_tensor": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "train_step",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_271": {
                "variable": {
                    "value": "(grads, _)",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.cfg['grad_clip']",
                    "possible_values": []
                }
            },
            "argmax_277": {
                "input": {
                    "value": "self.logits",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "variable_scope_645": {
                "name_or_scope": {
                    "value": "bi_directional_rnn",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_654": {
                "variable": {
                    "value": "(rnn_outs, *_)",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "possible_values": [
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ],
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "possible_values": [
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ],
                        [
                            "self._create_rnn_cell()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.word_emb",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.seq_len",
                    "possible_values": []
                }
            },
            "reduce_sum_668": {
                "input_tensor": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_672": {
                "x": {
                    "value": "tf.argmax(self.logits, axis=-1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_673": {
                "x": {
                    "value": "self.masks",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "LSTMCell_70": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "units": {
                    "value": "self.cfg['num_units']",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.orthogonal",
                    "possible_values": []
                }
            },
            "DropoutWrapper_73": {
                "variable": {
                    "value": "cell",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.cfg['num_units'], initializer=tf.initializers.orthogonal)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell, state_keep_prob=self.keep_prob, input_keep_prob=self.keep_prob, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "self.keep_prob",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "self.keep_prob",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "MultiRNNCell_80": {
                "cells": {
                    "value": "[self._create_single_rnn_cell(self.cfg['num_units']) for _ in range(self.cfg['num_layers'])]",
                    "possible_values": []
                }
            },
            "shape_158": {
                "input": {
                    "value": "self.rnn_outs",
                    "possible_values": []
                }
            },
            "ones_160": {
                "shape": {
                    "value": "[n_spans]",
                    "possible_values": []
                }
            },
            "where_166": {
                "condition": {
                    "value": "tf.not_equal(ones, tf.constant(0, dtype=tf.float32))",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "self.rnn_outs",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "self.rnn_outs",
                    "possible_values": []
                }
            },
            "argmax_672": {
                "input": {
                    "value": "self.logits",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_163": {
                "x": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "not_equal_166": {
                "x": {
                    "value": "ones",
                    "possible_values": [
                        [
                            "tf.contrib.distributions.fill_triangular(tf.ones(shape=[n_spans]), upper=True)",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(ones, num_lower=tf.cast(0, dtype=tf.int32), num_upper=num_upper)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "constant_166": {
                "value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    }
}