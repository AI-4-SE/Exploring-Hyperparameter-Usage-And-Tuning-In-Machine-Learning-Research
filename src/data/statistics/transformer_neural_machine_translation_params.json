{
    "train/constants.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/data_loader.py": {
        "torch": {
            "from_numpy_106": {
                "variable": {
                    "value": "X_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bpe_src[self.batches_idx[l * self.hyperparams.BATCH_SIZE:(l + 1) * self.hyperparams.BATCH_SIZE]]",
                            "Subscript"
                        ],
                        [
                            "np.array(p.map(self.toktoi, src))",
                            "Call"
                        ],
                        [
                            "self.pad_batch(src)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "Y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bpe_tgt[self.batches_idx[l * self.hyperparams.BATCH_SIZE:(l + 1) * self.hyperparams.BATCH_SIZE]]",
                            "Subscript"
                        ],
                        [
                            "np.array(p.map(self.toktoi, tgt))",
                            "Call"
                        ],
                        [
                            "self.pad_batch(tgt)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformer/decoder.py": {
        "torch": {
            "ModuleList_11": {
                "variable": {
                    "value": "self.MultiHeadAttention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiHeadAttention(nb_heads, d_model, dropout) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_12": {
                "variable": {
                    "value": "self.EncoderDecoderAttention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiHeadAttention(nb_heads, d_model, dropout) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_13": {
                "variable": {
                    "value": "self.PositionWiseFeedForward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PositionWiseFeedForward(d_model, nb_neurons, dropout) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformer/encoder.py": {
        "torch": {
            "ModuleList_11": {
                "variable": {
                    "value": "self.MultiHeadAttention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MultiHeadAttention(nb_heads, d_model, dropout) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_12": {
                "variable": {
                    "value": "self.PositionWiseFeedForward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PositionWiseFeedForward(d_model, nb_neurons, dropout) for _ in range(self.nb_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "transformer/layers.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nb_words",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nb_dimensions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_13": {
                "variable": {
                    "value": "(Y, X)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "(Y, X)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_16": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "TEMP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2 * Y / nb_dimensions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_17": {
                "variable": {
                    "value": "temp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_18": {
                "variable": {
                    "value": "temp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nb_words, nb_dimensions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.lookup_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocabulary_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Q @ K.transpose(-2, -1) + mask) / np.sqrt(dk)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_88": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "heads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(heads, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_141": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "triu_63": {
                "input": {
                    "value": "torch.ones(mask2_shape[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_63": {
                "n": {
                    "value": "mask2_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "input": {
                    "value": "Q @ K.transpose(-2, -1) / np.sqrt(dk)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "data": {
                    "value": "nn.init.uniform_(torch.zeros(size, requires_grad=True), a=-std, b=std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_121": {
                "input": {
                    "value": "heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaled_dot_product_attention(Q2 @ self.W_q, K2 @ self.W_k, V2 @ self.W_v, mask)",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention(Q2 @ self.W_q, K2 @ self.W_k, V2 @ self.W_v)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.unbind(heads, dim=1), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "data": {
                    "value": "nn.init.uniform_(torch.zeros(size, requires_grad=True), a=-std, b=std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "mask2_shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "transformer/transformer.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.Linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hyperparams.D_MODEL",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocabulary_size_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "transformer/translator.py": {
        "torch": {
            "CrossEntropyLoss_29": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Transformer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_seq + 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "bos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "translation",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bos, Y[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_120": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Transformer(X, translation)",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(-1, output.size(-1))",
                            "Call"
                        ],
                        [
                            "self.Transformer.forward_decoder(X, enc, temp)",
                            "Call"
                        ],
                        [
                            "torch.argmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "p.grad.data ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.constants.WEIGHTS_FILE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}