{
    "models.py": {
        "torch": {
            "rand_168": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_173": {
                "variable": {
                    "value": "gradient_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gradients[:, 0] - numerical_gradient.squeeze()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_11": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "results.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "results.reshape(B, -1)",
                            "Call"
                        ],
                        [
                            "[torch.ones_like(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "results.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "results.reshape(B, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "results.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "results.reshape(B, -1)",
                            "Call"
                        ],
                        [
                            "[torch.ones_like(x)]",
                            "List"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "results.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "results.reshape(B, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "gradient * pe_gradient",
                            "BinOp"
                        ],
                        [
                            "gradient.view(B, -1, C)",
                            "Call"
                        ],
                        [
                            "torch.sum(gradient, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_gradient_cos",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_39": {
                "variable": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "gradient * pe_gradient",
                            "BinOp"
                        ],
                        [
                            "gradient.view(B, -1, C)",
                            "Call"
                        ],
                        [
                            "torch.sum(gradient, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_gradient_cos",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "layer_gradient_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ],
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ],
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cos_63": {
                "variable": {
                    "value": "cos_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "freq * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_64": {
                "variable": {
                    "value": "sin_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "freq * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "variable": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "gradient * pe_gradient",
                            "BinOp"
                        ],
                        [
                            "gradient.view(B, -1, C)",
                            "Call"
                        ],
                        [
                            "torch.sum(gradient, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_gradient_cos",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "layer_gradient_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ],
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ],
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sin_146": {
                "variable": {
                    "value": "middle_result",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "linear_result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layer(middle_result)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_158": {
                "variable": {
                    "value": "layer_gradient_cos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "saved_result[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_relu_mask",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ],
                        [
                            "gradient * pe_gradient",
                            "BinOp"
                        ],
                        [
                            "gradient.view(B, -1, C)",
                            "Call"
                        ],
                        [
                            "torch.sum(gradient, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "self.layers[-1].weight",
                            "Attribute"
                        ],
                        [
                            "gradient.repeat(B, 1)",
                            "Call"
                        ],
                        [
                            "gradient * layer_gradient_cos",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(gradient, layer_gradient_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "layer_gradient_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ],
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ],
                        [
                            "self.layers[i].weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(B, C, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_79": {
                "input": {
                    "value": "freq * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_78": {
                "input": {
                    "value": "freq * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test_grad_fitting_analytic.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "gradient_torch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_grad.astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xs.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ys.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "input_grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, xs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(siren_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "relu_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(relu_grad - gradient_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "relu_pe_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(relu_pe_grad - gradient_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_70": {
                "variable": {
                    "value": "siren_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(siren_grad - gradient_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test_grad_fitting_numerical.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "gradient_torch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_grad.astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xs.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ys.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "input_grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, xs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(siren_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "relu_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(relu_grad - gradient_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_81": {
                "variable": {
                    "value": "relu_pe_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(relu_pe_grad - gradient_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_82": {
                "variable": {
                    "value": "siren_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(siren_grad - gradient_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "grad",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "test_image_fitting.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "image_torch",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.astype(np.float32) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xs.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ys.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "input_grid",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, xs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(siren_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "relu_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(relu_recon - image_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "relu_pe_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(relu_pe_recon - image_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_55": {
                "variable": {
                    "value": "siren_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(siren_recon - image_torch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}