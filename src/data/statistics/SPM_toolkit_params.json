{
    "DecAtt/main_mnli.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_322": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_109": {
                "seed": {
                    "value": "123456",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_299": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_316": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_299": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_308": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_303": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_308": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DecAtt/main_quora.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_309": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_286": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_303": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_295": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_290": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_295": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DecAtt/main_snli.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_61": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_338": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_315": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_332": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_315": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_324": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_319": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DecAtt/main_sts.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_63": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_340": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_317": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_334": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_317": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_326": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_321": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_326": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "DecAtt/main_trecqa.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_74": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_186": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_203": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_186": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_195": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_190": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "DecAtt/main_url.py": {
        "torch": {
            "cat_75": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tmp)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tmp)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_305": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tmp)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "unsqueeze_120": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tmp)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_282": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_299": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_291": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DecAtt(200, num_class, len(tokens), EMBEDDING_DIM, PROJECTED_EMBEDDING_DIM, pretrained_emb)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "basepath + '/model_DecAtt_domain_adaptation_' + task + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_286": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_291": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "DecAtt/main_wikiqa.py": {
        "torch": {
            "cat_58": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([left_sents, left_sent])",
                            "Call"
                        ],
                        [
                            "Variable(left_sents)",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sents, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat((right_sents, right_sent))",
                            "Call"
                        ],
                        [
                            "Variable(right_sents)",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in lsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in lsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(left_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_sents, left_sent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dict[word].view(1, -1) for word in rsent)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((dict[word].view(1, -1) for word in rsent))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(right_sent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_sents, right_sent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_186": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_203": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_186": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "normal_195": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(EMBEDDING_DIM)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_190": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "EMBEDDING_DIM",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "DecAtt/model.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_16": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_28": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.bias_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_sentence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_69": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear_layer_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.linear_layer_attend",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.linear_layer_compare",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.linear_layer_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_attentions.view(-1, raw_attentions.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_146": {
                "variable": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_attend(sent2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(repr2, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_147": {
                "variable": {
                    "value": "raw_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_attend(sent1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_attend(sent2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(repr2, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_153": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_155": {
                "variable": {
                    "value": "raw_attentions_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_intra, f_intra_t)",
                            "Call"
                        ],
                        [
                            "raw_attentions + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(repr1, repr2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions_t)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_174": {
                "variable": {
                    "value": "sent_alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence, soft_alignment]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "v1_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent1, beta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_189": {
                "variable": {
                    "value": "v2_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent2, alpha)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_117": {
                "variable": {
                    "value": "f_intra_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_intra(embed_sent)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "raw_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_intra(embed_sent)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_intra_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(f_intra, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_120": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_sent.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_123": {
                "variable": {
                    "value": "clipped_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_matrix - r.view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.distance_biases - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias_embedding(clipped_index)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "attended",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "embed_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_project(embed_sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_132": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_sent, attended]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_77": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_83": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "[v1_sum, v2_sum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DecAtt/model_0.851.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_16": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_28": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.bias_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_sentence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_69": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear_layer_project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.linear_layer_attend",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.linear_layer_compare",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.linear_layer_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_attentions.view(-1, raw_attentions.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_145": {
                "variable": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_attend(sent2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(repr2, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "raw_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "repr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_attend(sent1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_attend(sent2)",
                            "Call"
                        ],
                        [
                            "torch.transpose(repr2, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_152": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent2)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_154": {
                "variable": {
                    "value": "raw_attentions_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(f_intra, f_intra_t)",
                            "Call"
                        ],
                        [
                            "raw_attentions + bias",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(repr1, repr2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions_t)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_173": {
                "variable": {
                    "value": "sent_alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence, soft_alignment]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_187": {
                "variable": {
                    "value": "v1_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent1, beta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_188": {
                "variable": {
                    "value": "v2_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent2, alpha)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "f_intra_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_intra(embed_sent)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "raw_attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_layer_intra(embed_sent)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "f_intra_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(f_intra, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_119": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "time_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_sent.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_122": {
                "variable": {
                    "value": "clipped_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_matrix - r.view(-1, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "self.distance_biases - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_127": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias_embedding(clipped_index)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "attended",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "embed_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embedding(embed_sent)",
                            "Call"
                        ],
                        [
                            "self.linear_layer_project(embed_sent)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_sent, attended]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_79": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "[v1_sum, v2_sum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "DecAtt/preprocess.py": {
        "torch": {}
    },
    "DecAtt/util.py": {
        "torch": {}
    },
    "ESIM/Tree_IM/main_batch.py": {
        "torch": {
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_105": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_166": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_mnli.py": {
        "torch": {
            "CrossEntropyLoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_111": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_183": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_pit.py": {
        "torch": {
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_102": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_quora.py": {
        "torch": {
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_105": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_166": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_snli.py": {
        "torch": {
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_105": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_166": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_sts.py": {
        "torch": {
            "KLDivLoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_126": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_126": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_184": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_trecqa.py": {
        "torch": {
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_105": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_105": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_166": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_url.py": {
        "torch": {
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_102": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_158": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/main_wikiqa.py": {
        "torch": {
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_107": {
                "variable": {
                    "value": "pretrained_emb[worddicts[word]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(dim_word)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "dim_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                }
            },
            "sqrt_168": {
                "input": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "grad_norm + m.grad.data.norm() ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ESIM/Tree_IM/model.py": {
        "torch": {
            "Tensor_27": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.cx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.ox",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ox(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_107": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cx(input) + self.ulh(lh) + self.urh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ix(input) + self.ilh(lh) + self.irh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fx(input) + self.lflh(lh) + self.lfrh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fx(input) + self.rflh(lh) + self.rfrh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ox(input) + self.olh(lh) + self.orh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "one_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p.view(p.numel()) for p in params]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Dropout_205": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_206": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.linear_layer_compare",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * num_units, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.linear_layer_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_239": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_attentions.view(-1, raw_attentions.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.tree_lstm_intra.all_ststes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_259": {
                "variable": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent2, tree2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sent2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_260": {
                "variable": {
                    "value": "self.raw_attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent1, tree1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sent1, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "repr2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(sent2, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(self.raw_attentions)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent2, tree2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sent2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_264": {
                "variable": {
                    "value": "raw_attentions_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.raw_attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_266": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention_softmax3d(raw_attentions_t)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent1, tree1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sent1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_272": {
                "variable": {
                    "value": "sent_alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sentence, soft_alignment, sentence - soft_alignment, sentence * soft_alignment]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.tree_lstm_compare.all_ststes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_287": {
                "variable": {
                    "value": "v1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent1, beta, tree1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_288": {
                "variable": {
                    "value": "v2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent2, alpha, tree2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_289": {
                "variable": {
                    "value": "(v1_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent1, beta, tree1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_290": {
                "variable": {
                    "value": "(v2_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent2, alpha, tree2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_298": {
                "variable": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent1, tree1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sent1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_299": {
                "variable": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(sent2, tree2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sent2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_303": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent1, beta, tree1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_304": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compare(sent2, alpha, tree2)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(v2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "rh",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cx(input)",
                            "Call"
                        ],
                        [
                            "i * u + lf * lc + rf * rc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_113": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cx(input)",
                            "Call"
                        ],
                        [
                            "i * u + lf * lc + rf * rc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_210": {
                "in_features": {
                    "value": "4 * num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_215": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "4 * num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_216": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_235": {
                "ndarray": {
                    "value": "self.pretrained_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_291": {
                "tensors": {
                    "value": "(v1_mean, v1_max, v2_mean, v2_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_75": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ESIM/Tree_IM/model_batch.py": {
        "torch": {
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_42": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cx(input) + self.ulh(lh) + self.urh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ix(input) + self.ilh(lh) + self.irh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fx(input) + self.lflh(lh) + self.lfrh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_93": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fx(input) + self.rflh(lh) + self.rfrh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ox(input) + self.olh(lh) + self.orh(rh)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_182": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_183": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.linear_layer_compare",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * num_units, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.linear_layer_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_attentions.view(-1, raw_attentions.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_261": {
                "variable": {
                    "value": "v1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tree_lstm_compare(inp1, x1_mask, x1_left_mask, x1_right_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_262": {
                "variable": {
                    "value": "v2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tree_lstm_compare(inp2, x2_mask, x2_left_mask, x2_right_mask)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_263": {
                "variable": {
                    "value": "(v1_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tree_lstm_compare(inp1, x1_mask, x1_left_mask, x1_right_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_264": {
                "variable": {
                    "value": "(v2_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tree_lstm_compare(inp2, x2_mask, x2_left_mask, x2_right_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_277": {
                "variable": {
                    "value": "ctx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(x1, x1_mask, x1_left_mask, x1_right_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_278": {
                "variable": {
                    "value": "ctx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformation_input(x2, x2_mask, x2_left_mask, x2_right_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_285": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx1.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ctx2.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_286": {
                "variable": {
                    "value": "weight_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_matrix - weight_matrix.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_286": {
                "variable": {
                    "value": "weight_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_287": {
                "variable": {
                    "value": "weight_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_matrix - weight_matrix.max(2, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_287": {
                "variable": {
                    "value": "weight_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "rh",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_128": {
                "variable": {
                    "value": "lh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_left_mask[step][:, :, None] * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_129": {
                "variable": {
                    "value": "rh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_right_mask[step][:, :, None] * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "lc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_left_mask[step][:, :, None] * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "rc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_right_mask[step][:, :, None] * c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_217": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_219": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i * u + lf * lc + rf * rc",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(x.size(1), x.size(0), x.size(2)))",
                            "Call"
                        ],
                        [
                            "c.cuda()",
                            "Call"
                        ],
                        [
                            "x_mask[step][:, None, None] * new_c + (1 - x_mask[step][:, None, None]) * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(step_h, 1), h[:, step + 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.unsqueeze(step_c, 1), c[:, step + 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "4 * num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_190": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_197": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "4 * num_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_238": {
                "ndarray": {
                    "value": "self.pretrained_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_265": {
                "tensors": {
                    "value": "(v1_mean, v1_max, v2_mean, v2_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[:, :step, :], torch.unsqueeze(step_h, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c[:, :step, :], torch.unsqueeze(step_c, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h[:, :step, :], torch.unsqueeze(step_h, 1), h[:, step + 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c[:, :step, :], torch.unsqueeze(step_c, 1), c[:, step + 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_296": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_1 / weight_matrix_1.sum(0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_297": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_2 / weight_matrix_2.sum(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_134": {
                "input": {
                    "value": "step_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_135": {
                "input": {
                    "value": "step_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_137": {
                "input": {
                    "value": "step_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "input": {
                    "value": "step_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_140": {
                "input": {
                    "value": "step_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_141": {
                "input": {
                    "value": "step_c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ESIM/model_batch.py": {
        "torch": {
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_42": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_44": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_52": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_54": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_87": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cx(input) + self.ch(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ix(input) + self.ih(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fx(input) + self.fh(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ox(input) + self.oh(h)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_164": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "variable": {
                    "value": "self.linear_layer_compare",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * num_units * 2, num_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.linear_layer_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_218": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_attentions.view(-1, raw_attentions.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_237": {
                "variable": {
                    "value": "v1_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp1, x1_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v1, torch.index_select(v1_r, 0, idx_1)), 2)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp1, x1_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v1, torch.index_select(v1_r, 0, idx_1)), 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_238": {
                "variable": {
                    "value": "v2_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp2, x2_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v2, torch.index_select(v2_r, 0, idx_2)), 2)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp2, x2_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v2, torch.index_select(v2_r, 0, idx_2)), 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_239": {
                "variable": {
                    "value": "(v1_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp1, x1_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v1, torch.index_select(v1_r, 0, idx_1)), 2)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp1, x1_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v1, torch.index_select(v1_r, 0, idx_1)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_240": {
                "variable": {
                    "value": "(v2_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp2, x2_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v2, torch.index_select(v2_r, 0, idx_2)), 2)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp2, x2_mask)",
                            "Call"
                        ],
                        [
                            "torch.cat((v2, torch.index_select(v2_r, 0, idx_2)), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_262": {
                "variable": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "simCube_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor1[0].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube_0, tensor1[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor2[0].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube_1, tensor2[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_282": {
                "variable": {
                    "value": "x1_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embedding(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_283": {
                "variable": {
                    "value": "x1_mask_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_289": {
                "variable": {
                    "value": "x2_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embedding(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(x2)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(x2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_290": {
                "variable": {
                    "value": "x2_mask_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_297": {
                "variable": {
                    "value": "ctx1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj1, torch.index_select(proj1_r, 0, idx_1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "ctx2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj2, torch.index_select(proj2_r, 0, idx_2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx1.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ctx2.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_306": {
                "variable": {
                    "value": "weight_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_matrix - weight_matrix.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_306": {
                "variable": {
                    "value": "weight_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_307": {
                "variable": {
                    "value": "weight_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_matrix - weight_matrix.max(2, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_307": {
                "variable": {
                    "value": "weight_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_323": {
                "variable": {
                    "value": "inp1_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp1))",
                            "Call"
                        ],
                        [
                            "torch.cat([ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_324": {
                "variable": {
                    "value": "inp2_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp2))",
                            "Call"
                        ],
                        [
                            "torch.cat([ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_330": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, torch.index_select(v1_r, 0, idx_1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, torch.index_select(v2_r, 0, idx_2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_352": {
                "variable": {
                    "value": "x1_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embedding(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x1)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(x1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_353": {
                "variable": {
                    "value": "x1_mask_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_359": {
                "variable": {
                    "value": "x2_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embedding(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(x2)",
                            "Call"
                        ],
                        [
                            "self.word_embedding(x2)",
                            "Call"
                        ],
                        [
                            "self.dropout(x2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_360": {
                "variable": {
                    "value": "x2_mask_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_367": {
                "variable": {
                    "value": "ctx1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj1, torch.index_select(proj1_r, 0, idx_1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_368": {
                "variable": {
                    "value": "ctx2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(proj2, torch.index_select(proj2_r, 0, idx_2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_375": {
                "variable": {
                    "value": "weight_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx1.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ctx2.permute(1, 2, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_376": {
                "variable": {
                    "value": "weight_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_matrix - weight_matrix.max(1, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_376": {
                "variable": {
                    "value": "weight_matrix_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_377": {
                "variable": {
                    "value": "weight_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight_matrix - weight_matrix.max(2, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_377": {
                "variable": {
                    "value": "weight_matrix_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_418": {
                "variable": {
                    "value": "inp1_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp1))",
                            "Call"
                        ],
                        [
                            "torch.cat([ctx1, ctx1_, ctx1 * ctx1_, ctx1 - ctx1_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_419": {
                "variable": {
                    "value": "inp2_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp2))",
                            "Call"
                        ],
                        [
                            "torch.cat([ctx2, ctx2_, ctx2 * ctx2_, ctx2 - ctx2_], 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.linear_layer_compare(inp2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_425": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v1, torch.index_select(v1_r, 0, idx_1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v2, torch.index_select(v2_r, 0, idx_2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.mem_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "all_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_193": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_195": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_92": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i * u + f * c",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(x.size(1), x.size(2)))",
                            "Call"
                        ],
                        [
                            "c.cuda()",
                            "Call"
                        ],
                        [
                            "x_mask[step][:, None] * step_c + (1.0 - x_mask[step])[:, None] * c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_168": {
                "in_features": {
                    "value": "4 * num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_168": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_173": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "in_features": {
                    "value": "4 * num_units * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "in_features": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_214": {
                "ndarray": {
                    "value": "self.pretrained_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "(v1_mean, v1_max, v2_mean, v2_max)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "ortho_weight(self.mem_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Linear(self.mem_dim, self.mem_dim, bias=False)",
                            "Call"
                        ],
                        [
                            "o * F.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.zeros(x.size(1), x.size(2)))",
                            "Call"
                        ],
                        [
                            "h.cuda()",
                            "Call"
                        ],
                        [
                            "x_mask[step][:, None] * step_h + (1.0 - x_mask[step])[:, None] * h",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "simCube_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube_0, tensor1[i].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "simCube_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube_1, tensor2[j].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "index_select_297": {
                "input": {
                    "value": "proj1_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_intra(x1_r, x1_mask_r)",
                            "Call"
                        ],
                        [
                            "self.lstm_intra(x1_r, x1_mask_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_298": {
                "input": {
                    "value": "proj2_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_intra(x2_r, x2_mask_r)",
                            "Call"
                        ],
                        [
                            "self.lstm_intra(x2_r, x2_mask_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_330": {
                "input": {
                    "value": "v1_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp1_r, x1_mask)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp1_r, x1_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_331": {
                "input": {
                    "value": "v2_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp2_r, x2_mask)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp2_r, x2_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_367": {
                "input": {
                    "value": "proj1_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_intra(x1_r, x1_mask_r)",
                            "Call"
                        ],
                        [
                            "self.lstm_intra(x1_r, x1_mask_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_368": {
                "input": {
                    "value": "proj2_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_intra(x2_r, x2_mask_r)",
                            "Call"
                        ],
                        [
                            "self.lstm_intra(x2_r, x2_mask_r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_425": {
                "input": {
                    "value": "v1_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp1_r, x1_mask)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp1_r, x1_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x1.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_426": {
                "input": {
                    "value": "v2_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_compare(inp2_r, x2_mask)",
                            "Call"
                        ],
                        [
                            "self.lstm_compare(inp2_r, x2_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "[i for i in range(x2.size(0) - 1, -1, -1)]",
                            "ListComp"
                        ],
                        [
                            "Variable(torch.cuda.LongTensor(idx_2))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(idx_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_316": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_1 / weight_matrix_1.sum(0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "weight_matrix_1 / weight_matrix_1.sum(0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_317": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_2 / weight_matrix_2.sum(1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "weight_matrix_2 / weight_matrix_2.sum(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_389": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_1 / weight_matrix_1.sum(0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "weight_matrix_1 / weight_matrix_1.sum(0, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_390": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_matrix_2 / weight_matrix_2.sum(1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "weight_matrix_2 / weight_matrix_2.sum(1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "ESIM/util.py": {
        "torch": {}
    },
    "PWIM/main.py": {
        "torch": {
            "MultiMarginLoss_292": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "margin": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_295": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_309": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(lsents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_266": {
                "variable": {
                    "value": "fake_dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_318": {},
            "save_366": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DeepPairWiseWord(EMBEDDING_DIM, HIDDEN_DIM, 1, task, granularity, num_class, dict, fake_dict, dict_char_ngram, oov, tokens, word_freq, feature_maps, kernels, charcnn_embedding_size, max_word_length, character_ngrams, c2w_mode, character_ngrams_overlap, word_mode, combine_mode, lm_mode, args.deep_CNN)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./saved_dir/char_CNN_unigram.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_253": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_273": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "PWIM/main_sts.py": {
        "torch": {
            "RMSprop_519": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_488": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(lsents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_493": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_557": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(lsents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_506": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(lsents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiMarginLoss_509": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "margin": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_513": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(lsents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiLabelSoftMarginLoss_516": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_234": {
                "variable": {
                    "value": "fake_dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_208": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_257": {
                "variable": {
                    "value": "fake_dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_601": {},
            "Tensor_241": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_282": {
                "variable": {
                    "value": "fake_dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_414": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_264": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_315": {
                "variable": {
                    "value": "fake_dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_289": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_322": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_688": {
                "input": {
                    "value": "raw_output",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PWIM/model.py": {
        "torch": {
            "LSTM_145": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_272": {
                "variable": {
                    "value": "simCube1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(h_fw_0, torch.transpose(h_fw_1, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_273": {
                "variable": {
                    "value": "simCube2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(h_bw_0, torch.transpose(h_bw_1, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_274": {
                "variable": {
                    "value": "simCube3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(h_bi_0, torch.transpose(h_bi_1, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_275": {
                "variable": {
                    "value": "simCube4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(h_sum_0, torch.transpose(h_sum_1, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "neg_276": {
                "variable": {
                    "value": "simCube5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pairwise_distance(simCube5_0, simCube5_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_277": {
                "variable": {
                    "value": "simCube5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube5.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "neg_278": {
                "variable": {
                    "value": "simCube6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pairwise_distance(simCube6_0, simCube6_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_279": {
                "variable": {
                    "value": "simCube6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube6.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "neg_280": {
                "variable": {
                    "value": "simCube7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pairwise_distance(simCube7_0, simCube7_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "simCube7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube7.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "neg_282": {
                "variable": {
                    "value": "simCube8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.pairwise_distance(simCube8_0, simCube8_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_283": {
                "variable": {
                    "value": "simCube8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube8.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_285": {
                "variable": {
                    "value": "simCube9",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "simCube5_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube5_0, h_fw_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube5_1, h_fw_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_286": {
                "variable": {
                    "value": "simCube9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube9.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_287": {
                "variable": {
                    "value": "simCube10",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "simCube6_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bw_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube6_0, h_bw_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube6_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bw_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube6_1, h_bw_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_288": {
                "variable": {
                    "value": "simCube10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube10.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_289": {
                "variable": {
                    "value": "simCube11",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "simCube7_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bi_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube7_0, h_bi_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube7_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bi_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube7_1, h_bi_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_290": {
                "variable": {
                    "value": "simCube11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube11.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_291": {
                "variable": {
                    "value": "simCube12",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "simCube8_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_sum_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube8_0, h_sum_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube8_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_sum_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube8_1, h_sum_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_292": {
                "variable": {
                    "value": "simCube12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube12.view(len0, len1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube9, simCube5, simCube1, simCube10, simCube6, simCube2, simCube12, simCube8, simCube4, simCube11, simCube7, simCube3, simCube13)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "variable": {
                    "value": "s1tag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "simCube.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "s2tag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "simCube.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_314": {
                "variable": {
                    "value": "(sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube[6].view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_336": {
                "variable": {
                    "value": "s1tag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "simCube.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_337": {
                "variable": {
                    "value": "s2tag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "simCube.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_338": {
                "variable": {
                    "value": "(sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube[7].view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_365": {
                "variable": {
                    "value": "focusCube",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((simCube9, simCube5, simCube1, simCube10, simCube6, simCube2, simCube12, simCube8, simCube4, simCube11, simCube7, simCube3, simCube13), 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_369": {
                "variable": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focusCube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(simCube, Variable(mask))",
                            "Call"
                        ],
                        [
                            "F.pad(simCube, (0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2)))[0]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ],
                        [
                            "F.pad(simCube, (0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2)))[0]",
                            "Subscript"
                        ],
                        [
                            "self.similarity_focus(simCube)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_371": {
                "variable": {
                    "value": "focusCube",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focusCube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(simCube, Variable(mask))",
                            "Call"
                        ],
                        [
                            "F.pad(simCube, (0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2)))[0]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ],
                        [
                            "F.pad(simCube, (0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2)))[0]",
                            "Subscript"
                        ],
                        [
                            "self.similarity_focus(simCube)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_393": {
                "variable": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focusCube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(simCube, Variable(mask))",
                            "Call"
                        ],
                        [
                            "F.pad(simCube, (0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2)))[0]",
                            "Subscript"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ],
                        [
                            "F.pad(simCube, (0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2)))[0]",
                            "Subscript"
                        ],
                        [
                            "self.similarity_focus(simCube)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_740": {
                "variable": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.dict[word].view(1, self.embedding_dim) for word in lsents], 0)",
                            "Call"
                        ],
                        [
                            "Variable(sentA)",
                            "Call"
                        ],
                        [
                            "sentA.cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.copied_word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_741": {
                "variable": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.dict[word].view(1, self.embedding_dim) for word in rsents], 0)",
                            "Call"
                        ],
                        [
                            "Variable(sentB)",
                            "Call"
                        ],
                        [
                            "sentB.cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.copied_word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_760": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "self.c2w_embedding(input)",
                            "Call"
                        ],
                        [
                            "input.view(-1, 1, 50)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(indices))",
                            "Call"
                        ],
                        [
                            "input.cuda()",
                            "Call"
                        ],
                        [
                            "self.char_cnn_embedding(input)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(input, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_768": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.squeeze(out1), torch.squeeze(out2), torch.squeeze(out3), torch.squeeze(out4), torch.squeeze(out5), torch.squeeze(out6), torch.squeeze(out7)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_899": {
                "variable": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.dict[word].view(1, self.embedding_dim) for word in lsents], 0)",
                            "Call"
                        ],
                        [
                            "Variable(sentA)",
                            "Call"
                        ],
                        [
                            "sentA.cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.copied_word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_900": {
                "variable": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.dict[word].view(1, self.embedding_dim) for word in rsents], 0)",
                            "Call"
                        ],
                        [
                            "Variable(sentB)",
                            "Call"
                        ],
                        [
                            "sentB.cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.copied_word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1014": {
                "variable": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.dict[word].view(1, self.embedding_dim) for word in lsents], 0)",
                            "Call"
                        ],
                        [
                            "Variable(sentA)",
                            "Call"
                        ],
                        [
                            "sentA.cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.copied_word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1015": {
                "variable": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.dict[word].view(1, self.embedding_dim) for word in rsents], 0)",
                            "Call"
                        ],
                        [
                            "Variable(sentB)",
                            "Call"
                        ],
                        [
                            "sentB.cuda()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.copied_word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "self.word_embedding(indices)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1016": {
                "variable": {
                    "value": "sentA2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentA2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output2",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentA2, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1017": {
                "variable": {
                    "value": "sentB2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentB2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output2",
                            "Name"
                        ],
                        [
                            "torch.unsqueeze(sentB2, 0).view(-1, 1, self.embedding_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_24": {
                "variable": {
                    "value": "self.lm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_25": {
                "variable": {
                    "value": "self.lm_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "variable": {
                    "value": "self.lm_tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.lm_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_91": {
                "variable": {
                    "value": "self.c2w_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dict_char_ngram)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_92": {
                "variable": {
                    "value": "self.char_cnn_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(dict_char_ngram)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "charcnn_embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_93": {
                "variable": {
                    "value": "self.lstm_c2w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.charCNN_filter1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[0], (kernels[0], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.charCNN_filter2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[1], (kernels[1], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.charCNN_filter3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[2], (kernels[2], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.charCNN_filter4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[3], (kernels[3], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.charCNN_filter5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[4], (kernels[4], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.charCNN_filter6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[5], (kernels[5], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.charCNN_filter7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, feature_maps[6], (kernels[6], charcnn_embedding_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.transform_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1100, 1100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.char_cnn_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1100, 1100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.down_sampling_200",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.down_sampling_300",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "variable": {
                    "value": "self.mlp_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.limit * self.limit * 13, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(13, 128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "self.layer1_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(26, 128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 164, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(164, 192, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_167": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(192, 192, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(192, 128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_175": {
                "variable": {
                    "value": "self.layer5_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(192, 128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128, num_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_295": {
                "variable": {
                    "value": "simCube13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(torch.zeros(len0, len1)).cuda() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_297": {
                "variable": {
                    "value": "simCube13",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(torch.zeros(len0, len1)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_309": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(simCube.size(0), simCube.size(1), simCube.size(2)).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_311": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(simCube.size(0), simCube.size(1), simCube.size(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_746": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_757": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_848": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_907": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_910": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_word, output_char)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_911": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp_layer(focusCube.view(-1))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.cat((output_word, output_char), 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(result, 1, indices_reduce_dim)",
                            "Call"
                        ],
                        [
                            "0.25 * output_word + 0.75 * output_char",
                            "BinOp"
                        ],
                        [
                            "0.5 * output_word + 0.5 * output_char",
                            "BinOp"
                        ],
                        [
                            "0.75 * output_word + 0.25 * output_char",
                            "BinOp"
                        ],
                        [
                            "(1 - gate) * output_word + gate * output_char",
                            "BinOp"
                        ],
                        [
                            "gate * output_word + (1 - gate) * output_char",
                            "BinOp"
                        ],
                        [
                            "output_char",
                            "Name"
                        ],
                        [
                            "output_word",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices_reduce_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor([i * 2 for i in range(self.embedding_dim)]))",
                            "Call"
                        ],
                        [
                            "indices_reduce_dim.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_937": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_1025": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(tokens)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_138": {
                "variable": {
                    "value": "self.copied_word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(tokens)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "h_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_fw, h_fw_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "h_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_bw, h_bw_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_272": {
                "input": {
                    "value": "h_fw_0",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(h_fw_1, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_273": {
                "input": {
                    "value": "h_bw_0",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(h_bw_1, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_274": {
                "input": {
                    "value": "h_bi_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out0.view(out0.size(0), out0.size(2))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(h_bi_1, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_275": {
                "input": {
                    "value": "h_sum_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_0 + h_bw_0",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(h_sum_1, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pairwise_distance_276": {
                "x1": {
                    "value": "simCube5_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube5_0, h_fw_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube5_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube5_1, h_fw_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pairwise_distance_278": {
                "x1": {
                    "value": "simCube6_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bw_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube6_0, h_bw_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube6_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bw_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube6_1, h_bw_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pairwise_distance_280": {
                "x1": {
                    "value": "simCube7_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bi_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube7_0, h_bi_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube7_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_bi_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube7_1, h_bi_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pairwise_distance_282": {
                "x1": {
                    "value": "simCube8_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_sum_0[i].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube8_0, h_sum_0[i].view(1, -1)))",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "simCube8_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_sum_1[j].view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((simCube8_1, h_sum_1[j].view(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_370": {
                "input": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((simCube9, simCube5, simCube1, simCube10, simCube6, simCube2, simCube12, simCube8, simCube4, simCube11, simCube7, simCube3, simCube13), 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_394": {
                "input": {
                    "value": "simCube",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((simCube9, simCube5, simCube1, simCube10, simCube6, simCube2, simCube12, simCube8, simCube4, simCube11, simCube7, simCube3, simCube13), 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(focusCube, 0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.limit - simCube.size(3), 0, self.limit - simCube.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_405": {
                "input": {
                    "value": "h_fw_0",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.lm_Wm_forward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_406": {
                "input": {
                    "value": "h_bw_0",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.lm_Wm_backward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_407": {
                "input": {
                    "value": "h_fw_1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.lm_Wm_forward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_408": {
                "input": {
                    "value": "h_bw_1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.lm_Wm_backward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_409": {
                "input": {
                    "value": "m_fw_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lm_tanh(torch.mm(h_fw_0, self.lm_Wm_forward))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.lm_Wq_forward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_410": {
                "input": {
                    "value": "m_bw_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lm_tanh(torch.mm(h_bw_0, self.lm_Wm_backward))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.lm_Wq_backword",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_411": {
                "input": {
                    "value": "m_fw_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lm_tanh(torch.mm(h_fw_1, self.lm_Wm_forward))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.lm_Wq_forward",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_412": {
                "input": {
                    "value": "m_bw_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lm_tanh(torch.mm(h_bw_1, self.lm_Wm_backward))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.lm_Wq_backword",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_436": {
                "variable": {
                    "value": "sentA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dict[word].view(1, self.embedding_dim) for word in lsents]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "sentB",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dict[word].view(1, self.embedding_dim) for word in rsents]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_846": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_847": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_870": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_895": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_935": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_936": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_968": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_977": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_978": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output2, output_new2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_1001": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1010": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1011": {
                "variable": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output2, output_new2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_29": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_30": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tokens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tokens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_62": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_66": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_67": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_68": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_69": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[0], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[0] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[1], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[1] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[2], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[2] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[3], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[3] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[4], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[4] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[5], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[5] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_maps[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernels[6], charcnn_embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_127": {
                "kernel_size": {
                    "value": "(charcnn_max_word_length - kernels[6] + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "1100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "1100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_153": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "26",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_158": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "164",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_162": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "164",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_166": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_170": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_172": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_178": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_179": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_203": {
                "ndarray": {
                    "value": "pretrained_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros(shape=(len(self.tokens), self.embedding_dim))",
                            "Call"
                        ],
                        [
                            "numpy.zeros(shape=(len(self.tokens), self.embedding_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_264": {
                "variable": {
                    "value": "simCube5_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube5_0, h_fw_0[i].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "simCube5_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube5_1, h_fw_1[j].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "simCube6_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube6_0, h_bw_0[i].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "simCube6_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube6_1, h_bw_1[j].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "simCube7_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube7_0, h_bi_0[i].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "simCube7_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube7_1, h_bi_1[j].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "simCube8_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube8_0, h_sum_0[i].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "simCube8_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(simCube8_1, h_sum_1[j].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_272": {
                "input": {
                    "value": "h_fw_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_273": {
                "input": {
                    "value": "h_bw_1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_274": {
                "input": {
                    "value": "h_bi_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out1.view(out1.size(0), out1.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_275": {
                "input": {
                    "value": "h_sum_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_1 + h_bw_1",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_309": {
                "*size": {
                    "value": "simCube.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "simCube.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "simCube.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_311": {
                "*size": {
                    "value": "simCube.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "simCube.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "simCube.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_751": {
                "input": {
                    "value": "self.db",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "state[1][0][:].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_768": {
                "input": {
                    "value": "out7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.charCNN_filter7(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1031": {
                "*size": {
                    "value": "self.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1032": {
                "*size": {
                    "value": "self.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "pretrained_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros(shape=(len(self.tokens), self.embedding_dim))",
                            "Call"
                        ],
                        [
                            "numpy.zeros(shape=(len(self.tokens), self.embedding_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "div_317": {
                "input": {
                    "value": "indix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[0]",
                            "Subscript"
                        ],
                        [
                            "indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "simCube.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_341": {
                "input": {
                    "value": "indix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[0]",
                            "Subscript"
                        ],
                        [
                            "indices[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "simCube.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "*size": {
                    "value": "len0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_0.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_1.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_468": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_569": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1026": {
                "*size": {
                    "value": "self.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1029": {
                "*size": {
                    "value": "self.num_layers * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_453": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_492": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_498": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_523": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_529": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "*size": {
                    "value": "len0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_0.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_fw_1.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_508": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_595": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_609": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_587": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_919": {
                "input": {
                    "value": "output_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.Tensor(self.dict[word])).view(1, -1)",
                            "Call"
                        ],
                        [
                            "output_word.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.dict[word])).view(1, -1)",
                            "Call"
                        ],
                        [
                            "output_word.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.vg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_923": {
                "input": {
                    "value": "output_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.df, state[0][0][:].view(-1, 1)) + torch.mm(self.db, state[1][0][:].view(-1, 1)) + self.bias.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "output_char.view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.c2w_cell([indices], h, c)",
                            "Call"
                        ],
                        [
                            "self.charCNN_cell([indices])",
                            "Call"
                        ],
                        [
                            "self.c2w_cell([indices], h, c)",
                            "Call"
                        ],
                        [
                            "self.down_sampling_300(output_char)",
                            "Call"
                        ],
                        [
                            "self.down_sampling_200(output_char)",
                            "Call"
                        ],
                        [
                            "self.charCNN_cell([indices])",
                            "Call"
                        ],
                        [
                            "self.down_sampling_300(output_char)",
                            "Call"
                        ],
                        [
                            "self.down_sampling_200(output_char)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_633": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_639": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_662": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_668": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_732": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_737": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cosine_similarity_926": {
                "x1": {
                    "value": "output_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.Tensor(self.dict[word])).view(1, -1)",
                            "Call"
                        ],
                        [
                            "output_word.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.Tensor(self.dict[word])).view(1, -1)",
                            "Call"
                        ],
                        [
                            "output_word.cuda()",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "output_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(self.df, state[0][0][:].view(-1, 1)) + torch.mm(self.db, state[1][0][:].view(-1, 1)) + self.bias.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "output_char.view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.c2w_cell([indices], h, c)",
                            "Call"
                        ],
                        [
                            "self.charCNN_cell([indices])",
                            "Call"
                        ],
                        [
                            "self.c2w_cell([indices], h, c)",
                            "Call"
                        ],
                        [
                            "self.down_sampling_300(output_char)",
                            "Call"
                        ],
                        [
                            "self.down_sampling_200(output_char)",
                            "Call"
                        ],
                        [
                            "self.charCNN_cell([indices])",
                            "Call"
                        ],
                        [
                            "self.down_sampling_300(output_char)",
                            "Call"
                        ],
                        [
                            "self.down_sampling_200(output_char)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_617": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_623": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_636": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_652": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_665": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_691": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_697": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_721": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_727": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_new.view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_689": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_694": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_711": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_719": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_724": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "PWIM/util.py": {
        "torch": {}
    },
    "SSE/data_loader.py": {
        "torch": {
            "load_133": {
                "variable": {
                    "value": "testl_field.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "embd_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "variable": {
                    "value": "testl_field.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "embd_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "testl_field.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "embd_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "testl_field.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "embd_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "testl_field.vocab.vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "embd_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "ndarray": {
                    "value": "np.asarray([[dict.stoi[w]] for w in ws], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_mnli.py": {
        "torch": {
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_94": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_pit.py": {
        "torch": {
            "Adam_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_164": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_138": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_193": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_194": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_226": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_227": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_75": {},
            "zeros_138": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_145": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StackBiLSTMMaxout(h_size=[512, 1024, 2048], v_size=10, d=300, mlp_d=1600, dropout_r=0.1, max_l=60, num_class=num_class)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "basepath + '/model_SSE_' + task + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_142": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_quora.py": {
        "torch": {
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_161": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_167": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "basepath + '/model_SSE_' + task + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_149": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_151": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_178": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_179": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_218": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_142": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_250": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_251": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StackBiLSTMMaxout(h_size=[512, 1024, 2048], v_size=10, d=300, mlp_d=1600, dropout_r=0.1, max_l=60, num_class=num_class)",
                            "Call"
                        ],
                        [
                            "torch.load(basepath + '/model_SSE_' + task + '.pkl')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "basepath + '/model_SSE_' + task + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_275": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_276": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_snli.py": {
        "torch": {
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StackBiLSTMMaxout(h_size=[512, 1024, 2048], v_size=10, d=300, mlp_d=1600, dropout_r=0.1, max_l=60)",
                            "Call"
                        ],
                        [
                            "StackBiLSTMMaxout(h_size=[512, 1024, 2048], v_size=10, d=300, mlp_d=1600, dropout_r=0.1, max_l=60)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "base_path + '/SNLI_model.pickle'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_sts.py": {
        "torch": {
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_139": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_155": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_166": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_168": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_196": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_197": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_75": {},
            "zeros_139": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_146": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_143": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_trecqa.py": {
        "torch": {
            "Adam_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_143": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_172": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_200": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_264": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_265": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_75": {},
            "zeros_143": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_150": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_147": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_url.py": {
        "torch": {
            "Adam_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_105": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_196": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_197": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_229": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_86": {},
            "normal_147": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StackBiLSTMMaxout(h_size=[512, 1024, 2048], v_size=10, d=300, mlp_d=1600, dropout_r=0.1, max_l=60, num_class=num_class)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "basepath + '/model_SSE_' + task + '.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_264": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_265": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_144": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/main_wikiqa.py": {
        "torch": {
            "Adam_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_143": {
                "variable": {
                    "value": "oov[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_172": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_200": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_233": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_234": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_264": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in lsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_265": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "[[word2id[word] for word in rsent]]",
                            "List"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_75": {},
            "zeros_143": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_150": {
                "variable": {
                    "value": "dict[word]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(300)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_147": {
                "input": {
                    "value": "wv_arr[wv_dict[word]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "SSE/mnli.py": {
        "torch": {}
    },
    "SSE/model.py": {
        "torch": {
            "Embedding_9": {
                "variable": {
                    "value": "self.Embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "v_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_11": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "h_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_14": {
                "variable": {
                    "value": "self.lstm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d + h_size[0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "h_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "d + (h_size[0] + h_size[1]) * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "h_size[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.mlp_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_size[2] * 2 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.mlp_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.sm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mlp_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.mlp_1, nn.ReLU(), nn.Dropout(dropout_r), self.mlp_2, nn.ReLU(), nn.Dropout(dropout_r), self.sm]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "s1_layer2_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_s1, s1_layer1_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "s2_layer2_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_s2, s2_layer1_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "s1_layer3_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_s1, s1_layer1_out, s1_layer2_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "s2_layer3_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_s2, s2_layer1_out, s2_layer2_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s1_layer3_maxout, s2_layer3_maxout, torch.abs(s1_layer3_maxout - s2_layer3_maxout), s1_layer3_maxout * s2_layer3_maxout]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(s1, s1_l - 1, s2, s2_l - 1)",
                            "Call"
                        ],
                        [
                            "model(s1, s1_l - 1, s2, s2_l - 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_74": {
                "input": {
                    "value": "s1_layer3_maxout - s2_layer3_maxout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "dropout_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "p": {
                    "value": "dropout_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_116": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(s1, s1_l - 1, s2, s2_l - 1)",
                            "Call"
                        ],
                        [
                            "model(s1, s1_l - 1, s2, s2_l - 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_95": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(s1, s1_l - 1, s2, s2_l - 1)",
                            "Call"
                        ],
                        [
                            "model(s1, s1_l - 1, s2, s2_l - 1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "SSE/test_quora.py": {
        "torch": {
            "CrossEntropyLoss_86": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_106": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./results', '%s_%d.pkl' % (task, 8))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "SSE/torch_util.py": {
        "torch": {}
    },
    "SSE/train_quora.py": {
        "torch": {
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "pretrained_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_192": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_193": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_230": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_231": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_266": {
                "variable": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "left_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(left_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(left_sents))",
                            "Call"
                        ],
                        [
                            "left_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_267": {
                "variable": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "right_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(right_sents, 0, 1)",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor(right_sents))",
                            "Call"
                        ],
                        [
                            "right_sents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./results', '%s_%d.pkl' % (task, epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}