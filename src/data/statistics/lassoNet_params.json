{
    "examples/boston_housing.py": {
        "sklearn": {
            "load_boston_14": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_23": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scale_24": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ],
                        [
                            "scale(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_27": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_40": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/cox_experiments.py": {
        "sklearn": {
            "StandardScaler_107": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_122": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "stratify": {
                    "value": "y[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y_temp",
                            "Name"
                        ],
                        [
                            "y_temp",
                            "Name"
                        ],
                        [
                            "y_temp",
                            "Name"
                        ],
                        [
                            "y_temp",
                            "Name"
                        ],
                        [
                            "np.genfromtxt(path_y, delimiter=',', skip_header=1)",
                            "Call"
                        ]
                    ]
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StratifiedKFold_136": {
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cox_regression.py": {
        "sklearn": {
            "train_test_split_15": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/diabetes.py": {
        "sklearn": {
            "load_diabetes_13": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_22": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scale_23": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ],
                        [
                            "scale(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_26": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/friedman.py": {
        "sklearn": {
            "StandardScaler_23": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_24": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "r2_score_35": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y_train, y_test]",
                            "List"
                        ],
                        [
                            "y + (10 * X[:, 3] + 5 * X[:, 4])",
                            "BinOp"
                        ],
                        [
                            "10 * np.sin(np.pi * X[:, 0] * X[:, 1]) + 20 * (X[:, 2] - 0.5) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/friedman/main.py": {
        "sklearn": {
            "StandardScaler_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "r2_score_35": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((y_train, y_val))",
                            "Call"
                        ],
                        [
                            "[y_train, y_val, y_test]",
                            "List"
                        ],
                        [
                            "y / y_std",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/generated.py": {
        "sklearn": {
            "StandardScaler_54": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_57": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "r2_score_66": {
                "y_true": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y / y.std()",
                            "BinOp"
                        ],
                        [
                            "linear + noise",
                            "BinOp"
                        ],
                        [
                            "6 * linear + 8 * noise + nonlinear",
                            "BinOp"
                        ],
                        [
                            "10 * np.sin(np.pi * X[:, 0] * X[:, 1]) + 20 * (X[:, 2] - 0.5) ** 2 + 10 * X[:, 3] + 5 * X[:, 4]",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.predict(X)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/miceprotein.py": {
        "sklearn": {
            "fetch_openml_21": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "miceprotein",
                    "type": "str",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SimpleImputer_23": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_25": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_28": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_30": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mnist_ae.py": {
        "sklearn": {
            "fetch_openml_6": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "type": "str",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_squared_error_31": {
                "y_true": {
                    "value": "X_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X[filter].values / 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "examples/mnist_classif.py": {
        "sklearn": {
            "fetch_openml_9": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "type": "str",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LabelEncoder_12": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_14": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_34": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/mnist_reconstruction.py": {
        "sklearn": {
            "fetch_openml_6": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "mnist_784",
                    "type": "str",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_squared_error_29": {
                "y_true": {
                    "value": "X_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(X)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X[filter].values / 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/data_utils.py": {
        "sklearn": {
            "MinMaxScaler_34": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_60": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_76": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_92": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "train_test_split_168": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "test[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_174": {
                "variable": {
                    "value": "(x_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "test[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_181": {
                "variable": {
                    "value": "(X_train_1, X_test_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_digit_1[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_182": {
                "variable": {
                    "value": "(X_train_2, X_test_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_digit_2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MinMaxScaler_210": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_133": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_135": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lassonet/interfaces.py": {
        "sklearn": {
            "check_cv_610": {
                "variable": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_373": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.val_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "MSELoss_534": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_550": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_496": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "current.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_172": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_187": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.class_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_570": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model(self._cast_input(X))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "self.torch_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_569": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_interface.py": {
        "sklearn": {
            "load_diabetes_7": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_digits_14": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lassonet/cox.py": {
        "torch": {
            "unique_consecutive_42": {
                "variable": {
                    "value": "(_, tie_inverses, tie_count)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "durations[event_ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logcumsumexp_39": {
                "input": {
                    "value": "log_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_h.flatten()",
                            "Call"
                        ],
                        [
                            "log_h[idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "variable": {
                    "value": "aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tie_inverses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cumsum_65": {
                "input": {
                    "value": "aux",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(tie_inverses)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_69": {
                "input": {
                    "value": "tie_count[tie_inverses]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "event_id_in_tie",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(aux, dim=0) - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lassonet/model.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(dims[i], dims[i + 1]) for i in range(len(dims) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_95": {
                "input": {
                    "value": "self.skip.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_98": {
                "input": {
                    "value": "self.skip.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_33": {
                "variable": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "theta(current_layer)",
                            "Call"
                        ],
                        [
                            "self.dropout(current_layer)",
                            "Call"
                        ],
                        [
                            "F.relu(current_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_86": {
                "input": {
                    "value": "layer.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_102": {
                "input": {
                    "value": "self.skip.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_67": {
                "input": {
                    "value": "beta - new_beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_71": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.skip.weight.data",
                            "Attribute"
                        ],
                        [
                            "new_beta",
                            "Name"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lassonet/prox.py": {
        "torch": {
            "ones_like_10": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(1 - a_s / norm_v) / (1 + s * M ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_30": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "k + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_37": {
                "variable": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "v.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[intervals, zeros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lower > w",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_47": {
                "variable": {
                    "value": "x_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(1 - a_s / norm_v) / (1 + s * M ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(lower > w, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_48": {
                "variable": {
                    "value": "w_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "M * x * norm_v",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(lower > w, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_11": {
                "condition": {
                    "value": "x >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones_like(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-ones",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_6": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(1 - a_s / norm_v) / (1 + s * M ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_6": {
                "input": {
                    "value": "torch.abs(x) - l",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_26": {
                "input": {
                    "value": "u.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_39": {
                "input": {
                    "value": "1 - a_s / norm_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_51": {
                "input": {
                    "value": "soft_threshold(lambda_bar, u.abs())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_33": {
                "tensors": {
                    "value": "[zeros, torch.cumsum(u_abs_sorted - lambda_bar, dim=0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_6": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(1 - a_s / norm_v) / (1 + s * M ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_34": {
                "input": {
                    "value": "u_abs_sorted - lambda_bar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lassonet/r.py": {
        "torch": {
            "tensor_39": {
                "data": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lassonet/utils.py": {
        "torch": {
            "empty_28": {
                "*size": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "index.max() + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scatter_reduce_28": {
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "src": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "Variable",
                    "possible_values": []
                },
                "include_self": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log1p_58": {
                "input": {
                    "value": "-(y - x).exp()",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}