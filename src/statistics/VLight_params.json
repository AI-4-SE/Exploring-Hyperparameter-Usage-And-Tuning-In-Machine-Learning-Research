{
    "eval_vessels.py": {
        "sklearn": {
            "precision_recall_curve_39": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "vessels_in_mask.flatten().astype(bool)",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "preds_in_mask.flatten()",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "precision_recall_curve_81": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "vessels_in_mask.flatten().astype(bool)",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "generated_in_mask.flatten()",
                    "possible_values": []
                },
                "pos_label": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "precision_recall_curve_196": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "to_numpy(gt_vessels_in_mask).ravel() >= 1",
                            "Compare"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "possible_values": [
                        [
                            "to_numpy(pred_vessels_in_mask).ravel()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_curve_213": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "to_numpy(gt_vessels_in_mask).ravel() >= 1",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "possible_values": [
                        [
                            "to_numpy(pred_vessels_in_mask).ravel()",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_214": {
                "variable": {
                    "value": "roc",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_tensor_129": {
                "obj": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "preds.squeeze().squeeze()",
                            "Call"
                        ],
                        [
                            "preds.squeeze()",
                            "Call"
                        ],
                        [
                            "to_numpy(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training.py": {
        "sklearn": {},
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_31": {
                "variable": {
                    "value": "dl",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "num",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "snapshot",
                    "possible_values": [
                        [
                            "args.resume",
                            "Attribute"
                        ],
                        [
                            "{'arch': type(model).__name__, 'input_size': self.args.input_size, 'state_dict': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath_mdl",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, model_name + '.mdl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "csl_common/utils/common.py": {
        "torch": {
            "manual_seed_6": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_7": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "csl_common/utils/nn.py": {
        "torch": {
            "load_112": {
                "variable": {
                    "value": "snapshot",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath_mdl",
                    "possible_values": [
                        [
                            "os.path.join(in_dir, model_name + '.mdl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "predict_vessels.py": {
        "torch": {
            "zeros_22": {
                "variable": {
                    "value": "image_probs",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "image_probs",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h_pad, w_pad)",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_tensor_199": {
                "obj": {
                    "value": "full_image",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "retinadataset.py": {
        "torch": {
            "ConcatDataset_262": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "datasets": {
                    "value": "datasets_for_phase",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "train_vessels.py": {
        "torch": {
            "Adam_43": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "possible_values": [
                        [
                            "(self.args.beta1, self.args.beta2)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_218": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "X_vessels",
                    "possible_values": [
                        [
                            "self.net(batch.images)",
                            "Call"
                        ],
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "batch.masks.float()",
                            "Call"
                        ],
                        [
                            "batch.masks.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "self.dataloaders[TRAIN]",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.datasets[TRAIN]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batchsize",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.args.workers",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "self.dataloaders[VAL]",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.datasets[VAL]",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batchsize_eval",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_148": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "X_vessels",
                    "possible_values": [
                        [
                            "self.net(batch.images)",
                            "Call"
                        ],
                        [
                            "self.net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "batch.masks.float()",
                            "Call"
                        ],
                        [
                            "batch.masks.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_215": {
                "mode": {
                    "value": "not eval",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "unet.py": {
        "torch": {
            "Tanh_24": {
                "variable": {
                    "value": "self.tanh",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sigmoid_37": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.up1(x5, x4)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x1)",
                            "Call"
                        ],
                        [
                            "self.outc(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x2, x1], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.double_conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1)",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "possible_values": []
                }
            },
            "pad_95": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "self.inc(x)",
                            "Call"
                        ],
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2]",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Upsample_83": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "mid_channels",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "vlight.py": {
        "torch": {
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.depthwise",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.pointwise",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_123": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_191": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_243": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_301": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "possible_values": []
                }
            },
            "spectral_norm_196": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv1",
                    "possible_values": []
                }
            },
            "spectral_norm_197": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv2",
                    "possible_values": []
                }
            },
            "Sequential_230": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.PixelShuffle(2)",
                    "possible_values": []
                }
            },
            "spectral_norm_252": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv1",
                    "possible_values": []
                }
            },
            "spectral_norm_253": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "module": {
                    "value": "self.conv2",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "variable": {
                    "value": "self.up_conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.PixelShuffle(2)",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "variable": {
                    "value": "self.conv_out",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.PixelShuffle(2)",
                    "possible_values": []
                }
            },
            "Sequential_338": {
                "variable": {
                    "value": "up",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.PixelShuffle(2)",
                    "possible_values": []
                }
            },
            "Sequential_351": {
                "variable": {
                    "value": "upsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.sn(up)",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "sigmoid_380": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.up_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "self.conv_out",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_323": {
                "variable": {
                    "value": "self.up_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_324": {
                "variable": {
                    "value": "self.conv_out",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels[-1]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_channels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "up",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_348": {
                "variable": {
                    "value": "up",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Upsample_182": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "PixelShuffle_231": {
                "upscale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "PixelShuffle_310": {
                "upscale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "PixelShuffle_314": {
                "upscale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "PixelShuffle_339": {
                "upscale_factor": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Upsample_319": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_344": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    }
}