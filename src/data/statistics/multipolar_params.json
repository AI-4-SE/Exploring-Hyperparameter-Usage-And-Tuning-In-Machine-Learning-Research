{
    "utils/aggregation.py": {
        "tensorflow": {
            "reduce_mean_56": {
                "variable": {
                    "value": "mean_agg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sources_actions * W",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "aggregated_actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_57": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mean_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sources_actions * W, axis=1, name='aggregated_actions')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(master_in, n_actions, activation=None, kernel_initializer=bias_layer_initializer, name='bias')",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='bias', shape=[1, n_actions], dtype=tf.float32, trainable=True, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_11": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'summaries'",
                            "Method Argument"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'summaries'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_31": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_sources, n_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_sources, n_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "master_in",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "bias_layer_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, n_actions]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_60": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(mean_agg, b, name='mean')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_61": {
                "name": {
                    "value": "mean_agg",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_agg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(sources_actions * W, axis=1, name='aggregated_actions')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_16": {
                "name": {
                    "value": "name_scope + '_action' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(var[:, i], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_16": {
                "input_tensor": {
                    "value": "var[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_20": {
                "name": {
                    "value": "name_scope + '_source' + str(i) + '_action_' + str(j)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(var[:, i, j], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "input_tensor": {
                    "value": "var[:, i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/distributions.py": {
        "tensorflow": {
            "get_variable_54": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pi/logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "pdparam",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mean, mean * 0.0 + logstd]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_initializer_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/policies.py": {
        "tensorflow": {
            "stack_74": {
                "variable": {
                    "value": "sources_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sources_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(sources_actions)",
                            "Call"
                        ],
                        [
                            "tf.transpose(sources_actions, perm=[1, 0, 2], name='sources_actions')",
                            "Call"
                        ],
                        [
                            "get_sources_actions(self.obs_ph, source_policy_paths, n_batch, n_actions, ac_space, action_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_75": {
                "variable": {
                    "value": "sources_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sources_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(sources_actions)",
                            "Call"
                        ],
                        [
                            "tf.transpose(sources_actions, perm=[1, 0, 2], name='sources_actions')",
                            "Call"
                        ],
                        [
                            "get_sources_actions(self.obs_ph, source_policy_paths, n_batch, n_actions, ac_space, action_dtype)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "sources_actions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_65": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_predict_func(path, ac_space)",
                            "Call"
                        ]
                    ]
                },
                "inp": {
                    "value": "[obs_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "action_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.int64",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'source_actions' + str(ind)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_70": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip(action, ac_space.low + EPS, ac_space.high - EPS)",
                            "Call"
                        ],
                        [
                            "tf.py_func(predict, [obs_ph], action_dtype, name='source_actions' + str(ind))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(action, n_actions, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(action)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_272": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pi_h, self.ac_space.shape[0], activation=None, name='log_std')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(log_std, LOG_STD_MIN, LOG_STD_MAX)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "LOG_STD_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "LOG_STD_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "exp_274": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pi_h, self.ac_space.shape[0], activation=None, name='log_std')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(log_std, LOG_STD_MIN, LOG_STD_MAX)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_67": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip(action, ac_space.low + EPS, ac_space.high - EPS)",
                            "Call"
                        ],
                        [
                            "tf.py_func(predict, [obs_ph], action_dtype, name='source_actions' + str(ind))",
                            "Call"
                        ],
                        [
                            "tf.one_hot(action, n_actions, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(action)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ac_space.shape[0]",
                            "Subscript"
                        ],
                        [
                            "ac_space.n",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_266": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cnn_extractor(obs, **self.cnn_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(obs)",
                            "Call"
                        ],
                        [
                            "mlp(pi_h, self.layers, self.activ_fn, layer_norm=self.layer_norm)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.ac_space.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "log_std",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_284": {
                "variable": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(policy, self.ac_space.low + EPS, self.ac_space.high - EPS)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.ac_space.low + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.ac_space.high - EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_285": {
                "variable": {
                    "value": "deterministic_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "deterministic_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(deterministic_policy, self.ac_space.low + EPS, self.ac_space.high - EPS)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "self.ac_space.low + EPS",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.ac_space.high - EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_250": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'pi'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_254": {
                "variable": {
                    "value": "pi_h",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processed_obs",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_185": {
                "structure": {
                    "value": "self.processed_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_276": {
                "input": {
                    "value": "mu_",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}