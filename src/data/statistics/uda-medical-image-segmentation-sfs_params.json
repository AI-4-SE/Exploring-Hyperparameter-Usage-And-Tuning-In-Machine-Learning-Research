{
    "data_utils.py": {
        "tensorflow": {}
    },
    "deeplabv3.py": {
        "tensorflow": {
            "VGG16_8": {
                "variable": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "model_from_json_35": {
                "variable": {
                    "value": "original",
                    "type": "variable",
                    "possible_values": []
                },
                "json_string": {
                    "value": "original.to_json()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_140": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, dilation_rate=(2, 2))",
                            "Call"
                        ],
                        [
                            "layer(x, dilation_rate=(4, 4))",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Concatenate()([x0, x1, x2, x3, x4])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(256, 1, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.ZeroPadding2D(1)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(256, 3, use_bias=False)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Conv2D(num_classes, 1)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Lambda(lambda xx, target_shape: tf.compat.v1.image.resize(xx, target_shape, method='bilinear', align_corners=False), arguments={'target_shape': img_shape[:2]}, name='final_resizing_layer')(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Activation(activation)(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_72": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_74": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_78": {
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "36",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_79": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "36",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_81": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_84": {
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "36",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_85": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "36",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_87": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_90": {
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "36",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_91": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ],
                        [
                            "24",
                            "Constant"
                        ],
                        [
                            "36",
                            "Constant"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_93": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_98": {
                "function": {
                    "value": "lambda xx: tf.keras.backend.expand_dims(xx, 1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_99": {
                "function": {
                    "value": "lambda xx: tf.keras.backend.expand_dims(xx, 1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Conv2D_100": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_102": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_104": {
                "function": {
                    "value": "lambda xx, target_shape: tf.compat.v1.image.resize(xx, target_shape, method='bilinear', align_corners=False)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'target_shape': x.shape[1:3]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "pooling_resizing_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_116": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_118": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_122": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_123": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNormalization_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_125": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_126": {
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Lambda_129": {
                "function": {
                    "value": "lambda xx, target_shape: tf.compat.v1.image.resize(xx, target_shape, method='bilinear', align_corners=False)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "arguments": {
                    "value": "{'target_shape': img_shape[:2]}",
                    "type": "Dict",
                    "possible_values": []
                },
                "name": {
                    "value": "final_resizing_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_138": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_104": {
                "images": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "method": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_129": {
                "images": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "target_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "method": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "io_utils.py": {
        "tensorflow": {
            "TFRecordDataset_47": {
                "variable": {
                    "value": "raw_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.sample(data_list, batch_size)",
                            "Call"
                        ],
                        [
                            "[data_dir + x for x in fn]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "decode_raw_58": {
                "variable": {
                    "value": "data_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "p['data_vol']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_59": {
                "variable": {
                    "value": "label_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "p['label_vol']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "data_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "data_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(p['data_vol'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data_vol, raw_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(data_vol, [0, 0, 0], volume_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "raw_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[256, 256, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "label_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(p['label_vol'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_vol, raw_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(label_vol, [0, 0, 1], label_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "raw_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[256, 256, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_63": {
                "variable": {
                    "value": "data_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(p['data_vol'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(data_vol, raw_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(data_vol, [0, 0, 0], volume_size)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "volume_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[256, 256, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "slice_64": {
                "variable": {
                    "value": "label_vol",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "label_vol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(p['label_vol'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label_vol, raw_size)",
                            "Call"
                        ],
                        [
                            "tf.slice(label_vol, [0, 0, 1], label_size)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[256, 256, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "Feature_84": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_88": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_102": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'dsize_dim0': _int64_feature(X.shape[0]), 'dsize_dim1': _int64_feature(X.shape[1]), 'dsize_dim2': _int64_feature(X.shape[2]), 'lsize_dim0': _int64_feature(Y.shape[0]), 'lsize_dim1': _int64_feature(Y.shape[1]), 'lsize_dim2': _int64_feature(Y.shape[2]), 'data_vol': _bytes_feature(X.tobytes()), 'label_vol': _bytes_feature(Y.tobytes())})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_34": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_35": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_36": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_37": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_38": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_39": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_40": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_41": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_51": {
                "serialized": {
                    "value": "example_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_description",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'dsize_dim0': tf.io.FixedLenFeature([], tf.int64), 'dsize_dim1': tf.io.FixedLenFeature([], tf.int64), 'dsize_dim2': tf.io.FixedLenFeature([], tf.int64), 'lsize_dim0': tf.io.FixedLenFeature([], tf.int64), 'lsize_dim1': tf.io.FixedLenFeature([], tf.int64), 'lsize_dim2': tf.io.FixedLenFeature([], tf.int64), 'data_vol': tf.io.FixedLenFeature([], tf.string), 'label_vol': tf.io.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "TFRecordWriter_101": {
                "path": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.sample(data_list, batch_size)",
                            "Call"
                        ],
                        [
                            "[data_dir + x for x in fn]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_82": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BytesList_84": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_88": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_102": {
                "feature": {
                    "value": "{'dsize_dim0': _int64_feature(X.shape[0]), 'dsize_dim1': _int64_feature(X.shape[1]), 'dsize_dim2': _int64_feature(X.shape[2]), 'lsize_dim0': _int64_feature(Y.shape[0]), 'lsize_dim1': _int64_feature(Y.shape[1]), 'lsize_dim2': _int64_feature(Y.shape[2]), 'data_vol': _bytes_feature(X.tobytes()), 'label_vol': _bytes_feature(Y.tobytes())}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "clip_by_value_24": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "sample_num_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-3, -2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_30": {
                "variable": {
                    "value": "class_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.greater(sample_num_per_class, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_no_nan_33": {
                "variable": {
                    "value": "avg_sample_num_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.sum(sample_num_per_class, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "K.sum(class_ind, axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_no_nan_38": {
                "variable": {
                    "value": "sample_weight_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "avg_sample_num_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.divide_no_nan(K.sum(sample_num_per_class, axis=-1, keepdims=True), K.sum(class_ind, axis=-1, keepdims=True))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "sample_num_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(y_true, axis=[-3, -2], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_47": {
                "variable": {
                    "value": "weighted_pixel_wise_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted_pixel_wise_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_wise_loss * sample_weight_per_class * mask",
                            "BinOp"
                        ],
                        [
                            "K.sum(weighted_pixel_wise_loss, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_by_value_67": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "categorical_crossentropy_69": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_49": {
                "a": {
                    "value": "weighted_pixel_wise_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pixel_wise_loss * sample_weight_per_class * mask",
                            "BinOp"
                        ],
                        [
                            "K.sum(weighted_pixel_wise_loss, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_71": {
                "a": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.categorical_crossentropy(y_true * mask, y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_30": {
                "x": {
                    "value": "sample_num_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(y_true, axis=[-3, -2], keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_33": {
                "a": {
                    "value": "sample_num_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(y_true, axis=[-3, -2], keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_34": {
                "a": {
                    "value": "class_ind",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.cast(K.greater(sample_num_per_class, 0.0), 'float32')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_42": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.softmax(y_pred, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y_pred, 1e-10, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks.py": {
        "tensorflow": {
            "name_scope_8": {
                "name": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_10": {
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_12": {
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {}
    },
    "wasserstein_utils.py": {
        "tensorflow": {
            "sort_18": {
                "variable": {
                    "value": "psort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.dot(K.reshape(P, (-1, nclass)), theta1d)",
                            "Call"
                        ],
                        [
                            "K.dot(K.reshape(P, (-1, nclass)), K.transpose(theta))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_19": {
                "variable": {
                    "value": "qsort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.dot(K.reshape(Q, (-1, nclass)), theta1d)",
                            "Call"
                        ],
                        [
                            "K.dot(K.reshape(Q, (-1, nclass)), K.transpose(theta))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_20": {
                "variable": {
                    "value": "pqmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.min(psort, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "K.min(qsort, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_27": {
                "variable": {
                    "value": "pcum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.maximum(n_p, n_q), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(tf.cumsum(psort), tf.cast(n_p, dtype='float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_28": {
                "variable": {
                    "value": "qcum",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.maximum(n_p, n_q), dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.divide(tf.cumsum(qsort), tf.cast(n_q, dtype='float32'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_30": {
                "x": {
                    "value": "n_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(p)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_33": {
                "variable": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pcum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.cast(tf.maximum(n_p, n_q), dtype='float32'), tf.divide(tf.cumsum(psort), tf.cast(n_p, dtype='float32')))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indp[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concatenate_34": {
                "variable": {
                    "value": "phat",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(K.expand_dims(phat[0, :], 0), phat[1:, :] - phat[:-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_36": {
                "variable": {
                    "value": "qhat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "qcum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.cast(tf.maximum(n_p, n_q), dtype='float32'), tf.divide(tf.cumsum(qsort), tf.cast(n_q, dtype='float32')))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indq[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concatenate_37": {
                "variable": {
                    "value": "qhat",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "(K.expand_dims(qhat[0, :], 0), qhat[1:, :] - qhat[:-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "(phat - qhat) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_73": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.reshape(P, (-1, nclass))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K.transpose(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_74": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.reshape(Q, (-1, nclass))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "K.transpose(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_75": {
                "variable": {
                    "value": "sw",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "oneDWassersteinV3(p, q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "variable": {
                    "value": "theta1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta[it]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dot_56": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.reshape(P, (-1, nclass))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "theta1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.expand_dims(theta[it])",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_57": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.reshape(Q, (-1, nclass))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "theta1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.expand_dims(theta[it])",
                            "Call"
                        ]
                    ]
                }
            },
            "min_20": {
                "a": {
                    "value": "qsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(q, axis=0)",
                            "Call"
                        ],
                        [
                            "qsort - pqmin",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_24": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.dot(K.reshape(P, (-1, nclass)), theta1d)",
                            "Call"
                        ],
                        [
                            "K.dot(K.reshape(P, (-1, nclass)), K.transpose(theta))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_25": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.dot(K.reshape(Q, (-1, nclass)), theta1d)",
                            "Call"
                        ],
                        [
                            "K.dot(K.reshape(Q, (-1, nclass)), K.transpose(theta))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_27": {
                "x": {
                    "value": "n_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(p)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_27": {
                "x": {
                    "value": "tf.cumsum(psort)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(n_p, dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_28": {
                "x": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "divide_28": {
                "x": {
                    "value": "tf.cumsum(qsort)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(n_q, dtype='float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_30": {
                "x": {
                    "value": "tf.linspace(0.0, tf.cast(n_p, dtype='float32') - 1.0, tf.minimum(n_p, n_q) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_31": {
                "x": {
                    "value": "tf.linspace(0.0, tf.cast(n_q, dtype='float32') - 1.0, tf.minimum(n_p, n_q) + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_59": {
                "a": {
                    "value": "oneDWassersteinV3(p, q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nclass)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nclass)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "a": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "maximum_27": {
                "x": {
                    "value": "n_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(p)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cumsum_27": {
                "x": {
                    "value": "psort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(p, axis=0)",
                            "Call"
                        ],
                        [
                            "psort - pqmin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_28": {
                "x": {
                    "value": "n_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(p)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cumsum_28": {
                "x": {
                    "value": "qsort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sort(q, axis=0)",
                            "Call"
                        ],
                        [
                            "qsort - pqmin",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_30": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(n_p, dtype='float32') - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.minimum(n_p, n_q) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_31": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(n_q, dtype='float32') - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.minimum(n_p, n_q) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_34": {
                "input": {
                    "value": "phat[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "qhat[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nclass)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "tensor": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, nclass)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minimum_30": {
                "x": {
                    "value": "n_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(p)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "minimum_31": {
                "x": {
                    "value": "n_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(p)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "n_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}