{
    "prae/dataset.py": {
        "torch": {}
    },
    "prae/distances.py": {
        "torch": {
            "max_32": {
                "variable": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_mat, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_46": {
                "variable": {
                    "value": "neg_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(dist_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x, y, dim)",
                            "Call"
                        ],
                        [
                            "self.forward(x, r1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "dist_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist_mat, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "prae/evaluator.py": {
        "torch": {
            "zeros_like_99": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mdp.rewards",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "abstract_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[abstract_states, z_g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mdp.abstract_states.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_actions(mdp.abstract_states, network, n_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mdp.abstract_rewards",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sweep(mdp, values, n_actions)",
                            "Call"
                        ],
                        [
                            "sweep(mdp, values, n_actions)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_136": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mdp.abstract_transitions[i]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mdp.gamma * values",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_121": {
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sweep(mdp, values, n_actions)",
                            "Call"
                        ],
                        [
                            "sweep(mdp, values, n_actions)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(q_values, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "prae/helpers.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(state).to(device).float()",
                            "Call"
                        ],
                        [
                            "state.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "state.float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StateTransitionsDataset(data_loc=path, n_neg_samples=args.n_neg_samples, num_actions=n_actions)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "seeder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda seeder: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                            "Lambda"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "torch_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_actions(torch_states, network, actions.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "torch_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_rewards(torch_states, network)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "torch_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "latent_states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "torch_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "latent_states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "action_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(base_file, f'sampled_actions.npy'), allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "full_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "transitions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_matrices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_69": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_257": {
                "variable": {
                    "value": "a_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-a_dist / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_160": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(data_folder, str(args.seed), dset)",
                            "Call"
                        ],
                        [
                            "os.path.join(base_file, f'{epoch}', 'model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(base_file, f'sampled_states.npy'), allow_pickle=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_210": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_states.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.device",
                            "Attribute"
                        ],
                        [
                            "network.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "initial_seed_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "prae/losses.py": {
        "torch": {
            "zeros_like_30": {
                "variable": {
                    "value": "reward_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transition_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.distance.distance(z_n, z_l).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "negative_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transition_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.distance.distance(z_n, z_l).mean()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "prae/models/action_encoder.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_dim + n_actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "za",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "za",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(za)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "prae/models/encoder_cnn.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.cnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.cnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.linear_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "prae/models/encoder_mlp.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mid2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "prae/models/model.py": {
        "torch": {}
    },
    "prae/models/policy.py": {
        "torch": {
            "transpose_18": {
                "variable": {
                    "value": "self.q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_35": {
                "variable": {
                    "value": "(value, action)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.interpolate(z, abstract_states, eta=eta)",
                            "Call"
                        ],
                        [
                            "torch.mm(self.q_values, weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-distances / eta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_53": {
                "variable": {
                    "value": "weighted_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(-distances / eta, dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "prae/models/reward_function.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_30": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_28": {
                "input": {
                    "value": "self.forward(nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_30": {
                "input": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "prae/runner.py": {
        "torch": {
            "Adam_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "z_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(z_stack, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_49": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(itr_folder, f'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "prae/trainers.py": {
        "torch": {}
    }
}