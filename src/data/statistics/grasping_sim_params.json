{
    "src/baselines_catkin/baselines/baselines/a2c/a2c.py": {
        "tensorflow": {
            "ConfigProto_24": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_procs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(env.remotes)",
                            "Call"
                        ]
                    ]
                },
                "inter_op_parallelism_threads": {
                    "value": "num_procs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(env.remotes)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_28": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, intra_op_parallelism_threads=num_procs, inter_op_parallelism_threads=num_procs)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "ADV",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "LR",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_40": {
                "variable": {
                    "value": "neglogpac",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "train_model.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [nbatch])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "pg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ADV * neglogpac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "vf_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mse(tf.squeeze(train_model.vf), R)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cat_entropy(train_model.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_47": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pg_loss - entropy * ent_coef + vf_loss * vf_coef",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "find_trainable_variables('model')",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_51": {
                "variable": {
                    "value": "trainer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "alpha",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.99",
                            "MethodArgument"
                        ],
                        [
                            "0.99",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reset_default_graph_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_49": {
                "variable": {
                    "value": "(grads, grad_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.gradients(loss, params)",
                            "Call"
                        ],
                        [
                            "list(zip(grads, params))",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_90": {
                "session": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_42": {
                "input": {
                    "value": "train_model.vf",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/a2c/policies.py": {
        "tensorflow": {
            "placeholder_14": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nbatch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nenv, nlstm * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ],
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_18": {
                "x": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_60": {
                "x": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/a2c/utils.py": {
        "tensorflow": {
            "exp_14": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits - tf.reduce_max(logits, 1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_15": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_97": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_101": {
                "variable": {
                    "value": "(u, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_123": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=1, values=[c, h])",
                            "Call"
                        ],
                        [
                            "sum(self.episode_rewards[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_136": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[c, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_228": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(x, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx_flattened",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, x.shape[0]) * x.shape[1] + idx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "moments_252": {
                "variable": {
                    "value": "(_, vary)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "u if u.shape == flat_shape else v",
                            "IfExp"
                        ],
                        [
                            "q.reshape(shape)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "moments_253": {
                "variable": {
                    "value": "(_, varpred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "q - qpred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_10": {
                "input": {
                    "value": "logits - tf.log(-tf.log(noise))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[rf, rf, nin, nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_54": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_55": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nbatch, nsteps, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_80": {
                "variable": {
                    "value": "wx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_89": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, strides=[1, stride, stride, 1], padding=pad) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_90": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "range(nenvs)",
                            "Call"
                        ],
                        [
                            "range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_91": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "wx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "variable": {
                    "value": "gx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "bx",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "wh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "wh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh, nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "gh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_116": {
                "variable": {
                    "value": "bh",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh * 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "gc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_121": {
                "variable": {
                    "value": "bc",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bc",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_128": {
                "variable": {
                    "value": "(i, f, o, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, w, strides=[1, stride, stride, 1], padding=pad) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w) + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, wx) + tf.matmul(h, wh) + b",
                            "BinOp"
                        ],
                        [
                            "_ln(tf.matmul(x, wx), gx, bx) + _ln(tf.matmul(h, wh), gh, bh) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(i)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "range(nenvs)",
                            "Call"
                        ],
                        [
                            "range(0, self.nenvs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_131": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_132": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.tanh(u)",
                            "Call"
                        ],
                        [
                            "tf.tanh(u)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_239": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(t), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_9": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_13": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "p0 * tf.log(p0 + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_23": {
                "x": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "tf.concat(axis=1, values=h)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "tensor": {
                    "value": "tf.stack(values=h, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_102": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_239": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(t), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_10": {
                "x": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_47": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [rf, rf, nin, nf], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_56": {
                "a": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(x - u) / tf.sqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "x * g + b",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [rf, rf, nin, nf], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_65": {
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "nsteps",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(xs)",
                            "Call"
                        ],
                        [
                            "len(xs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_72": {
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_74": {
                "values": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "x": {
                    "value": "c",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ],
                        [
                            "c * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "f * c + i * u",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_134": {
                "x": {
                    "value": "_ln(c, gc, bc)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_239": {
                "input_tensor": {
                    "value": "tf.square(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_17": {
                "x": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_20": {
                "x": {
                    "value": "p0 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_55": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_82": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "a": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_111": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_112": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_116": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_118": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_120": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_121": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_239": {
                "x": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_127": {
                "a": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "act(z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps])",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, [nbatch, nsteps, -1])",
                            "Call"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "h * (1 - m)",
                            "BinOp"
                        ],
                        [
                            "o * tf.tanh(_ln(c, gc, bc))",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "wh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('wh', [nh, nh * 4], initializer=ortho_init(init_scale))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/acktr/kfac_utils.py": {
        "tensorflow": {
            "cast_94": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vec > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_99": {
                "variable": {
                    "value": "eigen_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_100": {
                "variable": {
                    "value": "eigen_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_105": {
                "variable": {
                    "value": "input_mat_clipped",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_mat_clipped",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(e, expanded_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(grad_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int(b_shape[reduce_dim]), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [B, -1, N])",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(result, [M, B, -1]), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "b_t_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "b.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_22": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_23": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [B, -1, N])",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(result, [M, B, -1]), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, -1, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_52": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [B, -1, N])",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(result, [M, B, -1]), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "b_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(b_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(a_shape[reduce_dim])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [B, -1, N])",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(result, [M, B, -1]), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "a_t_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_105": {
                "x": {
                    "value": "tf.greater(eigen_ratio, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(eigen_ratio, -500)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(a, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_39": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(result, [M, B, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_84": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [B, -1, N])",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(result, [M, B, -1]), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "a_dims",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ],
                        [
                            "list(range(len(a_shape)))",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_105": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "less_105": {
                "x": {
                    "value": "eigen_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "eigen_max / eigen_min",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "-500",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Print_105": {
                "input_": {
                    "value": "input_mat_clipped",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clipoutNeg(input_mat, threshold)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.logical_or(tf.greater(eigen_ratio, 0.0), tf.less(eigen_ratio, -500)), lambda : input_mat_clipped, lambda : tf.Print(input_mat_clipped, [tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]))",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.convert_to_tensor('screwed ratio ' + name + ' eigen values!!!'), tf.convert_to_tensor(var.name), eigen_min, eigen_max, eigen_ratio]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(b, [-1, K])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_36": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_88": {
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "transpose_a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_18": {
                "a": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(a, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, int(a_shape[reduce_dim])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(a, [0, 2, 1]), [-1, K])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, [-1, K])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "tensor": {
                    "value": "result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, b_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, a_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(result, a_dims)",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_b=transpose_b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [B, -1, N])",
                            "Call"
                        ],
                        [
                            "tf.matmul(a, b, transpose_a=transpose_a)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(result, [M, B, -1]), [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[M, B, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "value": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "tensor": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "tensor": {
                    "value": "tf.transpose(b, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(b, b_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [int(b_shape[reduce_dim]), -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(b, [-1, K]), [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.transpose(b, [0, 2, 1]), [-1, K]), [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/acktr/policies.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "ob_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(nbatch, nh, nw, nc * nstack)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "ob_no",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ob_dim * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ob",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "oldac_na",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ac",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "oldac_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_dim * 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "oldac_dist",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "adv_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "oldlogprob_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "oldlogprob",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(ob_no, 64, 'h1', weight_init=U.normc_initializer(1.0), bias_init=0.0, weight_loss_dict=wd_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(h1, 64, 'h2', weight_init=U.normc_initializer(1.0), bias_init=0.0, weight_loss_dict=wd_dict)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "self.logstd_1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ac_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_61": {
                "variable": {
                    "value": "logstd_1a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd_1a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(logstd_1a, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "std_1a",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd_1a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(logstd_1a, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_63": {
                "variable": {
                    "value": "std_na",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std_1a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(logstd_1a)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(mean_na)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "ac_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(mean_na, [-1, ac_dim]), tf.reshape(std_na, [-1, ac_dim])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "model",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "std_na",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.tile(std_1a, [tf.shape(mean_na)[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, ac_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_17": {
                "x": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, ob_shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "mean_na",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dense(h2, ac_dim, 'mean', weight_init=U.normc_initializer(0.1), bias_init=0.0, weight_loss_dict=wd_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_65": {
                "input": {
                    "value": "ac_dist[:, ac_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_66": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_66": {
                "x": {
                    "value": "ac_dist[:, ac_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_67": {
                "x": {
                    "value": "2.0 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_67": {
                "x": {
                    "value": "ac_dist[:, ac_dim:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/acktr/run_mujoco.py": {
        "tensorflow": {
            "Session_22": {
                "config": {
                    "value": "tf.ConfigProto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/acktr/utils.py": {
        "tensorflow": {
            "reduce_mean_12": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_13": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_18": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits - tf.reduce_max(logits, 1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_19": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ea0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(a0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nh]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_9": {
                "input": {
                    "value": "logits - tf.log(-tf.log(noise))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_14": {
                "x": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(x - mean))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "p0 * (tf.log(z0) - a0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[rf, rf, nin, nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nf]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nin, nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "ortho_init(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nh]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "numerator / denominator + tf.log(std2) - tf.log(std1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_8": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_13": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_17": {
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "input_tensor": {
                    "value": "p0 * tf.log(p0 + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_27": {
                "x": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_73": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_decay_fc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0003",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_decay_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bias_add_80": {
                "value": {
                    "value": "tf.matmul(x, w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [nf], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [nh], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('b', [size], initializer=tf.constant_initializer(bias_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_91": {
                "x": {
                    "value": "std1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "key",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_9": {
                "x": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_51": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [rf, rf, nin, nf], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [rf, rf, nin, nf], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_78": {
                "name": {
                    "value": "U.scope_name().split('/')[0] + '_' + 'losses'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(w), weight_decay_fc, name='weight_decay_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, nh])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [rf, rf, nin, nf], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_92": {
                "x": {
                    "value": "std2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_94": {
                "x": {
                    "value": "std2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_21": {
                "x": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(ea0, 1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_24": {
                "x": {
                    "value": "p0 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_59": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "bias_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "l2_loss_73": {
                "t": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [rf, rf, nin, nf], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [nin, nh], initializer=ortho_init(init_scale))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/acktr/value_functions.py": {
        "tensorflow": {}
    },
    "src/baselines_catkin/baselines/baselines/common/distributions.py": {
        "tensorflow": {
            "one_hot_134": {
                "variable": {
                    "value": "one_hot_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.logits.get_shape().as_list()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_141": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_142": {
                "variable": {
                    "value": "ea1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "other.logits - U.max(other.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_149": {
                "variable": {
                    "value": "ea0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a0",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "self.logits - U.max(self.logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_163": {
                "variable": {
                    "value": "self.low",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "low",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_186": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "maximum_188": {
                "variable": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "-14",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_189": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_212": {
                "variable": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.param_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "self.sample_dtype()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "prepend_shape + self.sample_shape()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_135": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "one_hot_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(x, self.logits.get_shape().as_list()[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_155": {
                "input": {
                    "value": "self.logits - tf.log(-tf.log(u))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_170": {
                "inputs": {
                    "value": "[p.neglogp(px) for (p, px) in zip(self.categoricals, tf.unstack(x - self.low, axis=len(x.get_shape()) - 1))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_172": {
                "inputs": {
                    "value": "[p.kl(q) for (p, q) in zip(self.categoricals, other.categoricals)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_176": {
                "inputs": {
                    "value": "[p.entropy() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "round_216": {
                "x": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_225": {
                "x": {
                    "value": "math_ops.less(u, self.ps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_168": {
                "x": {
                    "value": "tf.stack([p.mode() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_178": {
                "x": {
                    "value": "tf.stack([p.sample() for p in self.categoricals], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_218": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_222": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_224": {
                "input": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_225": {
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_249": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_155": {
                "x": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(self.logits))",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.shape(self.ps))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_164": {
                "value": {
                    "value": "flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "high - low + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(flat.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_168": {
                "values": {
                    "value": "[p.mode() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_178": {
                "values": {
                    "value": "[p.sample() for p in self.categoricals]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_220": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_146": {
                "x": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_152": {
                "x": {
                    "value": "z0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "U.sum(ea0, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_196": {
                "x": {
                    "value": "tf.shape(x)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_204": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_218": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_170": {
                "value": {
                    "value": "x - self.low",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "len(x.get_shape()) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_195": {
                "x": {
                    "value": "(x - self.mean) / self.std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_200": {
                "x": {
                    "value": "other.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/common/misc_util.py": {
        "tensorflow": {
            "set_random_seed_76": {
                "seed": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/common/mpi_adam.py": {
        "tensorflow": {
            "Variable_57": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(3).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.random.randn(2, 5).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "stepsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_55": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_session_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_65": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_69": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_70": {
                "main": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.sin(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_59": {
                "x": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(3).astype('float32'))",
                            "Call"
                        ],
                        [
                            "stepsize * np.sqrt(1 - self.beta2 ** self.t) / (1 - self.beta1 ** self.t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_59": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(np.random.randn(2, 5).astype('float32'))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/common/mpi_running_mean_std.py": {
        "tensorflow": {
            "get_variable_8": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsum",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "runningsumsq",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_25": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_26": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.to_float(self._sumsq / self._count) - tf.square(self.mean), 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "newsum",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "newsumsq",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "newcount",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_26": {
                "x": {
                    "value": "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_11": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_16": {
                "value": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_26": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_add_32": {
                "ref": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='sum')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_33": {
                "ref": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newsumsq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=self.shape, dtype=tf.float64, name='var')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_add_34": {
                "ref": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "newcount",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[], dtype=tf.float64, name='count')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/common/tests/test_tf_util.py": {
        "tensorflow": {
            "Variable_12": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "42.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_16": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "other",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/common/tf_util.py": {
        "tensorflow": {
            "cond_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : then_expression",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_expression",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ConfigProto_225": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "num_cpu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_272": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_278": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_325": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_335": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/V'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(x.get_shape()[1]), size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_337": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/g'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_338": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_341": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gradients_610": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_655": {
                "variable": {
                    "value": "inds0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(inds0, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_656": {
                "variable": {
                    "value": "inds1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(inds1, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_657": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(X)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_659": {
                "variable": {
                    "value": "Xflat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_713": {
                "variable": {
                    "value": "lengths_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lengths_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(lengths_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_24": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_33": {
                "x": {
                    "value": "var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_38": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_min_43": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_47": {
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "arrs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_51": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None if axis is None else [axis]",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_191": {
                "condition": {
                    "value": "tf.abs(x) < delta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(x) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "delta * (tf.abs(x) - 0.5 * delta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_228": {
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=num_cpu, intra_op_parallelism_threads=num_cpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_260": {
                "variable": {
                    "value": "set_endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_310": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_312": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_328": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_412": {
                "variable": {
                    "value": "self.update_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_613": {
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(grad if grad is not None else tf.zeros_like(v), [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_625": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_632": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_640": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gather_660": {
                "params": {
                    "value": "Xflat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(X, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds0 * ncols + inds1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_685": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_736": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X), tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_746": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, intprod(x.get_shape().as_list()[1:])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_754": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_29": {
                "x": {
                    "value": "x - meanx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_65": {
                "x": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_80": {
                "inputs": {
                    "value": "[sum(tf.square(p)) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variables_initializer_242": {
                "var_list": {
                    "value": "new_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set(tf.global_variables()) - ALREADY_INITIALIZED",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_290": {
                "value": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "tf.placeholder(dtype=dtype, shape=shape, name=name)",
                            "Call"
                        ],
                        [
                            "self._call(*args)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_342": {
                "x": {
                    "value": "sum(tf.square(v), axis=0, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "tensor": {
                    "value": "scaler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g / tf.sqrt(sum(tf.square(v), axis=0, keepdims=True))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_351": {
                "x": {
                    "value": "pkeep + tf.random_uniform(tf.shape(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_session_479": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_479": {
                "variable": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "dict(zip(self.nondata_inputs, nondata_vals))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_collection_524": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_529": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_657": {
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_693": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_715": {
                "input": {
                    "value": "lengths_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(lengths_b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_92": {
                "x": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.shape(X))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_149": {
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_167": {
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'(unnamed)'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_169": {
                "x": {
                    "value": "super().get()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_192": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "square_193": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "global_variables_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_uniform_initializer_310": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "image_316": {
                "name": {
                    "value": "summary_tag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "data": {
                    "value": "tf.transpose(tf.reshape(w, [filter_size[0], filter_size[1], -1, 1]), [2, 0, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "max_images": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_321": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_336": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_337": {
                "value": {
                    "value": "init_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_338": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_505": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "not self.first_time",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_norm_612": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_194": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "clip_by_norm_210": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_317": {
                "a": {
                    "value": "tf.reshape(w, [filter_size[0], filter_size[1], -1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_342": {
                "x": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_scope_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_614": {
                "tensor": {
                    "value": "grad if grad is not None else tf.zeros_like(v)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_630": {
                "ref": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_80": {
                "x": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_317": {
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('W', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[filter_size[0], filter_size[1], -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_351": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : then_expression, lambda : else_expression)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, v)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_630": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(X), tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_640": {
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_614": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/V', [int(x.get_shape()[1]), size], initializer=tf.random_normal_initializer(0, 0.05))",
                            "Call"
                        ],
                        [
                            "data_vals[1:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ddpg/ddpg.py": {
        "tensorflow": {
            "group_54": {
                "*inputs": {
                    "value": "*updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.obs0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.obs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + observation_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "obs1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.terminals1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "terminals1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "rewards",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,) + action_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.critic_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "critic_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.param_noise_stddev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_stddev",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "variable": {
                    "value": "normalized_obs0",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs0, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_102": {
                "variable": {
                    "value": "normalized_obs1",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.obs1, self.obs_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.observation_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.observation_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_160": {
                "variable": {
                    "value": "self.adaptive_policy_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(self.actor_tf - adaptive_actor_tf))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_175": {
                "variable": {
                    "value": "normalized_critic_target_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "normalize(self.critic_target, self.ret_rms)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_176": {
                "variable": {
                    "value": "self.critic_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.normalized_critic_tf - normalized_critic_target_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "self.old_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_std",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "self.old_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_38": {
                "*inputs": {
                    "value": "*soft_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_34": {
                "ref": {
                    "value": "target_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "Name"
                        ]
                    ]
                }
            },
            "assign_35": {
                "ref": {
                    "value": "target_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1.0 - tau) * target_var + tau * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_123": {
                "t": {
                    "value": "self.normalized_critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_by_value_125": {
                "t": {
                    "value": "self.normalized_critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "self.return_range[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.return_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "input_tensor": {
                    "value": "tf.square(self.actor_tf - adaptive_actor_tf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_176": {
                "x": {
                    "value": "self.normalized_critic_tf - normalized_critic_target_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_225": {
                "input_tensor": {
                    "value": "self.critic_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_230": {
                "input_tensor": {
                    "value": "self.critic_with_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_235": {
                "input_tensor": {
                    "value": "self.actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_49": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var + tf.random_normal(tf.shape(var), mean=0.0, stddev=param_noise_stddev)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_52": {
                "ref": {
                    "value": "perturbed_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "Name"
                        ]
                    ]
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "obs_rms",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "ret_rms",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_160": {
                "x": {
                    "value": "self.actor_tf - adaptive_actor_tf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_222": {
                "input_tensor": {
                    "value": "self.obs_rms.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "input_tensor": {
                    "value": "self.perturbed_actor_tf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "critic_reg_vars",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ddpg/main.py": {
        "tensorflow": {
            "reset_default_graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ddpg/models.py": {
        "tensorflow": {
            "get_collection_11": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_15": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.nb_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, self.nb_actions, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(x)",
                            "Call"
                        ],
                        [
                            "obs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, action], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 64)",
                            "Call"
                        ],
                        [
                            "tc.layers.layer_norm(x, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(x, 1, kernel_initializer=tf.random_uniform_initializer(minval=-0.003, maxval=0.003))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_uniform_initializer(minval=-0.003, maxval=0.003)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_44": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_71": {
                "minval": {
                    "value": "-0.003",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.003",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ddpg/training.py": {
        "tensorflow": {
            "Saver_35": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ddpg/util.py": {
        "tensorflow": {
            "reduce_mean_11": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_12": {
                "variable": {
                    "value": "devs_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_13": {
                "input_tensor": {
                    "value": "devs_squared",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.square(x - m)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keepdims",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_17": {
                "x": {
                    "value": "reduce_var(x, axis=axis, keepdims=keepdims)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/deepq/build_graph.py": {
        "tensorflow": {
            "placeholder_147": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_150": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_153": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "U.function([obs_t_input], q_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_158": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_160": {
                "variable": {
                    "value": "output_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "update_param_noise_threshold_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_threshold",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_210": {
                "variable": {
                    "value": "update_param_noise_scale_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_scale",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "reset_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_213": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_214": {
                "variable": {
                    "value": "param_noise_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_215": {
                "variable": {
                    "value": "param_noise_threshold",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_247": {
                "variable": {
                    "value": "mean_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive))), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_261": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values_perturbed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='perturbed_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_265": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_267": {
                "variable": {
                    "value": "output_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_346": {
                "variable": {
                    "value": "act_t_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_347": {
                "variable": {
                    "value": "rew_t_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_349": {
                "variable": {
                    "value": "done_mask_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_350": {
                "variable": {
                    "value": "importance_weights_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_361": {
                "variable": {
                    "value": "q_t_selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_t * tf.one_hot(act_t_ph, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_378": {
                "variable": {
                    "value": "weighted_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "importance_weights_ph * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_394": {
                "variable": {
                    "value": "update_target_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_target_expr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "trainable_variables_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arg_max_366": {
                "variable": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_tp1_using_online_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='q_func', reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_367": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1 * tf.one_hot(q_tp1_best_using_online_net, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_369": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='target_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_156": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_161": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "group_239": {
                "*inputs": {
                    "value": "*perturb_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_250": {
                "variable": {
                    "value": "update_scale_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mean_kl < param_noise_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale * 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale / 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_257": {
                "pred": {
                    "value": "update_param_noise_threshold_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_param_noise_threshold_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_threshold",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_262": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_263": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_268": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_271": {
                "pred": {
                    "value": "reset_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='reset')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : perturb_vars(original_scope='q_func', perturbed_scope='perturbed_q_func')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_272": {
                "pred": {
                    "value": "update_param_noise_scale_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='update_param_noise_scale')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : update_scale()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Variable(0.0, trainable=False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_376": {
                "input": {
                    "value": "q_t_selected_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rew_t_ph + gamma * q_tp1_best_masked",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_150": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_157": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_213": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_214": {
                "value": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_215": {
                "value": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_233": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var + tf.random_normal(shape=tf.shape(var), mean=0.0, stddev=param_noise_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_236": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_246": {
                "logits": {
                    "value": "q_values_adaptive",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='adaptive_q_func')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_249": {
                "control_inputs": {
                    "value": "[perturb_for_adaption]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_264": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_361": {
                "indices": {
                    "value": "act_t_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='action')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_246": {
                "x": {
                    "value": "tf.nn.softmax(q_values_adaptive)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_271": {
                "*inputs": {
                    "value": "*[]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_272": {
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_367": {
                "indices": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.arg_max(q_tp1_using_online_net, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/deepq/experiments/atari/model.py": {
        "tensorflow": {
            "relu_8": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.layer_norm(x, scale=True, center=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_21": {
                "variable": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_in",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_42": {
                "variable": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_in",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "img_in",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=32, kernel_size=8, stride=4, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=4, stride=2, activation_fn=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=64, kernel_size=3, stride=1, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.fully_connected(actions_hidden, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "action_scores - tf.expand_dims(action_scores_mean, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_16": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "value_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "value_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.fully_connected(conv_out, num_outputs=512, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layer_norm_fn(value_out, relu=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(value_out)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(value_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "state_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.fully_connected(conv_out, num_outputs=512, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layer_norm_fn(state_hidden, relu=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "actions_hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "actions_hidden",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.fully_connected(conv_out, num_outputs=512, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layer_norm_fn(actions_hidden, relu=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(actions_hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/deepq/experiments/atari/train.py": {
        "tensorflow": {
            "AdamOptimizer_151": {
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/deepq/experiments/custom_cartpole.py": {
        "tensorflow": {
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_33": {
                "learning_rate": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/deepq/models.py": {
        "tensorflow": {
            "flatten_43": {
                "variable": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inpt",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "inpt",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inpt",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "inpt",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "action_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_out",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "state_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_out",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/deepq/simple.py": {
        "tensorflow": {
            "AdamOptimizer_178": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/logger.py": {
        "tensorflow": {
            "as_bytes_108": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ppo1/cnn_policy.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "stochastic",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 256, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_52": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_54": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 32, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 64, 'l3', [3, 3], [1, 1], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 512, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ppo1/mlp_policy.py": {
        "tensorflow": {
            "identity_46": {
                "variable": {
                    "value": "pdparam",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdparam",
                    "type": "Call",
                    "possible_values": [
                        [
                            "U.concatenate([mean, mean * 0.0 + logstd], axis=1)",
                            "Call"
                        ],
                        [
                            "U.dense(last_out, pdtype.param_shape()[0], 'polfinal', U.normc_initializer(0.01))",
                            "Call"
                        ],
                        [
                            "tf.identity(pdparam, name='pdparam')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pdparam",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "stochastic",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stoch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_54": {
                "variable": {
                    "value": "ac",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ac",
                    "type": "Call",
                    "possible_values": [
                        [
                            "U.switch(stochastic, self.pd.sample(), self.pd.mode())",
                            "Call"
                        ],
                        [
                            "tf.identity(ac, name='pi')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pi",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_26": {
                "variable": {
                    "value": "obz",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(ob - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_32": {
                "variable": {
                    "value": "last_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U.dense(last_out, hid_size, 'vffc%i' % (i + 1), weight_init=U.normc_initializer(0.01))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "variable": {
                    "value": "last_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "U.dense(last_out, hid_size, 'polfc%i' % (i + 1), weight_init=U.normc_initializer(0.01))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, pdtype.param_shape()[0] // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_61": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_63": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "obfilter",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/ppo1/pposgd_simple.py": {
        "tensorflow": {
            "get_default_graph_26": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_29": {
                "variable": {
                    "value": "(mean, _, logstd, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pdparam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name('pi/pdparam:0')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[len(SIMPLE_AC), pdparam_shape // 2 - len(SIMPLE_AC), len(SIMPLE_AC), pdparam_shape // 2 - len(SIMPLE_AC)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_32": {
                "variable": {
                    "value": "ac_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "SIMPLE_AC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.2, 0.7, 0.7, 1.4])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_33": {
                "variable": {
                    "value": "ac_logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array([0] * len(SIMPLE_AC))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "atarg",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "lrmult",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lrmult",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_176": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_200": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "U.ALREADY_INITIALIZED",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_201": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_54": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "pretrain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_180": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_53": {
                "t": {
                    "value": "logstd - ac_logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_57": {
                "var_list": {
                    "value": "set(tf.global_variables()) - U.ALREADY_INITIALIZED",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_179": {
                "x": {
                    "value": "surr1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ratio * atarg",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "surr2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "U.clip(ratio, 1.0 - clip_param, 1.0 + clip_param) * atarg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_190": {
                "ref": {
                    "value": "oldv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/trpo_mpi/nosharing_cnn_policy.py": {
        "tensorflow": {
            "placeholder_44": {
                "variable": {
                    "value": "stochastic",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 128, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 8, 'l1', [8, 8], [4, 4], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.conv2d(x, 16, 'l2', [4, 4], [2, 2], pad='VALID')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "U.dense(x, 128, 'lin', U.normc_initializer(1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_52": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_54": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "pol",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "vf",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/baselines_catkin/baselines/baselines/trpo_mpi/trpo_mpi.py": {
        "tensorflow": {
            "get_default_graph_28": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_31": {
                "variable": {
                    "value": "(mean, _, logstd, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pdparam",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.get_tensor_by_name('pi/pdparam:0')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[len(SIMPLE_AC), pdparam_shape // 2 - len(SIMPLE_AC), len(SIMPLE_AC), pdparam_shape // 2 - len(SIMPLE_AC)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_34": {
                "variable": {
                    "value": "ac_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "SIMPLE_AC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([-0.2, 0.7, 0.7, 1.4])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_35": {
                "variable": {
                    "value": "ac_logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array([0] * len(SIMPLE_AC))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "atarg",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_181": {
                "variable": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi.pd.logp(ac) - oldpi.pd.logp(ac)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_197": {
                "variable": {
                    "value": "klgrads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "meankl",
                            "Name"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[v for v in all_var_list if v.name.split('/')[1].startswith('pol')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "flat_tangent",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tan",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_206": {
                "variable": {
                    "value": "gvp",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[U.sum(g * tangent) for (g, tangent) in zipsame(klgrads, tangents)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_244": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "U.ALREADY_INITIALIZED",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "latest_checkpoint_245": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_56": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "pretrain",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_179": {
                "x": {
                    "value": "pi.vpred - ret",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_55": {
                "t": {
                    "value": "logstd - ac_logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variables_initializer_59": {
                "var_list": {
                    "value": "set(tf.global_variables()) - U.ALREADY_INITIALIZED",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_204": {
                "tensor": {
                    "value": "flat_tangent[start:start + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shapes",
                            "Name"
                        ]
                    ]
                }
            },
            "assign_210": {
                "ref": {
                    "value": "oldv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "newv",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}