{
    "dataloader/handle_input.py": {
        "sklearn": {
            "train_test_split_56": {
                "variable": {
                    "value": "(x_train, x_test, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "train_test_split_58": {
                "variable": {
                    "value": "(x_test, x_val, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "shuffle_33": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_33": {
                "variable": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_36": {
                "variable": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "loss/loss_function.py": {
        "tensorflow": {
            "argmax_37": {
                "variable": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out['logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_62": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * tf.reduce_sum(tf.math.log(2 * np.pi) + tf.math.log(z_variance) + tf.square(gaussian_sample - z_mean) / z_variance, axis=1) + 0.5 * tf.reduce_sum(tf.math.log(2 * np.pi) + tf.math.log(y_variance) + tf.square(gaussian_sample - y_mean) / y_variance, axis=1)",
                            "BinOp"
                        ],
                        [
                            "loss - tf.math.log(0.1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "tf.square(ground_truth - predictions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "ground_truth - predictions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "tf.reduce_sum(targets * log_prob, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "tf.math.log(2 * np.pi) + tf.math.log(z_variance) + tf.square(gaussian_sample - z_mean) / z_variance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_51": {
                "input_tensor": {
                    "value": "tf.math.log(2 * np.pi) + tf.math.log(y_variance) + tf.square(gaussian_sample - y_mean) / y_variance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "targets * log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_48": {
                "x": {
                    "value": "z_variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_out['var']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_48": {
                "x": {
                    "value": "gaussian_sample - z_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "y_variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_out['y_variance']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_51": {
                "x": {
                    "value": "gaussian_sample - y_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "Adam_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "training_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['training_config']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Mean_51": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_52": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_53": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "test_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_55": {
                "variable": {
                    "value": "train_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_56": {
                "variable": {
                    "value": "val_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_57": {
                "variable": {
                    "value": "test_accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GradientTape_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[labels.shape.as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_loss['predicted'].shape.as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[labels.shape.as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[out_loss['predicted'].shape.as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model/gmvae.py": {
        "tensorflow": {
            "Dense_47": {
                "variable": {
                    "value": "self.fc11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc11_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_48": {
                "variable": {
                    "value": "self.fc12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc12_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_49": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_50": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_53": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc21_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_54": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc22_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.gaussian_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_56": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.gaussian_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_61": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_66": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "gumbel_softmax_sample / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_76": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_83": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(z_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_107": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.gaussian_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_108": {
                "variable": {
                    "value": "self.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.gaussian_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.softplus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_114": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc1_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_115": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.fc2_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_116": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y, tf.math.reduce_max(y, 1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mean(z_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_65": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(self.fc12(self.fc11(inputs)))",
                            "Call"
                        ],
                        [
                            "self.out(self.fc2(self.fc1(gaussian_sample)))",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_68": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(gumbel_softmax_sample / temperature)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_hard - y) + y",
                            "BinOp"
                        ],
                        [
                            "self.gumbel_softmax(logits, hard=True)",
                            "Call"
                        ],
                        [
                            "inputs['y']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.math.reduce_max(y, 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_69": {
                "input": {
                    "value": "y_hard - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "x": {
                    "value": "z_variance + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(self.fc12(self.fc11(inputs)))",
                            "Call"
                        ],
                        [
                            "self.out(self.fc2(self.fc1(gaussian_sample)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_68": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(gumbel_softmax_sample / temperature)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_hard - y) + y",
                            "BinOp"
                        ],
                        [
                            "self.gumbel_softmax(logits, hard=True)",
                            "Call"
                        ],
                        [
                            "inputs['y']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}