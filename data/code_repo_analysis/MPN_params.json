{
    "evaluate.py": {
        "torch": {}
    },
    "models/CA_2.py": {
        "torch": {
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "y_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channel_attn(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y_channel)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/base.py": {
        "torch": {
            "AdaptiveAvgPool2d_35": {
                "variable": {
                    "value": "model_ft.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "add_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*add_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm1d_41": {
                "num_features": {
                    "value": "num_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "num_bottleneck",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_num",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/mpn_no_ca.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.local_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.local_conv_list2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.Sfc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.Tfc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Slocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "751",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "751",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_79": {
                "variable": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat",
                            "variable"
                        ],
                        [
                            "self.local_conv_list[i](local_feat)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(local_feat, (feat.size(2), feat.size(3)))",
                            "Call"
                        ],
                        [
                            "self.local_conv_list2[i](local_feat)",
                            "Call"
                        ],
                        [
                            "local_feat.view(local_feat.size(0), -1)",
                            "Call"
                        ],
                        [
                            "feat[:, :, i * stripe_h:(i + 1) * stripe_h, :]",
                            "Subscript"
                        ],
                        [
                            "self.local_conv_list[i](local_feat)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(local_feat, (stripe_h, feat.size(-1)))",
                            "Call"
                        ],
                        [
                            "self.local_conv_list2[i](local_feat)",
                            "Call"
                        ],
                        [
                            "local_feat.view(local_feat.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(feat.size(2), feat.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_96": {
                "variable": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat",
                            "variable"
                        ],
                        [
                            "self.local_conv_list[i](local_feat)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(local_feat, (feat.size(2), feat.size(3)))",
                            "Call"
                        ],
                        [
                            "self.local_conv_list2[i](local_feat)",
                            "Call"
                        ],
                        [
                            "local_feat.view(local_feat.size(0), -1)",
                            "Call"
                        ],
                        [
                            "feat[:, :, i * stripe_h:(i + 1) * stripe_h, :]",
                            "Subscript"
                        ],
                        [
                            "self.local_conv_list[i](local_feat)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(local_feat, (stripe_h, feat.size(-1)))",
                            "Call"
                        ],
                        [
                            "self.local_conv_list2[i](local_feat)",
                            "Call"
                        ],
                        [
                            "local_feat.view(local_feat.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(stripe_h, feat.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "./data/1501.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "nn.Conv2d(2048, Tlocal_conv_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "nn.Conv2d(Tlocal_conv_channels, Tlocal_conv_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/mpn_no_ca_test.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(model.model.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.local_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.local_conv_list2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.Sfc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.Tfc_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Slocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "751",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "751",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_78": {
                "variable": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat",
                            "variable"
                        ],
                        [
                            "self.local_conv_list[i](local_feat)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(local_feat, (feat.size(2), feat.size(3)))",
                            "Call"
                        ],
                        [
                            "self.local_conv_list2[i](local_feat)",
                            "Call"
                        ],
                        [
                            "local_feat.view(local_feat.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(feat.size(2), feat.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "./data/1501.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "nn.Conv2d(2048, Tlocal_conv_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "nn.Conv2d(Tlocal_conv_channels, Tlocal_conv_channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "Tlocal_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_104": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "is_available_63": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_77": {
                "variable": {
                    "value": "inv_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "img.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_device_47": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_106": {
                "variable": {
                    "value": "fnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(n, 3072).zero_()",
                            "Call"
                        ],
                        [
                            "ff.div(fnorm.expand_as(ff))",
                            "Call"
                        ],
                        [
                            "ff + feature",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, ff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_70": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.location, 'net_%s.pth' % opt.which_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_101": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_mpn_no_ca.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "dataloaders",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "image_datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(os.path.join(data_dir, 'train' + train_all), data_transforms['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.n_classes * opt.n_images",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "Sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BalancedBatchSampler(image_datasets, n_classes=opt.n_classes, n_samples=opt.n_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_80": {
                "variable": {
                    "value": "use_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_201": {
                "variable": {
                    "value": "criterion_part_S",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_202": {
                "variable": {
                    "value": "criterion_part_T",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_204": {
                "variable": {
                    "value": "criterion_cosine",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_208": {
                "variable": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': TSModel.parameters(), 'lr': 0.01}]",
                            "List"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_213": {
                "variable": {
                    "value": "exp_lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(param_groups, momentum=0.9, weight_decay=0.0005, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_device_53": {
                "device": {
                    "value": "gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./checks/mpn_no_ca/1501/1/', save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "Spart_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([Scriterion_part(logit, labels) for logit in Slogits_list])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "Tpart_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([Tcriterion_part(logit, labels) for logit in Tlogits_list])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "Slocal_feat_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Slocal_feat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TSModel(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "Tlocal_feat_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Tlocal_feat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TSModel(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_132": {
                "variable": {
                    "value": "S_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Slocal_feat_concat[i * image_num:(i + 1) * image_num, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_133": {
                "variable": {
                    "value": "T_center",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Tlocal_feat_concat[i * image_num:(i + 1) * image_num, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_119": {
                "tensors": {
                    "value": "[Scriterion_part(logit, labels) for logit in Slogits_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_120": {
                "tensors": {
                    "value": "[Tcriterion_part(logit, labels) for logit in Tlogits_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "norm_140": {
                "input": {
                    "value": "Slocal_feat_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(Slocal_feat_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/batch_sample_old_adjust.py": {
        "torch": {}
    },
    "utils/losses.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_distances - an_distances + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/random_erasing.py": {
        "torch": {}
    },
    "utils/triplet_sampling.py": {
        "torch": {
            "t_8": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/triplet_sampling_hardestP.py": {
        "torch": {
            "t_8": {
                "input": {
                    "value": "vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}