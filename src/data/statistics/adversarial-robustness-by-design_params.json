{
    "bb_nes_bandit_attack.py": {
        "torch": {
            "Subset_50": {
                "variable": {
                    "value": "test_dl_perfect",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dl.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "correctly_classified_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(itertools.chain(*correctly_classified_indexes))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "test_loader_perfect",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dl_perfect",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(test_dl.dataset, correctly_classified_indexes)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_109": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_16": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_46": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "path_to_folder + 'models/' + file_name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "black_box_attack_utils.py": {
        "torch": {
            "sqrt_28": {
                "variable": {
                    "value": "norm_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t.pow(2).sum(dim=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_11": {
                "data": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(orig + eps * delta / norm(delta)) * out_of_bounds_mask",
                            "BinOp"
                        ],
                        [
                            "x + new_x * (1 - out_of_bounds_mask)",
                            "BinOp"
                        ],
                        [
                            "upper_left[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "total_queries",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "image.size(0)",
                            "Call"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "self.batch_size if self.batch_size > 0 else num_blocks",
                            "IfExp"
                        ],
                        [
                            "self.batch_size if self.batch_size > 0 else num_blocks",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Upsample_114": {
                "variable": {
                    "value": "upsampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(image.size(2), image.size(2))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "image.size(0)",
                            "Call"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "self.batch_size if self.batch_size > 0 else num_blocks",
                            "IfExp"
                        ],
                        [
                            "self.batch_size if self.batch_size > 0 else num_blocks",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "prior_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "prior_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_311": {
                "variable": {
                    "value": "upsampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.width, self.height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_572": {
                "variable": {
                    "value": "upsampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.width, self.height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_43": {
                "input": {
                    "value": "lr * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_44": {
                "input": {
                    "value": "-lr * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_182": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj_step(new_im)",
                            "Call"
                        ],
                        [
                            "torch.clamp(image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_266": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(inputs).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_268": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_50": {
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_91": {
                "input": {
                    "value": "new_x - orig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-eps",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_140": {
                "input": {
                    "value": "total_queries > max_queries",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj_step(new_im)",
                            "Call"
                        ],
                        [
                            "torch.clamp(image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_271": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(label, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "data": {
                    "value": "noise",
                    "type": "Call",
                    "possible_values": [
                        [
                            "upsampler(torch.tensor(noise))",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[best_idx])",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[cand_idx])",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[best_idx])",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[cand_idx])",
                            "Call"
                        ],
                        [
                            "upsampler(torch.tensor(noise))",
                            "Call"
                        ],
                        [
                            "-self.epsilon * np.ones([1, 3, w_n, h_n], dtype=np.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_573": {
                "data": {
                    "value": "noise",
                    "type": "Call",
                    "possible_values": [
                        [
                            "upsampler(torch.tensor(noise))",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[best_idx])",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[cand_idx])",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[best_idx])",
                            "Call"
                        ],
                        [
                            "self._flip_noise(noise, blocks[cand_idx])",
                            "Call"
                        ],
                        [
                            "upsampler(torch.tensor(noise))",
                            "Call"
                        ],
                        [
                            "-self.epsilon * np.ones([1, 3, w_n, h_n], dtype=np.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_125": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_to_fool(image)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(output)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(logits.cpu())",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(logits.cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_290": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_272": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_286": {
                "input": {
                    "value": "logits.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.tensor(label, dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_147": {
                "input": {
                    "value": "prior",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, 3, prior_size, prior_size).to(device)",
                            "Call"
                        ],
                        [
                            "prior_step(prior, est_grad, online_lr)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(image)",
                            "Call"
                        ],
                        [
                            "prior + est_deriv.view(-1, 1, 1, 1) * exp_noise",
                            "BinOp"
                        ],
                        [
                            "prior * not_dones_mask.view(-1, 1, 1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_166": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "proj_step(new_im)",
                            "Call"
                        ],
                        [
                            "torch.clamp(image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_201": {
                "input": {
                    "value": "other + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_280": {
                "input": {
                    "value": "real + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_295": {
                "input": {
                    "value": "other + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "correct_labels.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "logical_and_34": {
                "variable": {
                    "value": "idx0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_TA_hig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "idx_TA_low",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_and_35": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_baseli",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "idx0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_TA_hig, idx_TA_low)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_DFA, idx_BIN)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_TA_hig, idx_TA_low)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_50": {
                "variable": {
                    "value": "idx0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_DFA",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "idx_BIN",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_and_51": {
                "variable": {
                    "value": "idx1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_RP",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "idx_OPU",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_and_52": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_TA_hig, idx_TA_low)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_DFA, idx_BIN)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_TA_hig, idx_TA_low)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "idx1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_RP, idx_OPU)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_65": {
                "variable": {
                    "value": "idx0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_TA_hig",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "idx_TA_low",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logical_and_66": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_baseli",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "idx0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_TA_hig, idx_TA_low)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_DFA, idx_BIN)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_TA_hig, idx_TA_low)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_37": {
                "obj": {
                    "value": "idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_baseli, idx0)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx0, idx1)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_baseli, idx0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "results/c10/transfer_indexes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_54": {
                "obj": {
                    "value": "idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_baseli, idx0)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx0, idx1)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_baseli, idx0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "results/c10/ablation_indexes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.logical_and(idx_baseli, idx0)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx0, idx1)",
                            "Call"
                        ],
                        [
                            "torch.logical_and(idx_baseli, idx0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "results/c100/transfer_indexes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_15": {
                "f": {
                    "value": "path + net_name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "empty_17": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input.shape[0], opu.transform(input[0]).shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.backward_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((self.in_features, self.out_features)) / self.out_features ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.forward_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((self.in_features, self.out_features)) / self.out_features ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.backward_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((self.in_features, self.out_features)) / self.out_features ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_102": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_49": {
                "*size": {
                    "value": "(self.in_features, self.out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_90": {
                "*size": {
                    "value": "(self.in_features, self.out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_92": {
                "*size": {
                    "value": "(self.in_features, self.out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_130": {
                "input": {
                    "value": "x - x.mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "parsimonius_attack.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('data/cifar10', train=False, download=True, transform=transform)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('data/cifar100', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_67": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "path_to_folder + 'models/' + file_name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_88": {
                "variable": {
                    "value": "(_, label_adv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "classifier(image_adv.to(device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_9": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params=net.parameters(), lr=lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params=net.parameters(), lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_folder + 'models/' + file_name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultiStepLR_11": {
                "variable": {
                    "value": "scheduler2",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params=net.parameters(), lr=lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params=net.parameters(), lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[45, 60]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_19": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_44": {
                "f": {
                    "value": "path_to_folder + 'models/' + features_model + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transfer_attack.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_72": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.path_to_folder.split('/')[1]",
                            "Subscript"
                        ],
                        [
                            "torch.utils.data.TensorDataset(X, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "self.indexes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "args.indexes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "self.path_to_folder + 'models/' + file_name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_71": {
                "f": {
                    "value": "perturbed_img_folder + f'labels_{eps}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "args.indexes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "DataLoader_80": {
                "variable": {
                    "value": "c10_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=t)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_shuffle",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "c10_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=t)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=t)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "c100_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=t)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_shuffle",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "c100_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=t)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CIFAR100(root='./data', train=False, download=True, transform=t)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "correct_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dl.batch_size * len(dl)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_77": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "indices[:subsample]",
                            "Subscript"
                        ],
                        [
                            "indices[:subsample]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_100": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "indices[:subsample]",
                            "Subscript"
                        ],
                        [
                            "indices[:subsample]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_52": {
                "variable": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "vgg16_models.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dfa1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "second_classifier_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opu_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opu_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "second_classifier_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opu_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opu_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "conv2d",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opu_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "opu_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.number_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opu_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "opu_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.number_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_131": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "white_box_attack.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "saved_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_84": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(_x_adv)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "saved_FGSM",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "images_path + f'fgsm_{epsilon}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "saved_PGD",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "images_path + f'pgd_{epsilon}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_71": {
                "obj": {
                    "value": "saved_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(10000)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "images_path + f'labels_{epsilon}'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "self.path_to_folder + 'models/' + file_name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_60": {
                "input": {
                    "value": "y_PGD",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_94": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(x_adv, x + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_94": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach().requires_grad_(True).to(x.device)",
                            "Call"
                        ],
                        [
                            "x_adv + _x_adv.grad.data.sign() * step_size",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.min(x_adv, x + eps), x - eps)",
                            "Call"
                        ],
                        [
                            "x_adv.clamp(*clamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_98": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach().requires_grad_(True).to(x.device)",
                            "Call"
                        ],
                        [
                            "x_adv + _x_adv.grad.data.sign() * step_size",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.min(x_adv, x + eps), x - eps)",
                            "Call"
                        ],
                        [
                            "x_adv.clamp(*clamp)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_91": {
                "input": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.clone().detach().requires_grad_(True).to(x.device)",
                            "Call"
                        ],
                        [
                            "x_adv + _x_adv.grad.data.sign() * step_size",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.min(x_adv, x + eps), x - eps)",
                            "Call"
                        ],
                        [
                            "x_adv.clamp(*clamp)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}