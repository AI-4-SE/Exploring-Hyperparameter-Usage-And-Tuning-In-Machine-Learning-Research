{
    "pytorch/diora/analysis/cky.py": {
        "torch": {
            "full_26": {
                "variable": {
                    "value": "scalars[0][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.net.device",
                            "Attribute"
                        ],
                        [
                            "self.net.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_40": {
                "size": {
                    "value": "(length - i, batch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.net.device",
                            "Attribute"
                        ],
                        [
                            "self.net.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "sps",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/blocks/negative_sampler.py": {
        "torch": {
            "from_numpy_11": {
                "variable": {
                    "value": "neg_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "neg_samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "negative_sampler.sample(k_neg)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(neg_samples)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/diora/data/batch_iterator.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "sents",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(self.sentences)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_workers",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.get('pin_memory')",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FixedLengthBatchSampler(dataset, batch_size=batch_size, rng=rng, maxlen=filter_length, include_partial=include_partial, length_to_size=length_to_size)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Collate(self, rank, ngpus).collate_fn",
                            "Attribute"
                        ]
                    ]
                }
            },
            "chunk_46": {
                "input": {
                    "value": "torch.arange(len(tensor))",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "chunk_45": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "chunks",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_46": {
                "start": {
                    "value": "len(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/data/dataloader.py": {
        "torch": {}
    },
    "pytorch/diora/data/dataset.py": {
        "torch": {
            "device_count_148": {
                "variable": {
                    "value": "ngpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/data/embeddings.py": {
        "torch": {}
    },
    "pytorch/diora/external/standalone_elmo.py": {
        "torch": {
            "stack_729": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[indexer.as_padded_tensor(x, desired_length) for x in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_343": {
                "variable": {
                    "value": "self._layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(input_dim, input_dim * 2) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_420": {
                "variable": {
                    "value": "self._beginning_of_sentence_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ELMoCharacterMapper.beginning_of_sentence_characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_423": {
                "variable": {
                    "value": "self._end_of_sentence_characters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(ELMoCharacterMapper.end_of_sentence_characters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_455": {
                "variable": {
                    "value": "character_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_ids_with_bos_eos.view(-1, max_chars_per_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_469": {
                "variable": {
                    "value": "character_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.embedding(character_ids_with_bos_eos.view(-1, max_chars_per_token), self._char_embedding_weights)",
                            "Call"
                        ],
                        [
                            "torch.transpose(character_embedding, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "token_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_509": {
                "variable": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_574": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_filters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ],
                        [
                            "sum((f[1] for f in filters))",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_363": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(gate)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_475": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv(character_embedding)",
                            "Call"
                        ],
                        [
                            "activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_518": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cnn_options['embedding']['dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_344": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/net/diora.py": {
        "torch": {
            "softmax_242": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "score_func(hs[0], hs[1]) + ss[0] + ss[1]",
                            "BinOp"
                        ],
                        [
                            "s.view(B, L, N, 1)",
                            "Call"
                        ],
                        [
                            "score_func(hs[0], hs[1]) + ss[0] + ss[1]",
                            "BinOp"
                        ],
                        [
                            "s.view(B, -1, L, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_252": {
                "variable": {
                    "value": "h_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h.view(B, L, N, -1) * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_253": {
                "variable": {
                    "value": "c_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c.view(B, L, N, -1) * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_254": {
                "variable": {
                    "value": "s_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_311": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "score_func(hs[0], hs[1]) + ss[0] + ss[1]",
                            "BinOp"
                        ],
                        [
                            "s.view(B, L, N, 1)",
                            "Call"
                        ],
                        [
                            "score_func(hs[0], hs[1]) + ss[0] + ss[1]",
                            "BinOp"
                        ],
                        [
                            "s.view(B, -1, L, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_321": {
                "variable": {
                    "value": "h_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h.view(B, N, L, -1) * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_322": {
                "variable": {
                    "value": "c_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c.view(B, N, L, -1) * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_323": {
                "variable": {
                    "value": "s_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_46": {
                "variable": {
                    "value": "self.inside_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, ncells, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "full_47": {
                "variable": {
                    "value": "self.inside_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, ncells, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "full_48": {
                "variable": {
                    "value": "self.inside_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, ncells, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "full_51": {
                "variable": {
                    "value": "self.outside_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, ncells, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "full_52": {
                "variable": {
                    "value": "self.outside_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, ncells, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "full_53": {
                "variable": {
                    "value": "self.outside_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, ncells, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(5 * self.size, self.ninput * self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(5 * self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_108": {
                "variable": {
                    "value": "a_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(x, W.t()) + B",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input_h, U.t()) + B",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_110": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "input_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_124": {
                "variable": {
                    "value": "a_lst",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "activations",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(x, W.t()) + B",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(input_h, U.t()) + B",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_125": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_128": {
                "variable": {
                    "value": "f0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[3] + constant",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_lst[4] + constant",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.W_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(2 * self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.B_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_168": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(x, self.V) + self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_170": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_175": {
                "variable": {
                    "value": "input_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(input_h, self.W_0) + self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_177": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(h, self.W_1) + self.B_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_180": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_191": {
                "variable": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "bma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vector1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_205": {
                "variable": {
                    "value": "bma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_206": {
                "variable": {
                    "value": "ba",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(vector1, self.mat).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "vector2.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_560": {
                "variable": {
                    "value": "self.root_vector_out_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(3 * self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_472": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inside_h[:, -1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "self.root_mat_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_477": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "h.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "torch.cuda.current_device() if self.is_cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_557": {
                "variable": {
                    "value": "self.root_mat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_559": {
                "variable": {
                    "value": "self.root_vector_out_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_573": {
                "variable": {
                    "value": "self.root_mat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_575": {
                "variable": {
                    "value": "self.root_vector_out_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_589": {
                "variable": {
                    "value": "self.root_mat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size, self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_591": {
                "variable": {
                    "value": "self.root_vector_out_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_107": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "W.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_114": {
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "i * u",
                            "BinOp"
                        ],
                        [
                            "f0 * cs[0] + f1 * cs[1] + i * u",
                            "BinOp"
                        ],
                        [
                            "torch.full(h.shape, 0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.full(h.shape, 0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "normalize_func(c.view(*input_shape, self.size))",
                            "Call"
                        ],
                        [
                            "torch.full(h.shape, 0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "self.root_vector_out_c.view(1, 1, D).expand(B, 1, D)",
                            "Call"
                        ],
                        [
                            "normalize_func(c)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "input": {
                    "value": "input_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(hs, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(hs, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "i * u",
                            "BinOp"
                        ],
                        [
                            "f0 * cs[0] + f1 * cs[1] + i * u",
                            "BinOp"
                        ],
                        [
                            "torch.full(h.shape, 0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.full(h.shape, 0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "normalize_func(c.view(*input_shape, self.size))",
                            "Call"
                        ],
                        [
                            "torch.full(h.shape, 0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "self.root_vector_out_c.view(1, 1, D).expand(B, 1, D)",
                            "Call"
                        ],
                        [
                            "normalize_func(c)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_168": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "input": {
                    "value": "input_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(hs, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(hs, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W_0",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "o * torch.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "o * torch.tanh(c)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(torch.matmul(x, self.V) + self.B)",
                            "Call"
                        ],
                        [
                            "torch.relu(torch.matmul(input_h, self.W_0) + self.B)",
                            "Call"
                        ],
                        [
                            "torch.relu(torch.matmul(h, self.W_1) + self.B_1)",
                            "Call"
                        ],
                        [
                            "normalize_func(h.view(*input_shape, self.size))",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.inside_h[:, -1:], self.root_mat_out)",
                            "Call"
                        ],
                        [
                            "self.root_vector_out_h.view(1, 1, D).expand(B, 1, D)",
                            "Call"
                        ],
                        [
                            "normalize_func(h)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_476": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/net/inside_index.py": {
        "torch": {
            "tensor_87": {
                "variable": {
                    "value": "idx_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(idx_l, dtype=torch.int64, device=device).transpose(0, 1).contiguous().flatten()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "idx_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "idx_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "idx_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(idx_r, dtype=torch.int64, device=device).transpose(0, 1).contiguous().flatten()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "transpose_89": {
                "variable": {
                    "value": "idx_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_89": {
                "variable": {
                    "value": "idx_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/net/outside_index.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "par_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "index",
                    "type": "List",
                    "possible_values": [
                        [
                            "OutsideIndex()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "sis_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "index",
                    "type": "List",
                    "possible_values": [
                        [
                            "OutsideIndex()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "current_device_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/net/trainer.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "proj_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_pos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embeddings(sentences)",
                            "Call"
                        ],
                        [
                            "self.embeddings(sentences)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(self.mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "variable": {
                    "value": "proj_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_neg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embeddings(neg_samples)",
                            "Call"
                        ],
                        [
                            "self.embeddings(neg_samples.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(self.mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_57": {
                "variable": {
                    "value": "xp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,abxc->abx",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "proj_pos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(emb_pos, torch.t(self.mat))",
                            "Call"
                        ],
                        [
                            "torch.matmul(emb_pos, torch.t(self.mat))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_58": {
                "variable": {
                    "value": "xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ec,abxc->abe",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "proj_neg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(emb_neg, torch.t(self.mat))",
                            "Call"
                        ],
                        [
                            "torch.matmul(emb_neg, torch.t(self.mat))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xp, xn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiMarginLoss_62": {
                "variable": {
                    "value": "lossfn",
                    "type": "Variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_65": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(inputs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if self._cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self._cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "proj_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_pos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embeddings(sentences)",
                            "Call"
                        ],
                        [
                            "self.embeddings(sentences)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(self.mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "proj_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_neg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.embeddings(neg_samples)",
                            "Call"
                        ],
                        [
                            "self.embeddings(neg_samples.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.t(self.mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_117": {
                "variable": {
                    "value": "xp",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,abxc->abx",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "proj_pos",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(emb_pos, torch.t(self.mat))",
                            "Call"
                        ],
                        [
                            "torch.matmul(emb_pos, torch.t(self.mat))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_118": {
                "variable": {
                    "value": "xn",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "zec,abxc->abe",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "proj_neg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(emb_neg, torch.t(self.mat))",
                            "Call"
                        ],
                        [
                            "torch.matmul(emb_neg, torch.t(self.mat))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_119": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xp, xn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_122": {
                "variable": {
                    "value": "lossfn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_125": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(inputs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.cuda.current_device() if self._cuda else None",
                            "IfExp"
                        ],
                        [
                            "torch.cuda.current_device() if self._cuda else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_163": {
                "variable": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_174": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embeddings(x.view(-1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.mat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lossfn(inputs, outputs)",
                            "Call"
                        ],
                        [
                            "lossfn(inputs, outputs)",
                            "Call"
                        ],
                        [
                            "torch.cat(loss, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "save_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_count_395": {
                "variable": {
                    "value": "ngpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_431": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Net(embed, diora, loss_funcs=loss_funcs)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(net, device_ids=[rank], output_device=rank)",
                            "Call"
                        ],
                        [
                            "self.net.diora if diora else self.net",
                            "IfExp"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "options.local_rank",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_286": {
                "obj": {
                    "value": "{'state_dict': state_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__330": {
                "parameters": {
                    "value": "params",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[p for p in self.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in self.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in self.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in self.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in self.net.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in self.net.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_401": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "t_53": {
                "input": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_54": {
                "input": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_113": {
                "input": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_114": {
                "input": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_366": {
                "mode": {
                    "value": "train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_426": {
                "device": {
                    "value": "options.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_224": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "embed.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/scripts/parse.py": {
        "torch": {
            "no_grad_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/scripts/phrase_embed.py": {
        "torch": {
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/scripts/phrase_embed_simple.py": {
        "torch": {
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/diora/scripts/train.py": {
        "torch": {}
    }
}