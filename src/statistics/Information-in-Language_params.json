{
    "Perceptron Networks/Color/Automation.py": {
        "sklearn": {
            "train_test_split_77": {
                "variable": {
                    "value": "(lab_train, lab_test, chip_train, chip_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.language.lab_norm",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self.language.chip_norm()",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "self.test_train_split_percentage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Perceptron Networks/net_framework.py": {
        "torch": {
            "Sequential_41": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_43": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "round_52": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(X)",
                            "Call"
                        ],
                        [
                            "y / torch.sum(y)",
                            "BinOp"
                        ],
                        [
                            "torch.round(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_57": {
                "input": {
                    "value": "torch.abs(y_true - y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_61": {
                "input": {
                    "value": "(y_true - y_pred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_74": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "prev_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_num",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outputSize",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "prev_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputSize",
                            "Name"
                        ],
                        [
                            "hidden_num",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hiddenSize",
                            "Name"
                        ]
                    ]
                }
            },
            "ELU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(X)",
                            "Call"
                        ],
                        [
                            "y / torch.sum(y)",
                            "BinOp"
                        ],
                        [
                            "torch.round(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_57": {
                "input": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}