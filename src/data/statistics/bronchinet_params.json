{
    "src/dataloaders/keras/batchdatagenerator.py": {
        "tensorflow": {}
    },
    "src/models/keras/callbacks.py": {
        "tensorflow": {}
    },
    "src/models/keras/metrics.py": {
        "tensorflow": {
            "epsilon_9": {
                "variable": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "count_nonzero_162": {
                "variable": {
                    "value": "num_class_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(K.equal(target, 1.0), K.ones_like(target), K.zeros_like(target))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_164": {
                "variable": {
                    "value": "num_class_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(K.equal(target, 0.0), K.ones_like(target), K.zeros_like(target))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_208": {
                "variable": {
                    "value": "prob_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "K.equal(target, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "K.ones_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_209": {
                "variable": {
                    "value": "prob_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "K.equal(target, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "K.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_48": {
                "condition": {
                    "value": "K.equal(target, self._value_mask_exclude)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.zeros_like(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "K.ones_like(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_51": {
                "condition": {
                    "value": "K.equal(target, self._value_mask_exclude)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_114": {
                "a": {
                    "value": "K.square(input - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_118": {
                "a": {
                    "value": "K.square(input - target) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_128": {
                "a": {
                    "value": "K.square(K.log(K.clip(input, _EPS, None) + 1.0) - K.log(K.clip(target, _EPS, None) + 1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_133": {
                "a": {
                    "value": "K.square(K.log(K.clip(input, _EPS, None) + 1.0) - K.log(K.clip(target, _EPS, None) + 1.0)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_144": {
                "a": {
                    "value": "K.binary_crossentropy(target, input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_150": {
                "a": {
                    "value": "K.binary_crossentropy(target, input) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_171": {
                "a": {
                    "value": "-weights[1] * target * K.log(input + _EPS) - weights[0] * (1.0 - target) * K.log(1.0 - input + _EPS)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_177": {
                "a": {
                    "value": "(-weights[1] * target * K.log(input + _EPS) - weights[0] * (1.0 - target) * K.log(1.0 - input + _EPS)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_213": {
                "a": {
                    "value": "-target * K.pow(1.0 - input, self._gamma) * K.log(input + _EPS) - (1.0 - target) * K.pow(input, self._gamma) * K.log(1.0 - input + _EPS)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_218": {
                "a": {
                    "value": "(-target * K.pow(1.0 - input, self._gamma) * K.log(input + _EPS) - (1.0 - target) * K.pow(input, self._gamma) * K.log(1.0 - input + _EPS)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_48": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self._value_mask_exclude",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_51": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self._value_mask_exclude",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_51": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_114": {
                "x": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "K.log(K.clip(input, _EPS, None) + 1.0) - K.log(K.clip(target, _EPS, None) + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_crossentropy_144": {
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_162": {
                "condition": {
                    "value": "K.equal(target, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.ones_like(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "K.zeros_like(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_164": {
                "condition": {
                    "value": "K.equal(target, 0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "K.ones_like(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "K.zeros_like(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_208": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_208": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_209": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_209": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_242": {
                "a": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_255": {
                "a": {
                    "value": "1.0 - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_268": {
                "a": {
                    "value": "1.0 - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_278": {
                "a": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_33": {
                "structure": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_35": {
                "structure": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_118": {
                "x": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_133": {
                "x": {
                    "value": "K.log(K.clip(input, _EPS, None) + 1.0) - K.log(K.clip(target, _EPS, None) + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_crossentropy_150": {
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_162": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_162": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "equal_164": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "num_class_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.count_nonzero(tf.where(K.equal(target, 0.0), K.ones_like(target), K.zeros_like(target)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_229": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_128": {
                "x": {
                    "value": "K.clip(input, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_129": {
                "x": {
                    "value": "K.clip(target, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "num_class_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.count_nonzero(tf.where(K.equal(target, 1.0), K.ones_like(target), K.zeros_like(target)), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_171": {
                "x": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_172": {
                "x": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_213": {
                "x": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_214": {
                "x": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_86": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_133": {
                "x": {
                    "value": "K.clip(input, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_134": {
                "x": {
                    "value": "K.clip(target, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "x": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_178": {
                "x": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_213": {
                "x": {
                    "value": "1.0 - input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_214": {
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_218": {
                "x": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_219": {
                "x": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_128": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "a_min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_129": {
                "a": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "a_min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "pow_218": {
                "x": {
                    "value": "1.0 - input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_219": {
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_133": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "a_min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_134": {
                "a": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "a_min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.epsilon()",
                            "Call"
                        ]
                    ]
                },
                "a_max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/keras/modeltrainer.py": {
        "tensorflow": {
            "load_model_79": {
                "variable": {
                    "value": "self._built_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(map(lambda fun: (fun.__name__, fun), [custom_loss] + custom_metrics))",
                            "Call"
                        ],
                        [
                            "dict(map(lambda fun: (fun.__name__, fun), [custom_loss] + custom_metrics))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_85": {
                "variable": {
                    "value": "self._built_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(map(lambda fun: (fun.__name__, fun), [custom_loss] + custom_metrics))",
                            "Call"
                        ],
                        [
                            "dict(map(lambda fun: (fun.__name__, fun), [custom_loss] + custom_metrics))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_seed_29": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/keras/networkchecker.py": {
        "tensorflow": {
            "function_54": {
                "variable": {
                    "value": "get_feat_maps_layer_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "function_59": {
                "variable": {
                    "value": "get_feat_maps_layer_func",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/keras/networks.py": {
        "tensorflow": {
            "Input_69": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self._size_image_in + (self._num_channels_in,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concatenate_106": {
                "variable": {
                    "value": "upsample_up_lev5",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[upsample_up_lev5, convolution_down_lev4_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_113": {
                "variable": {
                    "value": "upsample_up_lev4",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[upsample_up_lev4, convolution_down_lev3_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_120": {
                "variable": {
                    "value": "upsample_up_lev3",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[upsample_up_lev3, convolution_down_lev2_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_127": {
                "variable": {
                    "value": "upsample_up_lev2",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[upsample_up_lev2, convolution_down_lev1_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Model_136": {
                "variable": {
                    "value": "output_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ],
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ],
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation='sigmoid')(convolution_up_lev1_2)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation=self._type_activate_output)(hidden_nxt)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation=self._type_activate_output)(hidden_nxt)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_258": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self._size_image_in + (self._num_channels_in,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Model_304": {
                "variable": {
                    "value": "output_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ],
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ],
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation='sigmoid')(convolution_up_lev1_2)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation=self._type_activate_output)(hidden_nxt)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation=self._type_activate_output)(hidden_nxt)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_343": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self._size_image_in + (self._num_channels_in,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concatenate_386": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[hidden_nxt, hidden_skip_lev4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_395": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[hidden_nxt, hidden_skip_lev3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_404": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[hidden_nxt, hidden_skip_lev2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concatenate_413": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[hidden_nxt, hidden_skip_lev1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Model_422": {
                "variable": {
                    "value": "output_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ],
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ],
                        [
                            "Input(self._size_image_in + (self._num_channels_in,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation='sigmoid')(convolution_up_lev1_2)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation=self._type_activate_output)(hidden_nxt)",
                            "Call"
                        ],
                        [
                            "Convolution3D(self._num_classes_out, kernel_size=(1, 1, 1), activation=self._type_activate_output)(hidden_nxt)",
                            "Call"
                        ]
                    ]
                }
            },
            "concatenate_287": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[hidden_nxt, hidden_skip_this]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MaxPooling3D_76": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_83": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_90": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_97": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_104": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_111": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_118": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_125": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_351": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_359": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_367": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_375": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_382": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_391": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_400": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_409": {
                "size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "UpSampling3D_282": {
                "size": {
                    "value": "self._sizes_upsample_levels[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Cropping3D_385": {
                "cropping": {
                    "value": "self._sizes_borders_crop_where_merge[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Cropping3D_394": {
                "cropping": {
                    "value": "self._sizes_borders_crop_where_merge[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Cropping3D_403": {
                "cropping": {
                    "value": "self._sizes_borders_crop_where_merge[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Cropping3D_412": {
                "cropping": {
                    "value": "self._sizes_borders_crop_where_merge[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_274": {
                "rate": {
                    "value": "self._dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPooling3D_278": {
                "pool_size": {
                    "value": "self._sizes_pooling_levels[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Cropping3D_286": {
                "cropping": {
                    "value": "self._sizes_borders_crop_where_merge[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_299": {
                "rate": {
                    "value": "self._dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNormalization_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/keras/optimizers.py": {
        "tensorflow": {}
    },
    "src/dataloaders/pytorch/batchdatagenerator.py": {
        "torch": {
            "from_numpy_50": {
                "ndarray": {
                    "value": "out_xdata.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "out_xdata.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "out_ydata.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/pytorch/metrics.py": {
        "torch": {
            "count_nonzero_149": {
                "variable": {
                    "value": "num_class_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(target == 1.0, torch.ones_like(target), torch.zeros_like(target))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_151": {
                "variable": {
                    "value": "num_class_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(target == 0.0, torch.ones_like(target), torch.zeros_like(target))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_195": {
                "variable": {
                    "value": "prob_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_196": {
                "variable": {
                    "value": "prob_0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "target == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_52": {
                "condition": {
                    "value": "target == self._value_mask_exclude",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_55": {
                "condition": {
                    "value": "target == self._value_mask_exclude",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "torch.square(input - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_107": {
                "input": {
                    "value": "torch.square(input - target) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_117": {
                "input": {
                    "value": "torch.square(torch.log(torch.clip(input, _EPS, None) + 1.0) - torch.log(torch.clip(target, _EPS, None) + 1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_122": {
                "input": {
                    "value": "torch.square(torch.log(torch.clip(input, _EPS, None) + 1.0) - torch.log(torch.clip(target, _EPS, None) + 1.0)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "-target * torch.log(input + _EPS) - (1.0 - target) * torch.log(1.0 - input + _EPS)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_138": {
                "input": {
                    "value": "(-target * torch.log(input + _EPS) - (1.0 - target) * torch.log(1.0 - input + _EPS)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_158": {
                "input": {
                    "value": "-weights[1] * target * torch.log(input + _EPS) - weights[0] * (1.0 - target) * torch.log(1.0 - input + _EPS)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "input": {
                    "value": "(-weights[1] * target * torch.log(input + _EPS) - weights[0] * (1.0 - target) * torch.log(1.0 - input + _EPS)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_200": {
                "input": {
                    "value": "-target * torch.pow(1.0 - input, self._gamma) * torch.log(input + _EPS) - (1.0 - target) * torch.pow(input, self._gamma) * torch.log(1.0 - input + _EPS)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_205": {
                "input": {
                    "value": "(-target * torch.pow(1.0 - input, self._gamma) * torch.log(input + _EPS) - (1.0 - target) * torch.pow(input, self._gamma) * torch.log(1.0 - input + _EPS)) * mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_103": {
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_117": {
                "input": {
                    "value": "torch.log(torch.clip(input, _EPS, None) + 1.0) - torch.log(torch.clip(target, _EPS, None) + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_149": {
                "condition": {
                    "value": "target == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_151": {
                "condition": {
                    "value": "target == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_195": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_196": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_229": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_242": {
                "input": {
                    "value": "1.0 - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_255": {
                "input": {
                    "value": "1.0 - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_265": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_34": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_36": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_107": {
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_122": {
                "input": {
                    "value": "torch.log(torch.clip(input, _EPS, None) + 1.0) - torch.log(torch.clip(target, _EPS, None) + 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_149": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_149": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_151": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_117": {
                "input": {
                    "value": "torch.clip(input, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "torch.clip(target, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_134": {
                "input": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_159": {
                "input": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_200": {
                "input": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_201": {
                "input": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_122": {
                "input": {
                    "value": "torch.clip(input, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "torch.clip(target, _EPS, None) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_138": {
                "input": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_139": {
                "input": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_164": {
                "input": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_165": {
                "input": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_200": {
                "input": {
                    "value": "1.0 - input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_201": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_205": {
                "input": {
                    "value": "input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_206": {
                "input": {
                    "value": "1.0 - input + _EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_117": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_118": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "pow_205": {
                "input": {
                    "value": "1.0 - input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_206": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self._gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_122": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_123": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "_EPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Constant"
                        ]
                    ]
                },
                "max": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/pytorch/modeltrainer.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "model_full",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_123": {
                "variable": {
                    "value": "model_full",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "self._network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_205": {
                "obj": {
                    "value": "model_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_filename, map_location=self._device)",
                            "Call"
                        ],
                        [
                            "torch.load(model_filename, map_location=self._device)",
                            "Call"
                        ],
                        [
                            "{'network_desc': [self._network.__class__.__name__, self._network.get_network_input_args()], 'network_state_dict': self._network.state_dict(), 'optimizer_desc': self._optimizer.__class__.__name__, 'optimizer_state_dict': self._optimizer.state_dict(), 'loss_desc': [self._loss.__class__.__name__, {'is_masks_exclude': self._loss._is_mask_exclude}], 'metrics_desc': [imetric.__class__.__name__ for imetric in self._list_metrics]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_EPOCH)",
                            "Call"
                        ],
                        [
                            "join_path_names(models_path, NAME_SAVEDMODEL_LAST)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_30": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/pytorch/networks.py": {
        "torch": {
            "Conv3d_87": {
                "variable": {
                    "value": "self._convolution_down_lev1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self._num_channels_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_88": {
                "variable": {
                    "value": "self._convolution_down_lev1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_89": {
                "variable": {
                    "value": "self._pooling_down_lev1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_92": {
                "variable": {
                    "value": "self._convolution_down_lev2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_93": {
                "variable": {
                    "value": "self._convolution_down_lev2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_94": {
                "variable": {
                    "value": "self._pooling_down_lev2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "variable": {
                    "value": "self._convolution_down_lev3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_98": {
                "variable": {
                    "value": "self._convolution_down_lev3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_99": {
                "variable": {
                    "value": "self._pooling_down_lev3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_102": {
                "variable": {
                    "value": "self._convolution_down_lev4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_103": {
                "variable": {
                    "value": "self._convolution_down_lev4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_104": {
                "variable": {
                    "value": "self._pooling_down_lev4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "variable": {
                    "value": "self._convolution_down_lev5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_108": {
                "variable": {
                    "value": "self._convolution_down_lev5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_109": {
                "variable": {
                    "value": "self._upsample_up_lev5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_112": {
                "variable": {
                    "value": "self._convolution_up_lev4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev4pl5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev4 + num_featmaps_lev5",
                            "BinOp"
                        ],
                        [
                            "num_featmaps_lev4 + num_featmaps_lev5",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "variable": {
                    "value": "self._convolution_up_lev4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_114": {
                "variable": {
                    "value": "self._upsample_up_lev4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_117": {
                "variable": {
                    "value": "self._convolution_up_lev3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev3pl4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev3 + num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "num_featmaps_lev3 + num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_118": {
                "variable": {
                    "value": "self._convolution_up_lev3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_119": {
                "variable": {
                    "value": "self._upsample_up_lev3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_122": {
                "variable": {
                    "value": "self._convolution_up_lev2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev2pl3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev2 + num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "num_featmaps_lev2 + num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_123": {
                "variable": {
                    "value": "self._convolution_up_lev2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_124": {
                "variable": {
                    "value": "self._upsample_up_lev2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_127": {
                "variable": {
                    "value": "self._convolution_up_lev1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev1pl2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev1 + num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_128": {
                "variable": {
                    "value": "self._convolution_up_lev1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_130": {
                "variable": {
                    "value": "self._classification_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self._num_classes_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_131": {
                "variable": {
                    "value": "self._activation_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_358": {
                "variable": {
                    "value": "self._classification_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self._num_featmaps_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._num_classes_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_469": {
                "variable": {
                    "value": "self._convolution_down_lev1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self._num_channels_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_471": {
                "variable": {
                    "value": "self._convolution_down_lev1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool3d_473": {
                "variable": {
                    "value": "self._pooling_down_lev1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_476": {
                "variable": {
                    "value": "self._convolution_down_lev2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_478": {
                "variable": {
                    "value": "self._convolution_down_lev2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool3d_480": {
                "variable": {
                    "value": "self._pooling_down_lev2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_483": {
                "variable": {
                    "value": "self._convolution_down_lev3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_485": {
                "variable": {
                    "value": "self._convolution_down_lev3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool3d_487": {
                "variable": {
                    "value": "self._pooling_down_lev3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_490": {
                "variable": {
                    "value": "self._convolution_down_lev4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_deep_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_valid_convols_deep_levels else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_492": {
                "variable": {
                    "value": "self._convolution_down_lev4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_deep_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_valid_convols_deep_levels else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool3d_494": {
                "variable": {
                    "value": "self._pooling_down_lev4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_497": {
                "variable": {
                    "value": "self._convolution_down_lev5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_deep_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_valid_convols_deep_levels else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_499": {
                "variable": {
                    "value": "self._convolution_down_lev5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_deep_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_valid_convols_deep_levels else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Upsample_501": {
                "variable": {
                    "value": "self._upsample_up_lev5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_504": {
                "variable": {
                    "value": "self._convolution_up_lev4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev4pl5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev4 + num_featmaps_lev5",
                            "BinOp"
                        ],
                        [
                            "num_featmaps_lev4 + num_featmaps_lev5",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_deep_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_valid_convols_deep_levels else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_506": {
                "variable": {
                    "value": "self._convolution_up_lev4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_deep_levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_valid_convols_deep_levels else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Upsample_508": {
                "variable": {
                    "value": "self._upsample_up_lev4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_511": {
                "variable": {
                    "value": "self._convolution_up_lev3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev3pl4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev3 + num_featmaps_lev4",
                            "BinOp"
                        ],
                        [
                            "num_featmaps_lev3 + num_featmaps_lev4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_513": {
                "variable": {
                    "value": "self._convolution_up_lev3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Upsample_515": {
                "variable": {
                    "value": "self._upsample_up_lev3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_518": {
                "variable": {
                    "value": "self._convolution_up_lev2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lev2pl3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev2 + num_featmaps_lev3",
                            "BinOp"
                        ],
                        [
                            "num_featmaps_lev2 + num_featmaps_lev3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_520": {
                "variable": {
                    "value": "self._convolution_up_lev2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ],
                        [
                            "2 * num_featmaps_lev1",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Upsample_522": {
                "variable": {
                    "value": "self._upsample_up_lev2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_525": {
                "variable": {
                    "value": "self._convolution_up_lev1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_feats_lay1pl2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_lev1 + num_featmaps_lev2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_527": {
                "variable": {
                    "value": "self._convolution_up_lev1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Conv3d_530": {
                "variable": {
                    "value": "self._classification_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_lev1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ],
                        [
                            "self._num_featmaps_in",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self._num_classes_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_582": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_589": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_596": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_603": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_lev1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_342": {
                "variable": {
                    "value": "new_upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self._sizes_upsample_levels[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout3d_361": {
                "variable": {
                    "value": "self._dropout_all_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "variable": {
                    "value": "self._activation_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_376": {
                "variable": {
                    "value": "self._activation_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "hidden_nxt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_nxt, hidden_skip_this]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_533": {
                "variable": {
                    "value": "self._activation_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_545": {
                "variable": {
                    "value": "self._activation_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_324": {
                "variable": {
                    "value": "new_convolution",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_in_convol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_in_level if i_con else num_featmaps_in_level",
                            "IfExp"
                        ],
                        [
                            "num_featmaps_in_level if i_con else num_featmaps_in_level",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_out_convol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ],
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self._sizes_kernel_convols_levels_down[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_convols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MaxPool3d_334": {
                "variable": {
                    "value": "new_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._sizes_pooling_levels[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_349": {
                "variable": {
                    "value": "new_convolution",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_featmaps_in_convol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_in_level if i_con else num_featmaps_in_level",
                            "IfExp"
                        ],
                        [
                            "num_featmaps_in_level if i_con else num_featmaps_in_level",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_featmaps_out_convol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ],
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self._sizes_kernel_convols_levels_up[i_lev]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "value_padding_convols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if self._is_use_valid_convols else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "LeakyReLU_366": {
                "variable": {
                    "value": "self._activation_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_535": {
                "variable": {
                    "value": "self._activation_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_330": {
                "variable": {
                    "value": "new_batchnormalize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_featmaps_out_convol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ],
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm3d_355": {
                "variable": {
                    "value": "new_batchnormalize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_featmaps_out_convol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ],
                        [
                            "num_featmaps_out_level",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/pytorch/optimizers.py": {
        "torch": {}
    }
}